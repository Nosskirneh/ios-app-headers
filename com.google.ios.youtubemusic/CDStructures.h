//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

@class ASLayout, GPBMessage, HAMCronetDataLoadTask, HAMDataBuffer, NSArray, NSAttributedString, NSCharacterSet, NSData, NSDictionary, NSHTTPURLResponse, NSMutableArray, NSMutableIndexSet, NSObject, NSOutputStream, NSString, NSURLRequest, TAGPBArray, TAGPBGeneratedMessage, UIColor;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ASDisplayNodeFlags {
    unsigned int viewEverHadAGestureRecognizerAttached:1;
    unsigned int layerBacked:1;
    unsigned int displaysAsynchronously:1;
    unsigned int rasterizesSubtree:1;
    unsigned int shouldBypassEnsureDisplay:1;
    unsigned int displaySuspended:1;
    unsigned int shouldAnimateSizeChanges:1;
    unsigned int canClearContentsOfLayer:1;
    unsigned int canCallSetNeedsDisplayOfLayer:1;
    unsigned int implementsDrawRect:1;
    unsigned int implementsImageDisplay:1;
    unsigned int implementsDrawParameters:1;
    unsigned int isEnteringHierarchy:1;
    unsigned int isExitingHierarchy:1;
    unsigned int isInHierarchy:1;
    unsigned int visibilityNotificationsDisabled:4;
    unsigned int isDeallocating:1;
};

struct ASDisplayNodeLayout {
    ASLayout *layout;
    CDStruct_42a63532 constrainedSize;
    struct CGSize parentSize;
    _Bool requestedLayoutFromAbove;
    unsigned long long version;
};

struct ASLayoutElementStyleExtensions {
    _Bool boolExtensions[1];
    long long integerExtensions[4];
    struct UIEdgeInsets edgeInsetsExtensions[1];
};

struct ASPendingStateControllerFlags {
    unsigned int pendingFlush:1;
};

struct ASTextKitAttributes {
    NSAttributedString *attributedString;
    NSAttributedString *truncationAttributedString;
    NSCharacterSet *avoidTailTruncationSet;
    long long lineBreakMode;
    unsigned long long maximumNumberOfLines;
    NSArray *exclusionPaths;
    struct CGSize shadowOffset;
    UIColor *shadowColor;
    double shadowOpacity;
    double shadowRadius;
    NSArray *pointSizeScaleFactors;
};

struct ActiveRequest;

struct Arena;

struct AudioBuffer {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
};

struct AudioBufferList {
    unsigned int _field1;
    struct AudioBuffer _field2[1];
};

struct AudioComponentDescription {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioStreamPacketDescription;

struct AudioTimeStamp {
    double _field1;
    unsigned long long _field2;
    double _field3;
    unsigned long long _field4;
    struct SMPTETime _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct AuthChallengeInfo;

struct AuthCredentials {
    struct basic_string<unsigned short, base::string16_internals::string16_char_traits, std::__1::allocator<unsigned short>> _field1;
    struct basic_string<unsigned short, base::string16_internals::string16_char_traits, std::__1::allocator<unsigned short>> _field2;
};

struct BinauralSurroundRenderer;

struct BindStateBase;

struct BoxReader {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    struct shared_ptr<media::MediaLog> _field4;
    int _field5;
    struct array<unsigned char, 16> _field6;
    unsigned char _field7;
    unsigned int _field8;
    struct multimap<media::mp4::FourCC, media::mp4::BoxReader, std::__1::less<media::mp4::FourCC>, std::__1::allocator<std::__1::pair<const media::mp4::FourCC, media::mp4::BoxReader>>> _field9;
    _Bool _field10;
    _Bool _field11;
};

struct Bucket<ELMCellNode *>;

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double _field1;
    double _field2;
};

struct CLLocationCoordinate2D {
    double _field1;
    double _field2;
};

struct Caller {
    NSObject *queue_;
    struct SegmentMapper *mapper_;
};

struct CardEdges {
    struct Line *_field1;
    struct Line *_field2;
    struct Line *_field3;
    struct Line *_field4;
};

struct CardboardApi;

struct CardboardApiImpl;

struct CertVerifier;

struct ChallengeEnvImpl;

struct ChallengeImpl;

struct ChangeSet {
    NSMutableIndexSet *inserted_sections;
    NSMutableIndexSet *deleted_sections;
    NSMutableIndexSet *reloaded_sections;
    NSMutableArray *inserted_items;
    NSMutableArray *deleted_items;
    NSMutableArray *reloaded_items;
};

struct CircularBuffer<double> {
    unsigned long long capacity_;
    unsigned long long begin_;
    unsigned long long size_;
    double *space_;
};

struct ClientTemplateProvider {
    CDUnknownFunctionPointerType *_field1;
};

struct Collection<youtube::elements::Section<absl::optional<absl::optional<Item>>>, absl::optional<absl::optional<Item>>> {
    struct vector<youtube::elements::Section<absl::optional<absl::optional<Item>>>, std::__1::allocator<youtube::elements::Section<absl::optional<absl::optional<Item>>>>> sections;
};

struct CollectionPath {
    long long _field1;
    struct variant<long, youtube::elements::CollectionPath::SupplementaryKind> _field2;
    id _field3;
};

struct Component {
    int _field1;
    int _field2;
};

struct CompressedTuple<unsigned long, absl::container_internal::HashEq<void *, void>::Hash, absl::container_internal::HashEq<void *, void>::Eq, std::__1::allocator<void *>> {
    unsigned long long value;
};

struct CompressedTuple<unsigned long, absl::hash_internal::Hash<YTIClientConnectionType>, std::__1::equal_to<YTIClientConnectionType>, std::__1::allocator<YTIClientConnectionType>> {
    unsigned long long value;
};

struct CompressedTuple<unsigned long, absl::hash_internal::Hash<int>, std::__1::equal_to<int>, std::__1::allocator<int>> {
    unsigned long long value;
};

struct CompressedTuple<unsigned long, absl::hash_internal::Hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>>>> {
    unsigned long long value;
};

struct ConnectTiming {
    struct TimeTicks _field1;
    struct TimeTicks _field2;
    struct TimeTicks _field3;
    struct TimeTicks _field4;
    struct TimeTicks _field5;
    struct TimeTicks _field6;
};

struct ContainerImpl;

struct CookieStore;

struct CronetDataLoadTask {
    NSHTTPURLResponse *response_;
    NSURLRequest *URLRequest_;
    NSDictionary *userInfo_;
    HAMCronetDataLoadTask *parentTask_;
    id delegate_;
    void *bufferData_;
    struct Cronet_UrlRequest *request_;
    struct Cronet_UrlRequestCallback *callback_;
};

struct CronetEnvironment {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    basic_string_90719d97 _field4;
    basic_string_90719d97 _field5;
    struct unique_ptr<base::DictionaryValue, std::__1::default_delete<base::DictionaryValue>> _field6;
    basic_string_90719d97 _field7;
    int _field8;
    struct vector<std::__1::unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>, std::__1::allocator<std::__1::unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>>> _field9;
    struct list<net::HostPortPair, std::__1::allocator<net::HostPortPair>> _field10;
    struct unique_ptr<base::Thread, std::__1::default_delete<base::Thread>> _field11;
    struct unique_ptr<base::Thread, std::__1::default_delete<base::Thread>> _field12;
    struct scoped_refptr<base::SequencedTaskRunner> _field13;
    unique_ptr_33e8c17e _field14;
    struct unique_ptr<net::CookieStore, std::__1::default_delete<net::CookieStore>> _field15;
    struct unique_ptr<net::URLRequestContext, std::__1::default_delete<net::URLRequestContext>> _field16;
    struct scoped_refptr<net::URLRequestContextGetter> _field17;
    basic_string_90719d97 _field18;
    _Bool _field19;
    struct unique_ptr<net::NetLog, std::__1::default_delete<net::NetLog>> _field20;
    struct unique_ptr<net::FileNetLogObserver, std::__1::default_delete<net::FileNetLogObserver>> _field21;
    _Bool _field22;
    double _field23;
    struct unique_ptr<cronet::CronetPrefsManager, std::__1::default_delete<cronet::CronetPrefsManager>> _field24;
};

struct CronetPrefsManager;

struct Cronet_UrlRequest;

struct Cronet_UrlRequestCallback;

struct DecisionPoint;

struct DecoratorResolver;

struct DefaultTemplateProvider;

struct DefaultTemplateResultCache {
    CDUnknownFunctionPointerType *_vptr$TemplateResultCache;
    struct node_hash_map<unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>, absl::hash_internal::Hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>>>> result_cache_;
};

struct Delegate;

struct DevTemplateProvider;

struct DictionaryValue;

struct DispatchFuture<LayoutFutureInput, ELMCellNode *> {
    struct LayoutFutureInput _field1;
    CDUnknownBlockType _field2;
    _Bool _field3;
    struct shared_ptr<youtube::elements::util::Bucket<ELMCellNode *>> _field4;
};

struct DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>;

struct DisplayMetrics {
    struct Vector<2, int> _field1;
    struct Vector<2, float> _field2;
    float _field3;
    int _field4;
};

struct DocumentParser;

struct Element;

struct EncodingsConverter;

struct ExpansionInfo {
    unsigned short _field1;
    id _field2;
    _Bool _field3;
    id _field4;
};

struct FLXAxisFactor {
    float _field1;
    float _field2;
};

struct FLXPoint {
    float _field1;
    float _field2;
};

struct FileNetLogObserver;

struct Flag;

struct Frame;

struct FrameCompare;

struct FramePriorityQueue {
    struct vector<hamplayer::FrameQueue::Frame, std::__1::allocator<hamplayer::FrameQueue::Frame>> c;
    struct FrameCompare comp;
};

struct FrameQueue {
    struct FramePriorityQueue _frames;
};

struct GAIReachabilityApi {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
};

struct GCKCastMessageSegmenterOutgoingMessage {
    Class _field1;
    _Bool _field2;
    _Bool _field3;
    id _field4;
    id _field5;
    unsigned long long _field6;
};

struct GFBArchivedFeedbackReportMetadata {
    unsigned int length;
    unsigned int version;
    long long timestamp;
};

struct GPBCodedInputStreamState {
    char *bytes;
    unsigned long long bufferSize;
    unsigned long long bufferPos;
    unsigned long long currentLimit;
    int lastTag;
    unsigned long long recursionDepth;
};

struct GPBExtensionDescription {
    CDUnion_88782d86 _field1;
    char *_field2;
    char *_field3;
    char *_field4;
    CDUnknownFunctionPointerType _field5;
    int _field6;
    unsigned char _field7;
    unsigned char _field8;
};

struct GPBExtensionRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct GPBMessageFieldDescription {
    char *_field1;
    union {
        char *_field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
    } _field2;
    unsigned int _field3;
    int _field4;
    unsigned int _field5;
    unsigned short _field6;
    unsigned char _field7;
};

struct GPBMessage_Storage {
    unsigned int _field1[0];
};

struct GPBOutputBufferState {
    char *bytes;
    unsigned long long size;
    unsigned long long position;
    NSOutputStream *output;
};

struct GPCPromise {
    Class _field1;
};

struct GSKAudioSessionConfig {
    _Bool _field1;
    _Bool _field2;
};

struct GTLRUserDataControls_ClientManagedSettingState {
    Class _field1;
};

struct GULReachabilityApi {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
};

struct GURL {
    basic_string_90719d97 _field1;
    _Bool _field2;
    struct Parsed _field3;
    struct unique_ptr<GURL, std::__1::default_delete<GURL>> _field4;
};

struct Group {
    CDUnknownFunctionPointerType *_field1;
};

struct HAMAmbisonicRenderBlockParams {
    struct AudioBufferList *inBuffer;
    struct AudioBufferList *mutableInBuffer;
    float **inputPlanarArray;
    unsigned long long inBufferStructSize;
    union _GLKQuaternion orientation;
    struct BinauralSurroundRenderer *renderer;
};

struct HAMAudioEngineTrackRendererConfiguration {
    int maxScheduledBuffers;
    int minScheduledBuffers;
};

struct HAMDASHSegment;

struct HAMMP4MdatBox;

struct HAMPixelBufferVideoTrackRendererConfiguration {
    int targetFrameQueueSize;
    int minimumFrameQueueSize;
    double maxFrameFallBehind;
};

struct HAMPixelBufferVideoTrackRendererTimeSyncData {
    CDStruct_576a8307 time;
    CDStruct_1b6d18a9 seekTime;
};

struct HAMSBARAudioTrackRendererConfiguration {
    int samplesPerBuffer;
    _Bool flushOnReturnFromBackground;
};

struct HAMWebMDataBufferReader {
    CDUnknownFunctionPointerType *_vptr$Reader;
    HAMDataBuffer *buffer_;
    unsigned long long position_;
    _Bool is_loaded_;
};

struct HAMWebMMediaChunkFrameCallback {
    CDUnknownFunctionPointerType *_vptr$Callback;
    unsigned long long cluster_timecode_;
    unsigned long long frame_pts_;
    unsigned long long chunk_end_time_;
    struct vector<Frame, std::__1::allocator<Frame>> frames_;
    unsigned long long current_frame_index_;
    NSString *error_details_;
};

struct HLSCondensedRelativeURL {
    basic_string_90719d97 base_uri_;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> params_;
    basic_string_90719d97 prefix_;
};

struct HLSKey;

struct HLSPlaylist {
    long long target_duration_sec_;
    long long media_sequence_;
    long long desired_playlist_length_;
    double desired_playlist_duration_sec_;
    double playlist_duration_;
    struct list<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> playlist_header_order_;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> playlist_header_map_;
    _Bool endlist_;
    _Bool iframes_only_;
    struct deque<video::storage::hls::HLSPlaylistItem, std::__1::allocator<video::storage::hls::HLSPlaylistItem>> playlist_;
    struct unique_ptr<video::storage::hls::HLSKey, std::__1::default_delete<video::storage::hls::HLSKey>> latest_playlist_key_;
    int feature_version_;
    int deterministic_output_version_;
    struct HLSCondensedRelativeURL condensed_url_;
};

struct HLSPlaylistItem {
    long long segment_url_sequence_number_;
    int audio_content_length_bytes_;
    int video_content_length_bytes_;
    double segment_duration_sec_;
    struct unique_ptr<video::storage::hls::HLSPlaylistItem::InternalData, std::__1::default_delete<video::storage::hls::HLSPlaylistItem::InternalData>> internal_data_;
    long long last_modified_time_micros_;
    long long audio_last_modified_time_micros_;
    long long video_last_modified_time_micros_;
    long long ingestion_walltime_micros_;
    long long content_walltime_micros_;
    int content_length_bytes_;
    _Bool discontinuity_;
    int discontinuity_sequence_number_;
};

struct HashValue;

struct HeaderKeyValuePair;

struct HistoryRing {
    struct DecisionPoint *_field1;
    int _field2;
    int _field3;
};

struct HostPortPair {
    basic_string_90719d97 _field1;
    unsigned short _field2;
};

struct HttpProtocolHandlerCore;

struct HttpRequestHeaders {
    struct vector<net::HttpRequestHeaders::HeaderKeyValuePair, std::__1::allocator<net::HttpRequestHeaders::HeaderKeyValuePair>> _field1;
};

struct HttpResponseHeaders;

struct HttpResponseInfo {
    _Bool _field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    struct ProxyServer _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    struct Time _field12;
    struct HostPortPair _field13;
    basic_string_90719d97 _field14;
    int _field15;
    struct Time _field16;
    struct Time _field17;
    struct scoped_refptr<net::AuthChallengeInfo> _field18;
    struct scoped_refptr<net::SSLCertRequestInfo> _field19;
    struct SSLInfo _field20;
    struct scoped_refptr<net::HttpResponseHeaders> _field21;
    struct HttpVaryData _field22;
    struct scoped_refptr<net::IOBufferWithSize> _field23;
};

struct HttpVaryData {
    struct MD5Digest _field1;
    _Bool _field2;
};

struct IGListSectionController {
    Class _field1;
};

struct IGListSectionEntry;

struct IOBufferWithSize;

struct InternalData;

struct Item {
    struct variant<std::__1::pair<NSData *, id<ELMContext>>, std::__1::shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>, ObjCStrong<ELMNodeController>> _field1;
    struct optional<youtube::elements::util::DispatchFuture<LayoutFutureInput, ELMCellNode *>> _field2;
};

struct JavaScriptEnvImpl;

struct KeyFrameIndex;

struct LDAdState {
    double _field1;
    struct CGRect _field2;
    struct CGSize _field3;
    struct CGSize _field4;
};

struct LOT_Subpath {
    int _field1;
    double _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    struct CGPoint _field5;
    struct LOT_Subpath *_field6;
};

struct LayoutFutureInput {
    CDStruct_42a63532 _field1;
    struct variant<ObjCWeak<ELMNodeController>, std::__1::weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>> _field2;
};

struct LeakTracker<net::URLRequest>;

struct Line;

struct LoadTimingInfo {
    _Bool _field1;
    unsigned int _field2;
    struct Time _field3;
    struct TimeTicks _field4;
    struct TimeTicks _field5;
    struct TimeTicks _field6;
    struct ConnectTiming _field7;
    struct TimeTicks _field8;
    struct TimeTicks _field9;
    struct TimeTicks _field10;
    struct TimeTicks _field11;
    struct TimeTicks _field12;
};

struct MD5Digest {
    unsigned char _field1[16];
};

struct MDCActivityIndicatorMotionSpecIndeterminate {
    struct MDMMotionTiming _field1;
    struct MDMMotionTiming _field2;
    struct MDMMotionTiming _field3;
    struct MDMMotionTiming _field4;
};

struct MDCActivityIndicatorMotionSpecProgress {
    struct MDMMotionTiming _field1;
};

struct MDCActivityIndicatorMotionSpecTransitionToDeterminate {
    struct MDMMotionTiming _field1;
    struct MDMMotionTiming _field2;
};

struct MDCActivityIndicatorMotionSpecTransitionToIndeterminate {
    struct MDMMotionTiming _field1;
    struct MDMMotionTiming _field2;
};

struct MDMMotionCurve {
    unsigned long long _field1;
    double _field2[4];
};

struct MDMMotionRepetition {
    unsigned long long _field1;
    double _field2;
    _Bool _field3;
};

struct MDMMotionTiming {
    double _field1;
    double _field2;
    struct MDMMotionCurve _field3;
    struct MDMMotionRepetition _field4;
};

struct MLTextTrackRendererConfiguration {
    double targetScheduledDuration;
};

struct MP4SampleIterator {
    struct vector<std::__1::unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>, std::__1::allocator<std::__1::unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>>> *_fragments;
    CDStruct_0370d347 _initialization_data;
    unsigned long long _fragment_index;
    unsigned long long _run_index;
    unsigned long long _sample_index;
    struct MovieFragment *_fragment;
    unsigned long long _fragment_offset;
    struct TrackFragment *_track;
    struct TrackFragmentRun *_run;
    unsigned long long _sample_data_offset;
    long long _decode_timestamp;
    long long _timestamp_offset;
};

struct ManagerImpl;

struct Mat<unsigned char> {
    int _field1;
    int _field2;
    char *_field3;
};

struct MediaLog;

struct MovieFragment;

struct Mutex;

struct NSArray {
    Class _field1;
};

struct NSDictionary {
    Class _field1;
};

struct NSHashTable {
    Class _field1;
};

struct NSMapTable {
    Class _field1;
};

struct NSMutableArray {
    Class _field1;
};

struct NSMutableDictionary {
    Class _field1;
};

struct NSNumber {
    Class _field1;
};

struct NetLog;

struct NetLogSource {
    int _field1;
    unsigned int _field2;
};

struct NetLogWithSource {
    struct NetLogSource _field1;
    struct NetLog *_field2;
    int _field3;
};

struct NetworkDelegate;

struct NetworkTrafficAnnotationTag {
    int _field1;
};

struct NewEndpointer {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct HistoryRing _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    int _field8;
    long long _field9;
    float _field10;
    unsigned int _field11;
    unsigned int _field12;
    long long _field13;
    struct map<speech::EpStatus, long long, std::__1::less<speech::EpStatus>, std::__1::allocator<std::__1::pair<const speech::EpStatus, long long>>> _field14;
    id _field15;
    float _field16;
    float _field17;
};

struct Nonce {
    struct UnguessableToken _field1;
};

struct OCSPVerifyResult {
    int _field1;
    int _field2;
};

struct ObjCStrong<ELMNodeController> {
    id _field1;
};

struct ObjCWeak<ELMNodeController> {
    id _field1;
};

struct Optional<url::Origin::Nonce> {
    struct OptionalStorage<url::Origin::Nonce, false, false> _field1;
};

struct Optional<url::Origin> {
    struct OptionalStorage<url::Origin, false, false> _field1;
};

struct OptionalStorage<url::Origin, false, false> {
    _Bool _field1;
    union {
        char _field1;
        struct Origin _field2;
    } _field2;
};

struct OptionalStorage<url::Origin::Nonce, false, false> {
    _Bool _field1;
    union {
        char _field1;
        struct Nonce _field2;
    } _field2;
};

struct Origin {
    struct SchemeHostPort _field1;
    struct Optional<url::Origin::Nonce> _field2;
};

struct PanoRenderer;

struct PanoVideoRenderer;

struct Parsed {
    struct Component _field1;
    struct Component _field2;
    struct Component _field3;
    struct Component _field4;
    struct Component _field5;
    struct Component _field6;
    struct Component _field7;
    struct Component _field8;
    _Bool _field9;
    struct Parsed *_field10;
};

struct Point<3, float> {
    float elem_[3];
};

struct Pose<float> {
    struct Rotation<float> rotation_;
    struct Point<3, float> position_;
};

struct ProxyServer {
    int _field1;
    struct HostPortPair _field2;
    _Bool _field3;
};

struct RecognitionOptions {
    int barcode_formats;
    struct EncodingsConverter *encodings_converter;
};

struct RecognizerOutput {
    int _field1;
    int _field2;
    int *_field3;
    int *_field4;
    int *_field5;
    float *_field6;
    int _field7;
    basic_string_90719d97 _field8;
    float _field9;
    int _field10;
    int _field11[2];
    int _field12[6];
    int _field13[6];
    struct SearchNode _field14;
};

struct Rect {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
};

struct RecursiveMutex;

struct RenderStats;

struct RenderTextureParams;

struct Renderer;

struct Rep;

struct RepeatedField<float> {
    int _field1;
    int _field2;
    union Pointer _field3;
};

struct RepeatedPtrField<youtube::elements::Element> {
    struct Arena *_field1;
    int _field2;
    int _field3;
    struct Rep *_field4;
};

struct RepeatingCallback<void (net::HttpRawRequestHeaders)> {
    struct scoped_refptr<base::internal::BindStateBase> _field1;
};

struct RepeatingCallback<void (scoped_refptr<const net::HttpResponseHeaders>)> {
    struct scoped_refptr<base::internal::BindStateBase> _field1;
};

struct Rotation<float> {
    struct Vector<4, float> quat_;
};

struct SMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct SSLCertRequestInfo;

struct SSLInfo {
    struct scoped_refptr<net::X509Certificate> _field1;
    struct scoped_refptr<net::X509Certificate> _field2;
    unsigned int _field3;
    int _field4;
    unsigned short _field5;
    unsigned short _field6;
    int _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    int _field13;
    struct vector<net::HashValue, std::__1::allocator<net::HashValue>> _field14;
    basic_string_90719d97 _field15;
    struct vector<net::SignedCertificateTimestampAndStatus, std::__1::allocator<net::SignedCertificateTimestampAndStatus>> _field16;
    int _field17;
    _Bool _field18;
    struct OCSPVerifyResult _field19;
    _Bool _field20;
};

struct SchemeHostPort {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    unsigned short _field3;
};

struct ScoreVector {
    float _field1;
    float _field2[6];
    struct vector<float, std::__1::allocator<float>> _field3;
    struct vector<float, std::__1::allocator<float>> _field4;
    int _field5;
};

struct SearchNode {
    struct ScoreVector _field1;
    basic_string_90719d97 _field2;
    basic_string_90719d97 _field3;
    int _field4;
    int _field5;
};

struct Section<absl::optional<absl::optional<Item>>>;

struct SegmentIndex {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    struct vector<media::mp4::SegmentIndexReference, std::__1::allocator<media::mp4::SegmentIndexReference>> _field6;
};

struct SegmentIndexReference;

struct SegmentMapper {
    struct map<long long, hamplayer::SegmentRange, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, hamplayer::SegmentRange>>> ranges_;
    struct map<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *, std::__1::less<hamplayer::SegmentMapper::MediaTimeIndex>, std::__1::allocator<std::__1::pair<const hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>>> media_time_ranges_;
    struct map<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *, std::__1::less<hamplayer::SegmentMapper::ProductionTimeIndex>, std::__1::allocator<std::__1::pair<const hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>>> production_time_ranges_;
    double target_duration_;
};

struct SeparatorAttributes {
    _Bool _field1;
    float _field2;
    float _field3;
};

struct SequenceChecker;

struct SequencedTaskRunner;

struct ShaderManager;

struct Shareable;

struct SharedPtr<ion::gfx::Renderer> {
    struct Renderer *ptr_;
    struct Shareable *shr_;
};

struct SharedPtr<ion::gfxutils::Frame> {
    struct Frame *ptr_;
    struct Shareable *shr_;
};

struct SharedPtr<ion::gfxutils::ShaderManager> {
    struct ShaderManager *ptr_;
    struct Shareable *shr_;
};

struct SharedPtr<ion::net::ActiveRequest> {
    struct ActiveRequest *_field1;
    struct Shareable *_field2;
};

struct SignedCertificateTimestampAndStatus;

struct SocketTag;

struct SpeexBits {
    char *chars;
    int nbBits;
    int charPtr;
    int bitPtr;
    int owner;
    int overflow;
    int buf_size;
    int reserved1;
    void *reserved2;
};

struct SphericalV2Manager;

struct Status {
    int code;
};

struct StreamTask {
    long long _field1;
    long long _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    _Bool _field7;
};

struct TAGPBExtensionDescription {
    char *_field1;
    int _field2;
    char *_field3;
    int _field4;
    CDUnion_3de46016 _field5;
    char *_field6;
    unsigned int _field7;
    char *_field8;
};

struct TAGPBInputBufferState {
    char *bytes;
    unsigned long long bufferSize;
    unsigned long long bufferPos;
    unsigned long long currentLimit;
};

struct TAGPBMessageEnumDescription {
    char *_field1;
};

struct TAGPBMessageEnumValueDescription {
    char *_field1;
    int _field2;
};

struct TAGPBMessageExtensionRangeDescription {
    unsigned int _field1;
    unsigned int _field2;
};

struct TAGPBMessageFieldDescription {
    char *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    unsigned long long _field6;
    char *_field7;
    CDUnion_3de46016 _field8;
    union {
        char *_field1;
        CDUnknownFunctionPointerType _field2;
    } _field9;
};

struct TAGPBOutputBufferState {
    char *bytes;
    unsigned long long size;
    unsigned long long position;
    NSOutputStream *output;
};

struct TemplateResolver;

struct Thread;

struct Time {
    long long us_;
};

struct TimeMapper {
    struct map<CMTime, double, hamplayer::TimeMapper::CMTimeLess, std::__1::allocator<std::__1::pair<const CMTime, double>>> mapping_;
    struct map<double, CMTime, std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, CMTime>>> reverse_mapping_;
};

struct TimeTicks {
    long long _field1;
};

struct TrackFragment;

struct TrackFragmentRun;

struct UIColor {
    Class _field1;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UIOffset {
    double _field1;
    double _field2;
};

struct URLRequest {
    CDUnknownFunctionPointerType *_field1;
    struct map<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>, std::__1::less<const void *>, std::__1::allocator<std::__1::pair<const void *const, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>>> _field2;
    struct SequenceChecker _field3;
    struct URLRequestContext *_field4;
    struct NetworkDelegate *_field5;
    struct NetLogWithSource _field6;
    struct unique_ptr<net::URLRequestJob, std::__1::default_delete<net::URLRequestJob>> _field7;
    struct unique_ptr<net::UploadDataStream, std::__1::default_delete<net::UploadDataStream>> _field8;
    struct vector<GURL, std::__1::allocator<GURL>> _field9;
    struct GURL _field10;
    _Bool _field11;
    struct Optional<url::Origin> _field12;
    struct GURL _field13;
    basic_string_90719d97 _field14;
    basic_string_90719d97 _field15;
    int _field16;
    int _field17;
    struct HttpRequestHeaders _field18;
    int _field19;
    struct Delegate *_field20;
    struct URLRequestStatus _field21;
    struct HttpResponseInfo _field22;
    _Bool _field23;
    _Bool _field24;
    int _field25;
    struct UploadProgress _field26;
    int _field27;
    unsigned long long _field28;
    int _field29;
    _Bool _field30;
    basic_string_90719d97 _field31;
    _Bool _field32;
    struct LeakTracker<net::URLRequest> _field33;
    _Bool _field34;
    struct AuthCredentials _field35;
    struct scoped_refptr<net::AuthChallengeInfo> _field36;
    long long _field37;
    struct TimeTicks _field38;
    struct LoadTimingInfo _field39;
    struct ProxyServer _field40;
    int _field41;
    _Bool _field42;
    struct NetworkTrafficAnnotationTag _field43;
    struct SocketTag _field44;
    struct RepeatingCallback<void (net::HttpRawRequestHeaders)> _field45;
    struct RepeatingCallback<void (scoped_refptr<const net::HttpResponseHeaders>)> _field46;
    _Bool _field47;
    struct WeakPtrFactory<net::URLRequest> _field48;
};

struct URLRequestContext;

struct URLRequestContextGetter;

struct URLRequestJob;

struct URLRequestStatus {
    int _field1;
    int _field2;
};

struct UnguessableToken {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct UploadDataStream;

struct UploadProgress {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct Vector<2, float> {
    float _field1[2];
};

struct Vector<2, int> {
    int _field1[2];
};

struct Vector<4, float> {
    float elem_[4];
};

struct WeakPtrFactory<net::URLRequest> {
    struct WeakReferenceOwner _field1;
    unsigned long long _field2;
};

struct WeakReferenceOwner {
    struct scoped_refptr<base::internal::WeakReference::Flag> _field1;
};

struct WebPData {
    char *bytes;
    unsigned long long size;
};

struct WebPIterator {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    struct WebPData _field10;
    int _field11;
    int _field12;
    unsigned int _field13[2];
    void *_field14;
};

struct WebmParser {
    struct unique_ptr<webm::WebmParser::DocumentParser, std::__1::default_delete<webm::WebmParser::DocumentParser>> parser_;
    struct Status parsing_status_;
};

struct WidgetRenderer;

struct X509Certificate;

struct YTClientResource {
    id _field1;
    id _field2;
    struct optional<unsigned int> _field3;
};

struct YTImageSource {
    id _field1;
    id _field2;
    struct YTClientResource _field3;
    struct optional<unsigned int> _field4;
    struct optional<unsigned int> _field5;
};

struct _DDRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _GLKMatrix4 {
    float m[16];
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _TBXMLAttribute {
    char *_field1;
    char *_field2;
    struct _TBXMLAttribute *_field3;
};

struct _TBXMLAttributeBuffer {
    struct _TBXMLAttribute *_field1;
    struct _TBXMLAttributeBuffer *_field2;
    struct _TBXMLAttributeBuffer *_field3;
};

struct _TBXMLElement {
    char *_field1;
    char *_field2;
    struct _TBXMLAttribute *_field3;
    struct _TBXMLElement *_field4;
    struct _TBXMLElement *_field5;
    struct _TBXMLElement *_field6;
    struct _TBXMLElement *_field7;
    struct _TBXMLElement *_field8;
};

struct _TBXMLElementBuffer {
    struct _TBXMLElement *_field1;
    struct _TBXMLElementBuffer *_field2;
    struct _TBXMLElementBuffer *_field3;
};

struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*> *__next_;
};

struct __list_node_base<net::HostPortPair, void *> {
    struct __list_node_base<net::HostPortPair, void *> *_field1;
    struct __list_node_base<net::HostPortPair, void *> *_field2;
};

struct __list_node_base<std::__1::basic_string<char>, void *> {
    struct __list_node_base<std::__1::basic_string<char>, void *> *__prev_;
    struct __list_node_base<std::__1::basic_string<char>, void *> *__next_;
};

struct __raw {
    unsigned long long __words[3];
};

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _opaque_pthread_cond_t {
    long long __sig;
    char __opaque[40];
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _xmlAttr;

struct _xmlDoc;

struct _xmlHashTable;

struct _xmlNode {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    struct _xmlNs *_field10;
    char *_field11;
    struct _xmlAttr *_field12;
    struct _xmlNs *_field13;
    void *_field14;
    unsigned short _field15;
    unsigned short _field16;
};

struct _xmlNs;

struct _xmlParserCtxt {
    struct _xmlSAXHandler *_field1;
    void *_field2;
    struct _xmlDoc *_field3;
    int _field4;
    int _field5;
    char *_field6;
    char *_field7;
    int _field8;
    int _field9;
    struct _xmlParserInput *_field10;
    int _field11;
    int _field12;
    struct _xmlParserInput **_field13;
    struct _xmlNode *_field14;
    int _field15;
    int _field16;
    struct _xmlNode **_field17;
    int _field18;
    struct _xmlParserNodeInfoSeq {
        unsigned long long _field1;
        unsigned long long _field2;
        struct _xmlParserNodeInfo *_field3;
    } _field19;
    int _field20;
    int _field21;
    int _field22;
    int _field23;
    int _field24;
    int _field25;
    struct _xmlValidCtxt {
        void *_field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        struct _xmlNode *_field4;
        int _field5;
        int _field6;
        struct _xmlNode **_field7;
        unsigned int _field8;
        struct _xmlDoc *_field9;
        int _field10;
        struct _xmlValidState *_field11;
        int _field12;
        int _field13;
        struct _xmlValidState *_field14;
        struct _xmlAutomata *_field15;
        struct _xmlAutomataState *_field16;
    } _field26;
    int _field27;
    int _field28;
    char *_field29;
    char *_field30;
    int _field31;
    int _field32;
    char **_field33;
    long long _field34;
    long long _field35;
    int _field36;
    int _field37;
    int _field38;
    char *_field39;
    char *_field40;
    char *_field41;
    int *_field42;
    int _field43;
    int _field44;
    int *_field45;
    int _field46;
    struct _xmlParserInput *_field47;
    int _field48;
    int _field49;
    int _field50;
    int _field51;
    void *_field52;
    int _field53;
    int _field54;
    void *_field55;
    int _field56;
    int _field57;
    struct _xmlDict *_field58;
    char **_field59;
    int _field60;
    int _field61;
    char *_field62;
    char *_field63;
    char *_field64;
    int _field65;
    int _field66;
    int _field67;
    char **_field68;
    int *_field69;
    void **_field70;
    struct _xmlHashTable *_field71;
    struct _xmlHashTable *_field72;
    int _field73;
    int _field74;
    int _field75;
    int _field76;
    struct _xmlNode *_field77;
    int _field78;
    struct _xmlAttr *_field79;
    struct _xmlError {
        int _field1;
        int _field2;
        char *_field3;
        int _field4;
        char *_field5;
        int _field6;
        char *_field7;
        char *_field8;
        char *_field9;
        int _field10;
        int _field11;
        void *_field12;
        void *_field13;
    } _field80;
    int _field81;
    unsigned long long _field82;
    unsigned long long _field83;
    struct _xmlParserNodeInfo *_field84;
    int _field85;
    int _field86;
    struct _xmlParserNodeInfo *_field87;
    int _field88;
    unsigned long long _field89;
};

struct _xmlParserInput;

struct _xmlParserNodeInfo;

struct _xmlSAXHandler {
    CDUnknownFunctionPointerType internalSubset;
    CDUnknownFunctionPointerType isStandalone;
    CDUnknownFunctionPointerType hasInternalSubset;
    CDUnknownFunctionPointerType hasExternalSubset;
    CDUnknownFunctionPointerType resolveEntity;
    CDUnknownFunctionPointerType getEntity;
    CDUnknownFunctionPointerType entityDecl;
    CDUnknownFunctionPointerType notationDecl;
    CDUnknownFunctionPointerType attributeDecl;
    CDUnknownFunctionPointerType elementDecl;
    CDUnknownFunctionPointerType unparsedEntityDecl;
    CDUnknownFunctionPointerType setDocumentLocator;
    CDUnknownFunctionPointerType startDocument;
    CDUnknownFunctionPointerType endDocument;
    CDUnknownFunctionPointerType startElement;
    CDUnknownFunctionPointerType endElement;
    CDUnknownFunctionPointerType reference;
    CDUnknownFunctionPointerType characters;
    CDUnknownFunctionPointerType ignorableWhitespace;
    CDUnknownFunctionPointerType processingInstruction;
    CDUnknownFunctionPointerType comment;
    CDUnknownFunctionPointerType warning;
    CDUnknownFunctionPointerType error;
    CDUnknownFunctionPointerType fatalError;
    CDUnknownFunctionPointerType getParameterEntity;
    CDUnknownFunctionPointerType cdataBlock;
    CDUnknownFunctionPointerType externalSubset;
    unsigned int initialized;
    void *_private;
    CDUnknownFunctionPointerType startElementNs;
    CDUnknownFunctionPointerType endElementNs;
    CDUnknownFunctionPointerType serror;
};

struct _xmlValidState;

struct array<unsigned char, 16> {
    unsigned char _field1[16];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw __r;
            } ;
        } __value_;
    } __r_;
};

struct basic_string<unsigned short, base::string16_internals::string16_char_traits, std::__1::allocator<unsigned short>> {
    struct __compressed_pair<std::__1::basic_string<unsigned short, base::string16_internals::string16_char_traits, std::__1::allocator<unsigned short>>::__rep, std::__1::allocator<unsigned short>> {
        struct __rep {
            union {
                struct __long {
                    unsigned short *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    unsigned short _field1[11];
                    struct {
                        unsigned char _field1[1];
                        unsigned char _field2;
                    } _field2;
                } _field2;
                struct __raw _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct deque<std::__1::tuple<CGSize, ASTextLayout *>, std::__1::allocator<std::__1::tuple<CGSize, ASTextLayout *>>> {
    struct __split_buffer<std::__1::tuple<CGSize, ASTextLayout *>*, std::__1::allocator<std::__1::tuple<CGSize, ASTextLayout *>*>> {
        struct tuple<CGSize, ASTextLayout *> **__first_;
        struct tuple<CGSize, ASTextLayout *> **__begin_;
        struct tuple<CGSize, ASTextLayout *> **__end_;
        struct __compressed_pair<std::__1::tuple<CGSize, ASTextLayout *>**, std::__1::allocator<std::__1::tuple<CGSize, ASTextLayout *>*>> {
            struct tuple<CGSize, ASTextLayout *> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::tuple<CGSize, ASTextLayout *>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<unsigned int, std::__1::allocator<unsigned int>> {
    struct __split_buffer<unsigned int *, std::__1::allocator<unsigned int *>> {
        unsigned int **__first_;
        unsigned int **__begin_;
        unsigned int **__end_;
        struct __compressed_pair<unsigned int **, std::__1::allocator<unsigned int *>> {
            unsigned int **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned int>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<video::storage::hls::HLSPlaylistItem, std::__1::allocator<video::storage::hls::HLSPlaylistItem>> {
    struct __split_buffer<video::storage::hls::HLSPlaylistItem *, std::__1::allocator<video::storage::hls::HLSPlaylistItem *>> {
        struct HLSPlaylistItem **__first_;
        struct HLSPlaylistItem **__begin_;
        struct HLSPlaylistItem **__end_;
        struct __compressed_pair<video::storage::hls::HLSPlaylistItem **, std::__1::allocator<video::storage::hls::HLSPlaylistItem *>> {
            struct HLSPlaylistItem **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<video::storage::hls::HLSPlaylistItem>> {
        unsigned long long __value_;
    } __size_;
};

struct dummy_type {
    struct empty_struct _field1[4];
};

struct empty_struct;

struct flat_hash_set<YTIClientConnectionType, absl::hash_internal::Hash<YTIClientConnectionType>, std::__1::equal_to<YTIClientConnectionType>, std::__1::allocator<YTIClientConnectionType>> {
    char *ctrl_;
    int *slots_;
    unsigned long long size_;
    unsigned long long capacity_;
    struct CompressedTuple<unsigned long, absl::hash_internal::Hash<YTIClientConnectionType>, std::__1::equal_to<YTIClientConnectionType>, std::__1::allocator<YTIClientConnectionType>> settings_;
};

struct flat_hash_set<int, absl::hash_internal::Hash<int>, std::__1::equal_to<int>, std::__1::allocator<int>> {
    char *ctrl_;
    int *slots_;
    unsigned long long size_;
    unsigned long long capacity_;
    struct CompressedTuple<unsigned long, absl::hash_internal::Hash<int>, std::__1::equal_to<int>, std::__1::allocator<int>> settings_;
};

struct flat_hash_set<void *, absl::container_internal::HashEq<void *, void>::Hash, absl::container_internal::HashEq<void *, void>::Eq, std::__1::allocator<void *>> {
    char *ctrl_;
    void **slots_;
    unsigned long long size_;
    unsigned long long capacity_;
    struct CompressedTuple<unsigned long, absl::container_internal::HashEq<void *, void>::Hash, absl::container_internal::HashEq<void *, void>::Eq, std::__1::allocator<void *>> settings_;
};

struct grpc_byte_buffer {
    void *_field1;
    int _field2;
    union grpc_byte_buffer_data _field3;
};

struct grpc_compressed_buffer {
    int _field1;
    struct grpc_slice_buffer _field2;
};

struct grpc_metadata {
    struct grpc_slice _field1;
    struct grpc_slice _field2;
    unsigned int _field3;
    struct {
        void *_field1[4];
    } _field4;
};

struct grpc_op {
    int op;
    unsigned int flags;
    void *reserved;
    union grpc_op_data data;
};

struct grpc_op_recv_close_on_server {
    int *cancelled;
};

struct grpc_op_recv_initial_metadata {
    CDStruct_183601bc *recv_initial_metadata;
};

struct grpc_op_recv_message {
    struct grpc_byte_buffer **recv_message;
};

struct grpc_op_recv_status_on_client {
    CDStruct_183601bc *trailing_metadata;
    int *status;
    struct grpc_slice *status_details;
    char **error_string;
};

struct grpc_op_send_initial_metadata {
    unsigned long long count;
    struct grpc_metadata *metadata;
    struct grpc_op_send_initial_metadata_maybe_compression_level maybe_compression_level;
};

struct grpc_op_send_initial_metadata_maybe_compression_level {
    unsigned char is_set;
    int level;
};

struct grpc_op_send_message {
    struct grpc_byte_buffer *send_message;
};

struct grpc_op_send_status_from_server {
    unsigned long long trailing_metadata_count;
    struct grpc_metadata *trailing_metadata;
    int status;
    struct grpc_slice *status_details;
};

struct grpc_slice {
    struct grpc_slice_refcount *refcount;
    union grpc_slice_data data;
};

struct grpc_slice_buffer {
    struct grpc_slice *_field1;
    struct grpc_slice *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    struct grpc_slice _field6[8];
};

struct grpc_slice_inlined {
    unsigned char length;
    unsigned char bytes[23];
};

struct grpc_slice_refcount;

struct grpc_slice_refcounted {
    char *bytes;
    unsigned long long length;
};

struct ifaddrs {
    struct ifaddrs *_field1;
    char *_field2;
    unsigned int _field3;
    struct sockaddr *_field4;
    struct sockaddr *_field5;
    struct sockaddr *_field6;
    void *_field7;
};

struct in6_addr {
    union {
        unsigned char _field1[16];
        unsigned short _field2[8];
        unsigned int _field3[4];
    } _field1;
};

struct in_addr {
    unsigned int s_addr;
};

struct list<net::HostPortPair, std::__1::allocator<net::HostPortPair>> {
    struct __list_node_base<net::HostPortPair, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<net::HostPortPair, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __list_node_base<std::__1::basic_string<char>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::basic_string<char>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct map<CMTime, double, hamplayer::TimeMapper::CMTimeLess, std::__1::allocator<std::__1::pair<const CMTime, double>>> {
    struct __tree<std::__1::__value_type<CMTime, double>, std::__1::__map_value_compare<CMTime, std::__1::__value_type<CMTime, double>, hamplayer::TimeMapper::CMTimeLess, true>, std::__1::allocator<std::__1::__value_type<CMTime, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CMTime, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CMTime, std::__1::__value_type<CMTime, double>, hamplayer::TimeMapper::CMTimeLess, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>, std::__1::less<const void *>, std::__1::allocator<std::__1::pair<const void *const, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>>> {
    struct __tree<std::__1::__value_type<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>, std::__1::__map_value_compare<const void *, std::__1::__value_type<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>, std::__1::less<const void *>, true>, std::__1::allocator<std::__1::__value_type<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const void *, std::__1::__value_type<const void *, std::__1::unique_ptr<base::SupportsUserData::Data, std::__1::default_delete<base::SupportsUserData::Data>>>, std::__1::less<const void *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<double, CMTime, std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, CMTime>>> {
    struct __tree<std::__1::__value_type<double, CMTime>, std::__1::__map_value_compare<double, std::__1::__value_type<double, CMTime>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, CMTime>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<double, CMTime>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<double, std::__1::__value_type<double, CMTime>, std::__1::less<double>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *, std::__1::less<hamplayer::SegmentMapper::MediaTimeIndex>, std::__1::allocator<std::__1::pair<const hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>>> {
    struct __tree<std::__1::__value_type<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>, std::__1::__map_value_compare<hamplayer::SegmentMapper::MediaTimeIndex, std::__1::__value_type<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>, std::__1::less<hamplayer::SegmentMapper::MediaTimeIndex>, true>, std::__1::allocator<std::__1::__value_type<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<hamplayer::SegmentMapper::MediaTimeIndex, std::__1::__value_type<hamplayer::SegmentMapper::MediaTimeIndex, const hamplayer::SegmentRange *>, std::__1::less<hamplayer::SegmentMapper::MediaTimeIndex>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *, std::__1::less<hamplayer::SegmentMapper::ProductionTimeIndex>, std::__1::allocator<std::__1::pair<const hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>>> {
    struct __tree<std::__1::__value_type<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>, std::__1::__map_value_compare<hamplayer::SegmentMapper::ProductionTimeIndex, std::__1::__value_type<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>, std::__1::less<hamplayer::SegmentMapper::ProductionTimeIndex>, true>, std::__1::allocator<std::__1::__value_type<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<hamplayer::SegmentMapper::ProductionTimeIndex, std::__1::__value_type<hamplayer::SegmentMapper::ProductionTimeIndex, const hamplayer::SegmentRange *>, std::__1::less<hamplayer::SegmentMapper::ProductionTimeIndex>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<long long, hamplayer::SegmentRange, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, hamplayer::SegmentRange>>> {
    struct __tree<std::__1::__value_type<long long, hamplayer::SegmentRange>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, hamplayer::SegmentRange>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, hamplayer::SegmentRange>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, hamplayer::SegmentRange>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, hamplayer::SegmentRange>, std::__1::less<long long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<speech::EpStatus, long long, std::__1::less<speech::EpStatus>, std::__1::allocator<std::__1::pair<const speech::EpStatus, long long>>> {
    struct __tree<std::__1::__value_type<speech::EpStatus, long long>, std::__1::__map_value_compare<speech::EpStatus, std::__1::__value_type<speech::EpStatus, long long>, std::__1::less<speech::EpStatus>, true>, std::__1::allocator<std::__1::__value_type<speech::EpStatus, long long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<speech::EpStatus, long long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<speech::EpStatus, std::__1::__value_type<speech::EpStatus, long long>, std::__1::less<speech::EpStatus>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct multimap<media::mp4::FourCC, media::mp4::BoxReader, std::__1::less<media::mp4::FourCC>, std::__1::allocator<std::__1::pair<const media::mp4::FourCC, media::mp4::BoxReader>>> {
    struct __tree<std::__1::__value_type<media::mp4::FourCC, media::mp4::BoxReader>, std::__1::__map_value_compare<media::mp4::FourCC, std::__1::__value_type<media::mp4::FourCC, media::mp4::BoxReader>, std::__1::less<media::mp4::FourCC>, true>, std::__1::allocator<std::__1::__value_type<media::mp4::FourCC, media::mp4::BoxReader>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<media::mp4::FourCC, media::mp4::BoxReader>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<media::mp4::FourCC, std::__1::__value_type<media::mp4::FourCC, media::mp4::BoxReader>, std::__1::less<media::mp4::FourCC>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct node_hash_map<unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>, absl::hash_internal::Hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>>>> {
    char *ctrl_;
    struct pair<const unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>> **slots_;
    unsigned long long size_;
    unsigned long long capacity_;
    struct CompressedTuple<unsigned long, absl::hash_internal::Hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>>>> settings_;
};

struct optional<Item> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        struct Item _field2;
    } _field2;
};

struct optional<unsigned int> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        unsigned int _field2;
    } _field2;
};

struct optional<youtube::elements::util::DispatchFuture<LayoutFutureInput, ELMCellNode *>> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        struct DispatchFuture<LayoutFutureInput, ELMCellNode *> _field2;
    } _field2;
};

struct pair<ASDisplayNode *, unsigned long>;

struct pair<NSData *, id<ELMContext>> {
    id _field1;
    id _field2;
};

struct pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader>;

struct pair<const unsigned long long, std::__1::shared_ptr<const std::__1::basic_string<char>>>;

struct pair<youtube::elements::CollectionPath, CGRect>;

struct scoped_refptr<base::SequencedTaskRunner> {
    struct SequencedTaskRunner *_field1;
};

struct scoped_refptr<base::internal::BindStateBase> {
    struct BindStateBase *_field1;
};

struct scoped_refptr<base::internal::WeakReference::Flag> {
    struct Flag *_field1;
};

struct scoped_refptr<net::AuthChallengeInfo> {
    struct AuthChallengeInfo *_field1;
};

struct scoped_refptr<net::HttpProtocolHandlerCore> {
    struct HttpProtocolHandlerCore *ptr_;
};

struct scoped_refptr<net::HttpResponseHeaders> {
    struct HttpResponseHeaders *_field1;
};

struct scoped_refptr<net::IOBufferWithSize> {
    struct IOBufferWithSize *_field1;
};

struct scoped_refptr<net::SSLCertRequestInfo> {
    struct SSLCertRequestInfo *_field1;
};

struct scoped_refptr<net::URLRequestContextGetter> {
    struct URLRequestContextGetter *_field1;
};

struct scoped_refptr<net::X509Certificate> {
    struct X509Certificate *_field1;
};

struct shared_ptr<ASDN::Mutex> {
    struct Mutex *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ASDN::RecursiveMutex> {
    struct RecursiveMutex *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const google::protobuf::Arena> {
    struct Arena *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const youtube::elements::Element> {
    struct Element *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<courtside::SphericalV2Manager> {
    struct SphericalV2Manager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gvr::CardboardApi> {
    struct CardboardApi *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gvr::CardboardApiImpl> {
    struct CardboardApiImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<media::MediaLog> {
    struct MediaLog *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vr::PanoRenderer> {
    struct PanoRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vr::PanoVideoRenderer> {
    struct PanoVideoRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vr::WidgetRenderer> {
    struct WidgetRenderer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<youtube::elements::Element> {
    struct Element *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<youtube::elements::util::Bucket<ELMCellNode *>> {
    struct Bucket<ELMCellNode *> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>> {
    struct DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *> *_field1;
    struct __shared_weak_count *_field2;
};

struct sockaddr;

struct sockaddr_in {
    unsigned char sin_len;
    unsigned char sin_family;
    unsigned short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

struct sockaddr_in6 {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned int _field4;
    struct in6_addr _field5;
    unsigned int _field6;
};

struct sockaddr_un {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[104];
};

struct stat {
    int st_dev;
    unsigned short st_mode;
    unsigned short st_nlink;
    unsigned long long st_ino;
    unsigned int st_uid;
    unsigned int st_gid;
    int st_rdev;
    struct timespec st_atimespec;
    struct timespec st_mtimespec;
    struct timespec st_ctimespec;
    struct timespec st_birthtimespec;
    long long st_size;
    long long st_blocks;
    int st_blksize;
    unsigned int st_flags;
    unsigned int st_gen;
    int st_lspare;
    long long st_qspare[2];
};

struct stream_engine {
    void *_field1;
    void *_field2;
};

struct timespec {
    long long tv_sec;
    long long tv_nsec;
};

struct tuple<CGSize, ASTextLayout *>;

struct unique_ptr<GURL, std::__1::default_delete<GURL>> {
    struct __compressed_pair<GURL *, std::__1::default_delete<GURL>> {
        struct GURL *_field1;
    } _field1;
};

struct unique_ptr<base::DictionaryValue, std::__1::default_delete<base::DictionaryValue>> {
    struct __compressed_pair<base::DictionaryValue *, std::__1::default_delete<base::DictionaryValue>> {
        struct DictionaryValue *_field1;
    } _field1;
};

struct unique_ptr<base::Thread, std::__1::default_delete<base::Thread>> {
    struct __compressed_pair<base::Thread *, std::__1::default_delete<base::Thread>> {
        struct Thread *_field1;
    } _field1;
};

struct unique_ptr<cronet::CronetPrefsManager, std::__1::default_delete<cronet::CronetPrefsManager>> {
    struct __compressed_pair<cronet::CronetPrefsManager *, std::__1::default_delete<cronet::CronetPrefsManager>> {
        struct CronetPrefsManager *_field1;
    } _field1;
};

struct unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>;

struct unique_ptr<gvr::RenderStats, std::__1::default_delete<gvr::RenderStats>> {
    struct __compressed_pair<gvr::RenderStats *, std::__1::default_delete<gvr::RenderStats>> {
        struct RenderStats *__value_;
    } __ptr_;
};

struct unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>;

struct unique_ptr<iosguard::ChallengeEnvImpl, std::__1::default_delete<iosguard::ChallengeEnvImpl>> {
    struct __compressed_pair<iosguard::ChallengeEnvImpl *, std::__1::default_delete<iosguard::ChallengeEnvImpl>> {
        struct ChallengeEnvImpl *__value_;
    } __ptr_;
};

struct unique_ptr<iosguard::ChallengeImpl, std::__1::default_delete<iosguard::ChallengeImpl>> {
    struct __compressed_pair<iosguard::ChallengeImpl *, std::__1::default_delete<iosguard::ChallengeImpl>> {
        struct ChallengeImpl *__value_;
    } __ptr_;
};

struct unique_ptr<iosguard::ContainerImpl, std::__1::default_delete<iosguard::ContainerImpl>> {
    struct __compressed_pair<iosguard::ContainerImpl *, std::__1::default_delete<iosguard::ContainerImpl>> {
        struct ContainerImpl *__value_;
    } __ptr_;
};

struct unique_ptr<iosguard::JavaScriptEnvImpl, std::__1::default_delete<iosguard::JavaScriptEnvImpl>> {
    struct __compressed_pair<iosguard::JavaScriptEnvImpl *, std::__1::default_delete<iosguard::JavaScriptEnvImpl>> {
        struct JavaScriptEnvImpl *__value_;
    } __ptr_;
};

struct unique_ptr<iosguard::ManagerImpl, std::__1::default_delete<iosguard::ManagerImpl>> {
    struct __compressed_pair<iosguard::ManagerImpl *, std::__1::default_delete<iosguard::ManagerImpl>> {
        struct ManagerImpl *__value_;
    } __ptr_;
};

struct unique_ptr<net::CertVerifier, std::__1::default_delete<net::CertVerifier>> {
    struct __compressed_pair<net::CertVerifier *, std::__1::default_delete<net::CertVerifier>> {
        struct CertVerifier *_field1;
    } _field1;
};

struct unique_ptr<net::CookieStore, std::__1::default_delete<net::CookieStore>> {
    struct __compressed_pair<net::CookieStore *, std::__1::default_delete<net::CookieStore>> {
        struct CookieStore *_field1;
    } _field1;
};

struct unique_ptr<net::FileNetLogObserver, std::__1::default_delete<net::FileNetLogObserver>> {
    struct __compressed_pair<net::FileNetLogObserver *, std::__1::default_delete<net::FileNetLogObserver>> {
        struct FileNetLogObserver *_field1;
    } _field1;
};

struct unique_ptr<net::NetLog, std::__1::default_delete<net::NetLog>> {
    struct __compressed_pair<net::NetLog *, std::__1::default_delete<net::NetLog>> {
        struct NetLog *_field1;
    } _field1;
};

struct unique_ptr<net::URLRequestContext, std::__1::default_delete<net::URLRequestContext>> {
    struct __compressed_pair<net::URLRequestContext *, std::__1::default_delete<net::URLRequestContext>> {
        struct URLRequestContext *_field1;
    } _field1;
};

struct unique_ptr<net::URLRequestJob, std::__1::default_delete<net::URLRequestJob>> {
    struct __compressed_pair<net::URLRequestJob *, std::__1::default_delete<net::URLRequestJob>> {
        struct URLRequestJob *_field1;
    } _field1;
};

struct unique_ptr<net::UploadDataStream, std::__1::default_delete<net::UploadDataStream>> {
    struct __compressed_pair<net::UploadDataStream *, std::__1::default_delete<net::UploadDataStream>> {
        struct UploadDataStream *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<video::storage::hls::HLSKey, std::__1::default_delete<video::storage::hls::HLSKey>> {
    struct __compressed_pair<video::storage::hls::HLSKey *, std::__1::default_delete<video::storage::hls::HLSKey>> {
        struct HLSKey *__value_;
    } __ptr_;
};

struct unique_ptr<video::storage::hls::HLSPlaylistItem::InternalData, std::__1::default_delete<video::storage::hls::HLSPlaylistItem::InternalData>> {
    struct __compressed_pair<video::storage::hls::HLSPlaylistItem::InternalData *, std::__1::default_delete<video::storage::hls::HLSPlaylistItem::InternalData>> {
        struct InternalData *__value_;
    } __ptr_;
};

struct unique_ptr<vraudio::BinauralSurroundRenderer, std::__1::default_delete<vraudio::BinauralSurroundRenderer>> {
    struct __compressed_pair<vraudio::BinauralSurroundRenderer *, std::__1::default_delete<vraudio::BinauralSurroundRenderer>> {
        struct BinauralSurroundRenderer *__value_;
    } __ptr_;
};

struct unique_ptr<webm::WebmParser::DocumentParser, std::__1::default_delete<webm::WebmParser::DocumentParser>> {
    struct __compressed_pair<webm::WebmParser::DocumentParser *, std::__1::default_delete<webm::WebmParser::DocumentParser>> {
        struct DocumentParser *__value_;
    } __ptr_;
};

struct unique_ptr<youtube::elements::templates::DecoratorResolver, std::__1::default_delete<youtube::elements::templates::DecoratorResolver>> {
    struct __compressed_pair<youtube::elements::templates::DecoratorResolver *, std::__1::default_delete<youtube::elements::templates::DecoratorResolver>> {
        struct DecoratorResolver *__value_;
    } __ptr_;
};

struct unique_ptr<youtube::elements::templates::DefaultTemplateProvider, std::__1::default_delete<youtube::elements::templates::DefaultTemplateProvider>> {
    struct __compressed_pair<youtube::elements::templates::DefaultTemplateProvider *, std::__1::default_delete<youtube::elements::templates::DefaultTemplateProvider>> {
        struct DefaultTemplateProvider *__value_;
    } __ptr_;
};

struct unique_ptr<youtube::elements::templates::DevTemplateProvider, std::__1::default_delete<youtube::elements::templates::DevTemplateProvider>> {
    struct __compressed_pair<youtube::elements::templates::DevTemplateProvider *, std::__1::default_delete<youtube::elements::templates::DevTemplateProvider>> {
        struct DevTemplateProvider *__value_;
    } __ptr_;
};

struct unique_ptr<youtube::elements::templates::TemplateResolver, std::__1::default_delete<youtube::elements::templates::TemplateResolver>> {
    struct __compressed_pair<youtube::elements::templates::TemplateResolver *, std::__1::default_delete<youtube::elements::templates::TemplateResolver>> {
        struct TemplateResolver *__value_;
    } __ptr_;
};

struct unordered_map<Class, ELMPoolSegment, std::__1::hash<Class>, std::__1::equal_to<Class>, std::__1::allocator<std::__1::pair<const Class, ELMPoolSegment>>> {
    struct __hash_table<std::__1::__hash_value_type<Class, ELMPoolSegment>, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, ELMPoolSegment>, std::__1::hash<Class>, true>, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, ELMPoolSegment>, std::__1::equal_to<Class>, true>, std::__1::allocator<std::__1::__hash_value_type<Class, ELMPoolSegment>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<Class, ELMPoolSegment>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<Class, std::__1::__hash_value_type<Class, ELMPoolSegment>, std::__1::hash<Class>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<Class, std::__1::__hash_value_type<Class, ELMPoolSegment>, std::__1::equal_to<Class>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, ASDisplayNode *(^)(ELMElement *, id<ELMContext>)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, ELMElement *(^)(const youtube::elements::TemplateConfig &, const youtube::elements::Element &, id<ELMContext>)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, FBLPromise *(^)(NSData *, NSData *, id<ELMContext>, id<ELMController>, UIGestureRecognizer *)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, __unsafe_unretained Class<ELMDisplayNode>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, __unsafe_unretained Class<ELMDisplayNode>>>> {
    struct __hash_table<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, __unsafe_unretained Class<ELMDisplayNode>>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, id<ELMController>(^)(ELMElement *, id<ELMContext>), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id<ELMController>(^)(ELMElement *, id<ELMContext>)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id<ELMEntitiesProcessor>(^)(NSData *, id<ELMContext>)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, id<ELMImageProcessor>(^)(NSData *), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id<ELMImageProcessor>(^)(NSData *)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id<ELMImageProcessor>(^)(NSData *)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, void (^)(NSData *, id<ELMController>, id<ELMContext>), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, void (^)(NSData *, id<ELMController>, id<ELMContext>)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, std::__1::hash<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, void (^)(const youtube::elements::DecoratorConfig &, const youtube::elements::Element &, youtube::elements::Element *, id<ELMContext>)>, std::__1::equal_to<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<long, IGListMoveIndex *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, IGListMoveIndex *>>> {
    struct __hash_table<std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, IGListMoveIndex *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::hash<long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::equal_to<long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<long, long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, long>>> {
    struct __hash_table<std::__1::__hash_value_type<long, long>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, long>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, long>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, long>, std::__1::hash<long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, long>, std::__1::equal_to<long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>), std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, ELMComponent *(^)(ELMElement *, id<ELMContext>)>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, youtube::elements::DecoratorConfig, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, youtube::elements::DecoratorConfig>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::DecoratorConfig>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, youtube::elements::TemplateConfig, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, youtube::elements::TemplateConfig>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, youtube::elements::TemplateConfig>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath>> {
    struct __hash_table<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::__1::allocator<_IGListWorkingRangeHandlerIndexPath>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, _IGListWorkingRangeHandlerIndexPathHash> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerIndexPath>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper>> {
    struct __hash_table<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::__1::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>, std::__1::allocator<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, _IGListWorkingRangeHashID> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct variant<ObjCWeak<ELMNodeController>, std::__1::weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>> {
    union DestructibleUnionImpl<ObjCWeak<ELMNodeController>, std::__1::weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>> _field1;
    unsigned long long _field2;
};

struct variant<long, youtube::elements::CollectionPath::SupplementaryKind> {
    union Union<long, youtube::elements::CollectionPath::SupplementaryKind> _field1;
    unsigned long long _field2;
};

struct variant<std::__1::pair<NSData *, id<ELMContext>>, std::__1::shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>, ObjCStrong<ELMNodeController>> {
    union DestructibleUnionImpl<std::__1::pair<NSData *, id<ELMContext>>, std::__1::shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>, ObjCStrong<ELMNodeController>> _field1;
    unsigned long long _field2;
};

struct vector<(anonymous namespace)::StreamTask, std::__1::allocator<(anonymous namespace)::StreamTask>> {
    struct StreamTask *__begin_;
    struct StreamTask *__end_;
    struct __compressed_pair<(anonymous namespace)::StreamTask *, std::__1::allocator<(anonymous namespace)::StreamTask>> {
        struct StreamTask *__value_;
    } __end_cap_;
};

struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>;

struct vector<AudioStreamPacketDescription, std::__1::allocator<AudioStreamPacketDescription>> {
    struct AudioStreamPacketDescription *__begin_;
    struct AudioStreamPacketDescription *__end_;
    struct __compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription>> {
        struct AudioStreamPacketDescription *__value_;
    } __end_cap_;
};

struct vector<CMSampleTimingInfo, std::__1::allocator<CMSampleTimingInfo>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CMSampleTimingInfo *, std::__1::allocator<CMSampleTimingInfo>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<ELMNodeController *, std::__1::allocator<ELMNodeController *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<ELMNodeController *__strong *, std::__1::allocator<ELMNodeController *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<Frame, std::__1::allocator<Frame>> {
    struct Frame *__begin_;
    struct Frame *__end_;
    struct __compressed_pair<Frame *, std::__1::allocator<Frame>> {
        struct Frame *__value_;
    } __end_cap_;
};

struct vector<GURL, std::__1::allocator<GURL>> {
    struct GURL *_field1;
    struct GURL *_field2;
    struct __compressed_pair<GURL *, std::__1::allocator<GURL>> {
        struct GURL *_field1;
    } _field3;
};

struct vector<HAMDASHSegment, std::__1::allocator<HAMDASHSegment>> {
    struct HAMDASHSegment *__begin_;
    struct HAMDASHSegment *__end_;
    struct __compressed_pair<HAMDASHSegment *, std::__1::allocator<HAMDASHSegment>> {
        struct HAMDASHSegment *__value_;
    } __end_cap_;
};

struct vector<HAMMP4MdatBox, std::__1::allocator<HAMMP4MdatBox>> {
    struct HAMMP4MdatBox *__begin_;
    struct HAMMP4MdatBox *__end_;
    struct __compressed_pair<HAMMP4MdatBox *, std::__1::allocator<HAMMP4MdatBox>> {
        struct HAMMP4MdatBox *__value_;
    } __end_cap_;
};

struct vector<IGListSectionEntry, std::__1::allocator<IGListSectionEntry>> {
    struct IGListSectionEntry *__begin_;
    struct IGListSectionEntry *__end_;
    struct __compressed_pair<IGListSectionEntry *, std::__1::allocator<IGListSectionEntry>> {
        struct IGListSectionEntry *__value_;
    } __end_cap_;
};

struct vector<KeyFrameIndex, std::__1::allocator<KeyFrameIndex>> {
    struct KeyFrameIndex *__begin_;
    struct KeyFrameIndex *__end_;
    struct __compressed_pair<KeyFrameIndex *, std::__1::allocator<KeyFrameIndex>> {
        struct KeyFrameIndex *__value_;
    } __end_cap_;
};

struct vector<MLQOERequestStatsTransfer, std::__1::allocator<MLQOERequestStatsTransfer>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<MLQOERequestStatsTransfer *, std::__1::allocator<MLQOERequestStatsTransfer>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<YTImageSource, std::__1::allocator<YTImageSource>> {
    struct YTImageSource *_field1;
    struct YTImageSource *_field2;
    struct __compressed_pair<YTImageSource *, std::__1::allocator<YTImageSource>> {
        struct YTImageSource *_field1;
    } _field3;
};

struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
};

struct vector<const float *, std::__1::allocator<const float *>> {
    float **__begin_;
    float **__end_;
    struct __compressed_pair<const float **, std::__1::allocator<const float *>> {
        float **__value_;
    } __end_cap_;
};

struct vector<const void *, std::__1::allocator<const void *>> {
    void **__begin_;
    void **__end_;
    struct __compressed_pair<const void **, std::__1::allocator<const void *>> {
        void **__value_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<gvr::RenderTextureParams, std::__1::allocator<gvr::RenderTextureParams>> {
    struct RenderTextureParams *__begin_;
    struct RenderTextureParams *__end_;
    struct __compressed_pair<gvr::RenderTextureParams *, std::__1::allocator<gvr::RenderTextureParams>> {
        struct RenderTextureParams *__value_;
    } __end_cap_;
};

struct vector<hamplayer::FrameQueue::Frame, std::__1::allocator<hamplayer::FrameQueue::Frame>> {
    struct Frame *__begin_;
    struct Frame *__end_;
    struct __compressed_pair<hamplayer::FrameQueue::Frame *, std::__1::allocator<hamplayer::FrameQueue::Frame>> {
        struct Frame *__value_;
    } __end_cap_;
};

struct vector<long long, std::__1::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *__value_;
    } __end_cap_;
};

struct vector<long, std::__1::allocator<long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long *, std::__1::allocator<long>> {
        long long *__value_;
    } __end_cap_;
};

struct vector<media::mp4::SegmentIndexReference, std::__1::allocator<media::mp4::SegmentIndexReference>> {
    struct SegmentIndexReference *_field1;
    struct SegmentIndexReference *_field2;
    struct __compressed_pair<media::mp4::SegmentIndexReference *, std::__1::allocator<media::mp4::SegmentIndexReference>> {
        struct SegmentIndexReference *_field1;
    } _field3;
};

struct vector<net::HashValue, std::__1::allocator<net::HashValue>> {
    struct HashValue *_field1;
    struct HashValue *_field2;
    struct __compressed_pair<net::HashValue *, std::__1::allocator<net::HashValue>> {
        struct HashValue *_field1;
    } _field3;
};

struct vector<net::HttpRequestHeaders::HeaderKeyValuePair, std::__1::allocator<net::HttpRequestHeaders::HeaderKeyValuePair>> {
    struct HeaderKeyValuePair *_field1;
    struct HeaderKeyValuePair *_field2;
    struct __compressed_pair<net::HttpRequestHeaders::HeaderKeyValuePair *, std::__1::allocator<net::HttpRequestHeaders::HeaderKeyValuePair>> {
        struct HeaderKeyValuePair *_field1;
    } _field3;
};

struct vector<net::SignedCertificateTimestampAndStatus, std::__1::allocator<net::SignedCertificateTimestampAndStatus>> {
    struct SignedCertificateTimestampAndStatus *_field1;
    struct SignedCertificateTimestampAndStatus *_field2;
    struct __compressed_pair<net::SignedCertificateTimestampAndStatus *, std::__1::allocator<net::SignedCertificateTimestampAndStatus>> {
        struct SignedCertificateTimestampAndStatus *_field1;
    } _field3;
};

struct vector<short, std::__1::allocator<short>> {
    short *__begin_;
    short *__end_;
    struct __compressed_pair<short *, std::__1::allocator<short>> {
        short *__value_;
    } __end_cap_;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_90719d97 *__begin_;
    basic_string_90719d97 *__end_;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_90719d97 *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<ASDisplayNode *, unsigned long>, std::__1::allocator<std::__1::pair<ASDisplayNode *, unsigned long>>> {
    struct pair<ASDisplayNode *, unsigned long> *__begin_;
    struct pair<ASDisplayNode *, unsigned long> *__end_;
    struct __compressed_pair<std::__1::pair<ASDisplayNode *, unsigned long>*, std::__1::allocator<std::__1::pair<ASDisplayNode *, unsigned long>>> {
        struct pair<ASDisplayNode *, unsigned long> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader>, std::__1::allocator<std::__1::pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader>>> {
    struct pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader> *__begin_;
    struct pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader> *__end_;
    struct __compressed_pair<std::__1::pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader>*, std::__1::allocator<std::__1::pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader>>> {
        struct pair<NSObject<OS_dispatch_data>*, video_streaming::OnesieHeader> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<youtube::elements::CollectionPath, CGRect>, std::__1::allocator<std::__1::pair<youtube::elements::CollectionPath, CGRect>>> {
    struct pair<youtube::elements::CollectionPath, CGRect> *_field1;
    struct pair<youtube::elements::CollectionPath, CGRect> *_field2;
    struct __compressed_pair<std::__1::pair<youtube::elements::CollectionPath, CGRect>*, std::__1::allocator<std::__1::pair<youtube::elements::CollectionPath, CGRect>>> {
        struct pair<youtube::elements::CollectionPath, CGRect> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>, std::__1::allocator<std::__1::unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>>> {
    struct unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>> *_field1;
    struct unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>*, std::__1::allocator<std::__1::unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>>>> {
        struct unique_ptr<cronet::URLRequestContextConfig::Pkp, std::__1::default_delete<cronet::URLRequestContextConfig::Pkp>> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>, std::__1::allocator<std::__1::unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>>> {
    struct unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>> *__begin_;
    struct unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>> *__end_;
    struct __compressed_pair<std::__1::unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>*, std::__1::allocator<std::__1::unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>>>> {
        struct unique_ptr<hamplayer::MovieFragmentAndOffset, std::__1::default_delete<hamplayer::MovieFragmentAndOffset>> *__value_;
    } __end_cap_;
};

struct vector<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>, std::__1::allocator<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>>> {
    struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>> *__begin_;
    struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>> *__end_;
    struct __compressed_pair<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>*, std::__1::allocator<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>>> {
        struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>> *__value_;
    } __end_cap_;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

struct vector<youtube::elements::Section<absl::optional<absl::optional<Item>>>, std::__1::allocator<youtube::elements::Section<absl::optional<absl::optional<Item>>>>> {
    struct Section<absl::optional<absl::optional<Item>>> *__begin_;
    struct Section<absl::optional<absl::optional<Item>>> *__end_;
    struct __compressed_pair<youtube::elements::Section<absl::optional<absl::optional<Item>>>*, std::__1::allocator<youtube::elements::Section<absl::optional<absl::optional<Item>>>>> {
        struct Section<absl::optional<absl::optional<Item>>> *__value_;
    } __end_cap_;
};

struct vpx_codec_ctx {
    char *name;
    struct vpx_codec_iface *iface;
    int err;
    char *err_detail;
    long long init_flags;
    union {
        struct vpx_codec_dec_cfg *dec;
        struct vpx_codec_enc_cfg *enc;
        void *raw;
    } config;
    struct vpx_codec_priv *priv;
};

struct vpx_codec_dec_cfg;

struct vpx_codec_enc_cfg;

struct vpx_codec_iface;

struct vpx_codec_priv;

struct vpx_image {
    int _field1;
    int _field2;
    int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    char *_field13[4];
    int _field14[4];
    int _field15;
    void *_field16;
    char *_field17;
    int _field18;
    int _field19;
    void *_field20;
};

struct weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>> {
    struct DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *> *_field1;
    struct __shared_weak_count *_field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    unsigned short _field2;
} CDStruct_6a59ab51;

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
} CDStruct_2a4d9400;

typedef struct {
    _Bool resizeDecodedImageBuffer;
    _Bool onlyResizeWhenMemoryWarning;
    double outputResizeFactor;
} CDStruct_d4d03ff8;

typedef struct {
    _Bool trimEncoderPadding;
} CDStruct_87f02ae7;

typedef struct {
    unsigned char first;
    unsigned char second;
} CDStruct_7d92f6c3;

typedef struct {
    unsigned int _field1;
    void *_field2[32];
} CDStruct_ac21a0f6;

typedef struct {
    unsigned long long playerLoopTimerInterval;
    unsigned long long playerLoopTimerLeeway;
    double liveAVSyncTolerance;
    double liveReadaheadSeconds;
} CDStruct_343d2dac;

typedef struct {
    unsigned long long state;
    id *itemsPtr;
    unsigned long long *mutationsPtr;
    unsigned long long extra[5];
} CDStruct_58648341;

typedef struct {
    unsigned short _field1;
    unsigned short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
} CDStruct_9482d3c1;

typedef struct {
    unsigned int _field1[5];
} CDStruct_8c9fbaa1;

typedef struct {
    void *reserved[8];
} CDStruct_d7a492ad;

typedef struct {
    void *bytes;
    unsigned long long bufferSize;
    unsigned long long bufferPos;
} CDStruct_9d607ac6;

typedef struct {
    double maxIdleDuration;
    _Bool autoShutdownEnabled;
    _Bool startInPrepare;
    double maxIdleDurationFromPrepare;
    unsigned char outputLatencySource;
    _Bool alwaysUseIdleTimer;
} CDStruct_491657e7;

typedef struct {
    double _field1;
    double _field2;
    double _field3[4];
} CDStruct_b1bacac9;

typedef struct {
    double _start;
    double _end;
    double _frameDurations[60];
    int _frameCount;
} CDStruct_faacf725;

typedef struct {
    double hue;
    double saturation;
    double value;
    double alpha;
} CDStruct_9446e134;

typedef struct {
    double time;
    double productionTime;
    double absoluteTime;
} CDStruct_d60ef703;

typedef struct {
    double _field1;
    long long _field2;
    double _field3;
    long long _field4;
} CDStruct_264a827c;

typedef struct {
    int veID;
    _Bool rootPage;
    short classID;
} CDStruct_a9c8ee48;

typedef struct {
    int timescale;
    unsigned long long creationTimeTicks;
    unsigned long long modificationTimeTicks;
    _Bool everySampleIsRandomAccessPoint;
    unsigned int defaultSampleDuration;
    unsigned int defaultSampleSize;
    unsigned int defaultSampleFlags;
    long long compositionTimeOffset;
} CDStruct_0370d347;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct {
    long long version;
    void *info;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
} CDStruct_4210025a;

typedef struct {
    long long _field1;
    double _field2;
} CDStruct_7f320dbc;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

typedef struct CDStruct_183601bc;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    struct AudioStreamPacketDescription *_field4;
    int _field5;
} CDStruct_0a200c7b;

typedef struct {
    unsigned long long count;
    unsigned long long capacity;
    struct grpc_metadata *metadata;
} CDStruct_6f820e53;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    struct {
        int _field1;
        int _field2;
        int _field3;
        int _field4;
        int _field5;
        int _field6;
        int _field7;
        int _field8;
        int _field9;
        int _field10;
        int _field11;
        int _field12;
        int _field13;
        int _field14;
    } _field10;
} CDStruct_d1583d57;

typedef struct {
    int _field1;
    CDStruct_1b6d18a9 _field2;
} CDStruct_c3a2472b;

typedef struct {
    long long horizontalSizeClass;
    long long verticalSizeClass;
    double displayScale;
    long long displayGamut;
    long long userInterfaceIdiom;
    long long forceTouchCapability;
    long long layoutDirection;
    NSString *preferredContentSizeCategory;
    struct CGSize containerSize;
} CDStruct_5cfb9e3d;

typedef struct {
    CDStruct_87f02ae7 audioConverterConfiguration;
} CDStruct_5ecde453;

typedef struct {
    CDStruct_8c9fbaa1 _field1;
    struct {
        unsigned int _field1;
        unsigned int _field2;
    } _field2;
    unsigned int _field3;
} CDStruct_cec6887f;

typedef struct {
    CDStruct_7f320dbc _field1;
    CDStruct_7f320dbc _field2;
    CDStruct_7f320dbc _field3;
    CDStruct_7f320dbc _field4;
    CDStruct_7f320dbc _field5;
    CDStruct_7f320dbc _field6;
    CDStruct_7f320dbc _field7;
    CDStruct_7f320dbc _field8;
    CDStruct_7f320dbc _field9;
} CDStruct_5e071070;

typedef struct {
    CDStruct_7f320dbc _field1;
    CDStruct_7f320dbc _field2;
    CDStruct_7f320dbc _field3;
    CDStruct_7f320dbc _field4;
    CDStruct_7f320dbc _field5;
    CDStruct_7f320dbc _field6;
} CDStruct_99d2e400;

typedef struct {
    CDStruct_7f320dbc _field1;
    CDStruct_7f320dbc _field2;
} CDStruct_69654f45;

typedef struct {
    CDStruct_1b6d18a9 timescale;
    unsigned long long segmentOffset;
    CDStruct_1b6d18a9 duration;
} CDStruct_a483eef9;

typedef struct {
    CDStruct_1b6d18a9 time;
    double productionTime;
    double absoluteTime;
} CDStruct_576a8307;

typedef struct {
    CDStruct_1b6d18a9 _field1;
    CDStruct_1b6d18a9 _field2;
    CDStruct_1b6d18a9 _field3;
} CDStruct_d2aef016;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    struct CGPoint _field1;
    struct CGPoint _field2;
} CDStruct_e3b9714e;

typedef struct {
    struct CGSize min;
    struct CGSize max;
} CDStruct_42a63532;

typedef struct {
    long long _field1;
    CDStruct_e83c9415 _field2;
    double _field3;
    _Bool _field4;
} CDStruct_68eba0de;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
    struct CGRect _field3;
    struct CGRect _field4;
} CDStruct_60d9add8;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double leadingBufferScreenfuls;
    double trailingBufferScreenfuls;
} CDStruct_3a510305;

typedef struct {
    int _field1;
} CDStruct_fcaf9308;

typedef struct Mat<unsigned char> {
    int _field1;
    int _field2;
    char *_field3;
} Mat_c4fc5366;

typedef struct Pose<float> {
    struct Rotation<float> rotation_;
    struct Point<3, float> position_;
} Pose_86e32ef7;

typedef struct RepeatedField<float> {
    int _field1;
    int _field2;
    union Pointer _field3;
} RepeatedField_641d8ff7;

typedef struct RepeatedPtrField<youtube::elements::Element> {
    struct Arena *_field1;
    int _field2;
    int _field3;
    struct Rep *_field4;
} RepeatedPtrField_f273e631;

typedef struct SharedPtr<ion::net::ActiveRequest> {
    struct ActiveRequest *_field1;
    struct Shareable *_field2;
} SharedPtr_69ffe5b3;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw __r;
            } ;
        } __value_;
    } __r_;
} basic_string_90719d97;

typedef struct optional<Item> {
    _Bool _field1;
    union {
        struct dummy_type _field1;
        struct Item _field2;
    } _field2;
} optional_a05cb02c;

typedef struct scoped_refptr<net::HttpProtocolHandlerCore> {
    struct HttpProtocolHandlerCore *ptr_;
} scoped_refptr_81e0d7bb;

typedef struct shared_ptr<courtside::SphericalV2Manager> {
    struct SphericalV2Manager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_db9a4e15;

typedef struct shared_ptr<gvr::CardboardApi> {
    struct CardboardApi *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9414a4e1;

typedef struct shared_ptr<gvr::CardboardApiImpl> {
    struct CardboardApiImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e28ce8be;

typedef struct shared_ptr<vr::PanoRenderer> {
    struct PanoRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_67d4a80d;

typedef struct shared_ptr<vr::PanoVideoRenderer> {
    struct PanoVideoRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_4ce16c32;

typedef struct shared_ptr<vr::WidgetRenderer> {
    struct WidgetRenderer *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_fcd736f4;

typedef struct shared_ptr<youtube::elements::Element> {
    struct Element *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_49c3ca4a;

typedef struct unique_ptr<iosguard::ChallengeEnvImpl, std::__1::default_delete<iosguard::ChallengeEnvImpl>> {
    struct __compressed_pair<iosguard::ChallengeEnvImpl *, std::__1::default_delete<iosguard::ChallengeEnvImpl>> {
        struct ChallengeEnvImpl *__value_;
    } __ptr_;
} unique_ptr_a4a6598d;

typedef struct unique_ptr<net::CertVerifier, std::__1::default_delete<net::CertVerifier>> {
    struct __compressed_pair<net::CertVerifier *, std::__1::default_delete<net::CertVerifier>> {
        struct CertVerifier *_field1;
    } _field1;
} unique_ptr_33e8c17e;

typedef struct unordered_map<long, IGListMoveIndex *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, IGListMoveIndex *>>> {
    struct __hash_table<std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, IGListMoveIndex *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, IGListMoveIndex *>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::hash<long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, IGListMoveIndex *>, std::__1::equal_to<long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_6fea4092;

typedef struct vector<HAMDASHSegment, std::__1::allocator<HAMDASHSegment>> {
    struct HAMDASHSegment *__begin_;
    struct HAMDASHSegment *__end_;
    struct __compressed_pair<HAMDASHSegment *, std::__1::allocator<HAMDASHSegment>> {
        struct HAMDASHSegment *__value_;
    } __end_cap_;
} vector_ecd8a3dd;

typedef struct vector<MLQOERequestStatsTransfer, std::__1::allocator<MLQOERequestStatsTransfer>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<MLQOERequestStatsTransfer *, std::__1::allocator<MLQOERequestStatsTransfer>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
} vector_86a15f8f;

typedef struct vector<YTImageSource, std::__1::allocator<YTImageSource>> {
    struct YTImageSource *_field1;
    struct YTImageSource *_field2;
    struct __compressed_pair<YTImageSource *, std::__1::allocator<YTImageSource>> {
        struct YTImageSource *_field1;
    } _field3;
} vector_21207214;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
} vector_b5e32e34;

typedef struct vector<gvr::RenderTextureParams, std::__1::allocator<gvr::RenderTextureParams>> {
    struct RenderTextureParams *__begin_;
    struct RenderTextureParams *__end_;
    struct __compressed_pair<gvr::RenderTextureParams *, std::__1::allocator<gvr::RenderTextureParams>> {
        struct RenderTextureParams *__value_;
    } __end_cap_;
} vector_48b5fa17;

typedef struct vector<long long, std::__1::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *__value_;
    } __end_cap_;
} vector_bbba3654;

typedef struct vector<long, std::__1::allocator<long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long *, std::__1::allocator<long>> {
        long long *__value_;
    } __end_cap_;
} vector_afed86a5;

typedef struct vector<std::__1::pair<youtube::elements::CollectionPath, CGRect>, std::__1::allocator<std::__1::pair<youtube::elements::CollectionPath, CGRect>>> {
    struct pair<youtube::elements::CollectionPath, CGRect> *_field1;
    struct pair<youtube::elements::CollectionPath, CGRect> *_field2;
    struct __compressed_pair<std::__1::pair<youtube::elements::CollectionPath, CGRect>*, std::__1::allocator<std::__1::pair<youtube::elements::CollectionPath, CGRect>>> {
        struct pair<youtube::elements::CollectionPath, CGRect> *_field1;
    } _field3;
} vector_b8106f4e;

typedef struct vector<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>, std::__1::allocator<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>>> {
    struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>> *__begin_;
    struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>> *__end_;
    struct __compressed_pair<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>*, std::__1::allocator<std::__1::vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>>>> {
        struct vector<ASRangeTuningParameters, std::__1::allocator<ASRangeTuningParameters>> *__value_;
    } __end_cap_;
} vector_0253d28f;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
} vector_aab22ae2;

#pragma mark Named Unions

union DestructibleUnionImpl<>;

union DestructibleUnionImpl<ObjCStrong<ELMNodeController>> {
    struct ObjCStrong<ELMNodeController> _field1;
    union DestructibleUnionImpl<> _field2;
};

union DestructibleUnionImpl<ObjCWeak<ELMNodeController>, std::__1::weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>> {
    struct ObjCWeak<ELMNodeController> _field1;
    union DestructibleUnionImpl<std::__1::weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>> _field2;
};

union DestructibleUnionImpl<std::__1::pair<NSData *, id<ELMContext>>, std::__1::shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>, ObjCStrong<ELMNodeController>> {
    struct pair<NSData *, id<ELMContext>> _field1;
    union DestructibleUnionImpl<std::__1::shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>, ObjCStrong<ELMNodeController>> _field2;
};

union DestructibleUnionImpl<std::__1::shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>, ObjCStrong<ELMNodeController>> {
    struct shared_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>> _field1;
    union DestructibleUnionImpl<ObjCStrong<ELMNodeController>> _field2;
};

union DestructibleUnionImpl<std::__1::weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>>> {
    struct weak_ptr<youtube::elements::util::DispatchFuture<std::__1::pair<NSData *, id<ELMContext>>, ELMCellNode *>> _field1;
    union DestructibleUnionImpl<> _field2;
};

union Pointer {
    struct Arena *_field1;
    float *_field2;
};

union Union<>;

union Union<long, youtube::elements::CollectionPath::SupplementaryKind> {
    long long _field1;
    union Union<youtube::elements::CollectionPath::SupplementaryKind> _field2;
};

union Union<youtube::elements::CollectionPath::SupplementaryKind> {
    int _field1;
    union Union<> _field2;
};

union _GLKMatrix4 {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
};

union _GLKQuaternion {
    struct {
        union _GLKVector3 v;
        float s;
    } ;
    struct {
        float x;
        float y;
        float z;
        float w;
    } ;
    float q[4];
};

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

union _GLKVector3 {
    struct {
        float x;
        float y;
        float z;
    } ;
    struct {
        float r;
        float g;
        float b;
    } ;
    struct {
        float s;
        float t;
        float p;
    } ;
    float v[3];
};

union grpc_byte_buffer_data {
    CDStruct_d7a492ad _field1;
    struct grpc_compressed_buffer _field2;
};

union grpc_op_data {
    CDStruct_d7a492ad reserved;
    struct grpc_op_send_initial_metadata send_initial_metadata;
    struct grpc_op_send_message send_message;
    struct grpc_op_send_status_from_server send_status_from_server;
    struct grpc_op_recv_initial_metadata recv_initial_metadata;
    struct grpc_op_recv_message recv_message;
    struct grpc_op_recv_status_on_client recv_status_on_client;
    struct grpc_op_recv_close_on_server recv_close_on_server;
};

union grpc_slice_data {
    struct grpc_slice_refcounted refcounted;
    struct grpc_slice_inlined inlined;
};

#pragma mark Typedef'd Unions

typedef union {
    _Bool valueBool;
    unsigned int valueFixed32;
    int valueSFixed32;
    float valueFloat;
    unsigned long long valueFixed64;
    long long valueSFixed64;
    double valueDouble;
    int valueInt32;
    long long valueInt64;
    int valueSInt32;
    long long valueSInt64;
    unsigned int valueUInt32;
    unsigned long long valueUInt64;
    NSData *valueData;
    NSString *valueString;
    TAGPBGeneratedMessage *valueMessage;
    TAGPBGeneratedMessage *valueGroup;
    int valueEnum;
    TAGPBArray *valueArray;
    id valueObject;
} CDUnion_3de46016;

typedef union {
    _Bool valueBool;
    int valueInt32;
    long long valueInt64;
    unsigned int valueUInt32;
    unsigned long long valueUInt64;
    float valueFloat;
    double valueDouble;
    NSData *valueData;
    NSString *valueString;
    GPBMessage *valueMessage;
    int valueEnum;
} CDUnion_88782d86;

