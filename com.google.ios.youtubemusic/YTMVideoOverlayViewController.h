//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "MDXScreenManagerObserver-Protocol.h"
#import "MDXScreenSessionObserver-Protocol.h"
#import "MLNerdStatsOverlayViewControllerDelegate-Protocol.h"
#import "YTAnnotationsViewControllerDelegate-Protocol.h"
#import "YTCaptionTrackSwitchDelegate-Protocol.h"
#import "YTContentVideoPlayerOverlayProtocol-Protocol.h"
#import "YTContentVideoPlayerStoryboard-Protocol.h"
#import "YTDoubleTapToSeekControllerDelegate-Protocol.h"
#import "YTHintControllerObserver-Protocol.h"
#import "YTHotConfigObserver-Protocol.h"
#import "YTLikeServiceObserver-Protocol.h"
#import "YTMAVSwitchDelegate-Protocol.h"
#import "YTMAudioOnlySwitchDelegate-Protocol.h"
#import "YTMNowPlayingViewControllerScrubberDelegate-Protocol.h"
#import "YTMSettingsObserver-Protocol.h"
#import "YTMThemeControllerObserver-Protocol.h"
#import "YTMVideoOverlayViewDelegate-Protocol.h"
#import "YTOfflineCoordinatorObserver-Protocol.h"
#import "YTOverflowMenuViewControllerDelegate-Protocol.h"
#import "YTPlaybackRouteButtonVisibilityObserver-Protocol.h"
#import "YTResponder-Protocol.h"
#import "YTStoryboardControllerDelegate-Protocol.h"
#import "YTSystemNotificationsObserver-Protocol.h"
#import "YTVideoQualitySwitchUIObserver-Protocol.h"
#import "YTVolumeBarViewDelegate-Protocol.h"

@class GIMMe, MLNerdStatsOverlayViewController, MLNerdStatsPlaybackData, MPVolumeView, NSString, QTMButton, YTAnnotationsViewController, YTCaptionTrackSwitchController, YTCaptionViewController, YTDoubleTapToSeekController, YTHintController, YTIMenuRenderer, YTIPlayerOverlayRenderer, YTISkippableSegmentsConfig, YTMAutoOfflineController, YTMButtonVisibilityLogger, YTMLightsourceColorSampler, YTMMusicAppMetadata, YTMNowPlayingViewController, YTMSettings, YTMThemeController, YTMVideoOverlayView, YTOfflineCoordinator, YTOverflowMenuViewController, YTPlayerResponse, YTThumbnailController, YTVolumeBarView;
@protocol MDXServices, YTContentVideoPlayerOverlayDelegate, YTMPlaylistControlsResponderProvider, YTMVideoOverlayViewControllerDelegate, YTOfflineModeProvider, YTOfflineServices, YTPlayerOverlayDelegate, YTPlayerServices, YTResponder;

@interface YTMVideoOverlayViewController : UIViewController <MDXScreenManagerObserver, MLNerdStatsOverlayViewControllerDelegate, YTAnnotationsViewControllerDelegate, YTCaptionTrackSwitchDelegate, YTDoubleTapToSeekControllerDelegate, YTHintControllerObserver, YTHotConfigObserver, YTLikeServiceObserver, YTMAudioOnlySwitchDelegate, YTMAVSwitchDelegate, YTMNowPlayingViewControllerScrubberDelegate, YTMVideoOverlayViewDelegate, YTMSettingsObserver, YTMThemeControllerObserver, YTOfflineCoordinatorObserver, YTOverflowMenuViewControllerDelegate, YTPlaybackRouteButtonVisibilityObserver, YTStoryboardControllerDelegate, YTSystemNotificationsObserver, YTVideoQualitySwitchUIObserver, YTVolumeBarViewDelegate, MDXScreenSessionObserver, YTContentVideoPlayerOverlayProtocol, YTContentVideoPlayerStoryboard, YTResponder>
{
    YTMVideoOverlayView *_overlayView;
    YTMLightsourceColorSampler *_colorSampler;
    id <YTPlayerServices> _playerServices;
    id <YTOfflineServices> _offlineServices;
    id <MDXServices> _MDXServices;
    id <YTMPlaylistControlsResponderProvider> _playlistControlsProvider;
    YTCaptionViewController *_captionOverlayViewController;
    YTOverflowMenuViewController *_overflowMenuViewController;
    MLNerdStatsOverlayViewController *_nerdStatsOverlayViewController;
    YTCaptionTrackSwitchController *_captionTrackController;
    YTThumbnailController *_thumbnailController;
    YTMAutoOfflineController *_autoOfflineController;
    YTOfflineCoordinator *_offlineCoordinator;
    id <YTOfflineModeProvider> _offlineModeProvider;
    YTMNowPlayingViewController *_nowPlayingViewController;
    YTMSettings *_settings;
    int _playerViewLayout;
    YTIMenuRenderer *_videoReportingMenuRenderer;
    YTIPlayerOverlayRenderer *_model;
    YTPlayerResponse *_playerResponse;
    QTMButton *_MDXButton;
    YTMMusicAppMetadata *_musicAppMetadata;
    YTDoubleTapToSeekController *_doubleTapToSeekController;
    YTMThemeController *_themeController;
    _Bool _hasButtonsLogged;
    YTMButtonVisibilityLogger *_audioOnlySwitchVisibilityLogger;
    YTMButtonVisibilityLogger *_shuffleButtonVisibilityLogger;
    YTMButtonVisibilityLogger *_loopButtonVisibilityLogger;
    YTMButtonVisibilityLogger *_audioVideoSwitchVisibilityLogger;
    YTHintController *_hintController;
    MPVolumeView *_hiddenVolumeView;
    _Bool _bookendsEnabled;
    _Bool _didSkipIntro;
    YTISkippableSegmentsConfig *_skippableSegmentsConfig;
    long long _playerState;
    double _mediaTime;
    double _totalTime;
    double _downloadedTime;
    double _expansionCoefficient;
    _Bool _backgrounded;
    _Bool _downloadedTimeNeedsUpdate;
    _Bool _mediaTimeNeedsUpdate;
    _Bool _totalTimeNeedsUpdate;
    int _autoHideTaskID;
    _Bool _playerControlsVisible;
    _Bool _playlistControlsHidden;
    _Bool _hasPreviousVideo;
    _Bool _userScrubbing;
    _Bool _disallowQualitySwitch;
    _Bool _externalPlaybackActive;
    _Bool _currentVideoVertical;
    _Bool _storyboardEnabled;
    _Bool _AVSwitchAvailable;
    _Bool _searchButtonHidden;
    _Bool _initialPlayback;
    _Bool _hasCaptions;
    int _foregroundAudioOnlyPlaybackReason;
    id <YTContentVideoPlayerOverlayDelegate> _delegate;
    id <YTResponder> _parentResponder;
    MLNerdStatsPlaybackData *_nerdStatsPlaybackData;
    GIMMe *_gimme;
    YTAnnotationsViewController *_annotationsViewController;
    YTVolumeBarView *_volumeBarView;
    id <YTMVideoOverlayViewControllerDelegate> _overlayDelegate;
    unsigned long long _userContentMode;
}

@property(nonatomic) _Bool hasCaptions; // @synthesize hasCaptions=_hasCaptions;
@property(readonly, nonatomic) double mediaTime; // @synthesize mediaTime=_mediaTime;
@property(readonly, nonatomic) long long playerState; // @synthesize playerState=_playerState;
@property(nonatomic) unsigned long long userContentMode; // @synthesize userContentMode=_userContentMode;
@property(nonatomic) _Bool initialPlayback; // @synthesize initialPlayback=_initialPlayback;
@property(nonatomic) __weak id <YTMVideoOverlayViewControllerDelegate> overlayDelegate; // @synthesize overlayDelegate=_overlayDelegate;
@property(nonatomic, getter=isSearchButtonHidden) _Bool searchButtonHidden; // @synthesize searchButtonHidden=_searchButtonHidden;
@property(nonatomic, getter=isAVSwitchAvailable) _Bool AVSwitchAvailable; // @synthesize AVSwitchAvailable=_AVSwitchAvailable;
@property(readonly, nonatomic) YTVolumeBarView *volumeBarView; // @synthesize volumeBarView=_volumeBarView;
@property(retain, nonatomic) YTAnnotationsViewController *annotationsViewController; // @synthesize annotationsViewController=_annotationsViewController;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(retain, nonatomic) MLNerdStatsPlaybackData *nerdStatsPlaybackData; // @synthesize nerdStatsPlaybackData=_nerdStatsPlaybackData;
@property(nonatomic, getter=isCurrentVideoVertical) _Bool currentVideoVertical; // @synthesize currentVideoVertical=_currentVideoVertical;
@property(nonatomic) _Bool externalPlaybackActive; // @synthesize externalPlaybackActive=_externalPlaybackActive;
@property(readonly, nonatomic) __weak id <YTResponder> parentResponder; // @synthesize parentResponder=_parentResponder;
@property(nonatomic) _Bool disallowQualitySwitch; // @synthesize disallowQualitySwitch=_disallowQualitySwitch;
@property(nonatomic) int foregroundAudioOnlyPlaybackReason; // @synthesize foregroundAudioOnlyPlaybackReason=_foregroundAudioOnlyPlaybackReason;
@property(nonatomic, getter=isUserScrubbing) _Bool userScrubbing; // @synthesize userScrubbing=_userScrubbing;
@property(nonatomic) _Bool hasPreviousVideo; // @synthesize hasPreviousVideo=_hasPreviousVideo;
@property(nonatomic, getter=arePlaylistControlsHidden) _Bool playlistControlsHidden; // @synthesize playlistControlsHidden=_playlistControlsHidden;
@property(nonatomic) __weak id <YTPlayerOverlayDelegate> delegate;
- (void).cxx_destruct;
- (void)setNerdStatsOverlayVisible:(_Bool)arg1;
- (void)unloadNerdStatsOverlay;
- (void)loadNerdStatsOverlay;
- (_Bool)isAudioOnlyEnabled;
- (_Bool)isBookendsEnabled;
- (_Bool)shouldHideAudioOnlyButton;
- (void)setAnnotationsWithPlayerData:(id)arg1;
- (void)switchToVideoModeIfNecessary;
- (_Bool)arePlayerControlsLocked;
- (_Bool)isAudioOnlyAuthorized;
- (_Bool)isMDXActive;
- (_Bool)isAppInBackground;
- (void)maybeSkipOutro;
- (void)maybeSkipIntro;
- (_Bool)playerIsExpanded;
- (void)clearCaptions;
- (void)maybeAutoHideOverlay;
- (void)cancelOverlayAutoHide;
- (void)sendInteractionLoggingForButtons;
- (void)updateThumbnail;
- (_Bool)enlargeCaptionsInFullscreen;
- (void)maybeHideNativeVolumeDisplay;
- (void)setLikeStatus:(int)arg1;
- (void)updateLikeStatus;
- (_Bool)canScrubForPlayerState:(long long)arg1;
- (void)scrubbingEnded;
- (void)scrubbingStarted;
- (void)dispatchServiceEndpointForLikeStatus:(int)arg1;
- (void)maybeShowAudioOnlyUpsell;
- (void)updateVideoReportingMenuRenderer;
- (void)maybeShowUserEducation;
- (void)themeController:(id)arg1 playerPagePaletteDidChange:(id)arg2;
- (_Bool)volumeBarViewIsConnectedToMDX:(id)arg1;
- (_Bool)volumeBarViewCanDisplayVolumeBar:(id)arg1;
- (void)didChangeVideoLikeStatus:(int)arg1 withID:(id)arg2;
- (void)nerdStatsOverlayViewControllerDidTapCopyDebugInfo:(id)arg1;
- (void)nerdStatsOverlayViewControllerDidTapClose:(id)arg1;
- (void)overflowMenuWillDismiss;
- (void)didPressNerdStats:(id)arg1;
- (void)didPressAudioTrackSwitch:(id)arg1;
- (void)didPressCloseOverflowMenu:(id)arg1;
- (void)didPressReportIssue:(id)arg1;
- (void)didPressVideoQuality:(id)arg1;
- (void)didPressClosedCaptions:(id)arg1;
- (void)settings:(id)arg1 didSetAudioOnly:(_Bool)arg2;
- (void)nowPlayingViewControllerDidEndScrubbing:(id)arg1;
- (void)nowPlayingViewControllerDidStartScrubbing:(id)arg1;
- (void)nowPlayingViewController:(id)arg1 didScrubToTime:(double)arg2;
- (void)captionTrackSwitchDidSelectCaptionTrack:(id)arg1;
- (void)updateBackgroundColor;
- (void)overlayViewDidLoadThumbnail:(id)arg1;
- (void)overlayViewDidTapDislikeButton:(id)arg1;
- (void)overlayViewDidTapLikeButton:(id)arg1;
- (void)overlayViewDidTapFullscreenButton:(id)arg1;
- (void)overlayView:(id)arg1 didScrubToTime:(double)arg2;
- (void)overlayViewDidEndScrubbing:(id)arg1;
- (void)overlayViewDidStartScrubbing:(id)arg1;
- (void)overlayViewDidTapShuffleButton:(id)arg1;
- (void)overlayViewDidTapLoopButton:(id)arg1;
- (void)overlayViewDidTapShowOfflineButton:(id)arg1;
- (void)overlayViewDidTapPlayOfflineButton:(id)arg1;
- (void)overlayViewDidTapRetryButton:(id)arg1;
- (void)overlayViewDidTapReplayButton:(id)arg1;
- (void)overlayViewDidTapNextButton:(id)arg1;
- (void)overlayViewDidTapPrevButton:(id)arg1;
- (void)overlayViewDidTapOverflowButton:(id)arg1;
- (void)overlayViewDidTapPlaybackButton:(id)arg1;
- (void)overlayViewDidTapCollapseButton:(id)arg1;
- (void)overlayViewDidTapBackground:(id)arg1;
- (void)overlayViewDidTapAVSwitchButton:(id)arg1;
- (void)audioOnlySwitch:(id)arg1 didEnableAudioOnly:(_Bool)arg2;
- (void)audioOnlySwitchDidTapWhenDisabled:(id)arg1;
- (void)AVSwitchDidTap:(id)arg1;
- (void)setStoryboardFrame:(id)arg1;
- (id)storyboardControllerDelegate;
@property(nonatomic, getter=isStoryboardEnabled) _Bool storyboardEnabled; // @synthesize storyboardEnabled=_storyboardEnabled;
- (int)playerViewLayout;
- (void)setPlayerViewLayout:(int)arg1;
- (void)setPlaybackInSyncWithLivePlayhead:(_Bool)arg1;
- (void)setAirPlayAllowed:(_Bool)arg1;
- (void)setMinimumSeekableTime:(double)arg1 maximumSeekableTime:(double)arg2;
- (void)setMediaTime:(double)arg1;
- (void)setDownloadedTime:(double)arg1;
- (void)setTotalTime:(double)arg1;
- (void)playbackRouteButtonVisibilityDidChange;
- (void)setExpansionCoefficient:(double)arg1;
- (void)screenSession:(id)arg1 volumeLevelDidChange:(long long)arg2;
- (void)MDXScreenManager:(id)arg1 sessionDidChange:(id)arg2;
- (void)didMoveToParentViewController:(id)arg1;
- (void)setWatchNextResponse:(id)arg1;
- (void)setPlayerResponse:(id)arg1 CPN:(id)arg2;
- (void)setMarkers:(id)arg1;
- (void)setRemoteScreenName:(id)arg1;
- (void)displayError:(id)arg1;
- (void)playerDidFailWithError:(id)arg1;
- (void)playerStateDidChangeToState:(long long)arg1;
- (void)resetAndShowLoading:(_Bool)arg1;
- (void)offlineModeDidChange;
- (void)appDidBecomeActive:(id)arg1;
- (void)appWillEnterForeground:(id)arg1;
- (void)appDidEnterBackground:(id)arg1;
- (void)videoQualitySwitchController:(id)arg1 didFailWithErrorMessage:(id)arg2;
- (void)videoQualitySwitchControllerStatusDidChange:(id)arg1;
- (void)didEndDoubleTapToSeek;
- (void)willStartDoubleTapToSeek;
- (void)didSeekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (_Bool)canDoubleTapForCurrentPlayerState;
- (void)hotConfigDidChange:(id)arg1;
- (void)callToActionAnnotationStateDidUpdate:(int)arg1;
- (void)setFeaturedChannelWatermarkImageView:(id)arg1;
- (void)didDismissHintWithID:(id)arg1;
@property(readonly, nonatomic) YTIMenuRenderer *menuRenderer;
- (void)setCaptionError:(id)arg1;
- (void)setCaptionViewController:(id)arg1;
- (void)setAvailableCaptionTracks:(id)arg1;
- (void)setActiveCaptionTrack:(id)arg1;
- (void)setControlsVisible:(_Bool)arg1 animated:(_Bool)arg2 autoHide:(_Bool)arg3;
- (void)updateQueueControls;
@property(readonly, nonatomic) YTMVideoOverlayView *overlayView;
- (_Bool)isContentPanAllowed;
@property(nonatomic) _Bool hasNextVideo;
- (void)setVideoTitle:(id)arg1 videoArtist:(id)arg2 playerOverlayRenderer:(id)arg3;
- (_Bool)shouldPrevButtonReplayVideo;
- (void)updateOverflowMenu;
- (void)attachAllButtons;
- (void)viewWillLayoutSubviews;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)loadView;
- (void)dealloc;
- (id)initWithNowPlayingViewController:(id)arg1 parentResponder:(id)arg2;

// Remaining properties
@property(nonatomic) _Bool MDXPlaybackActive;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

