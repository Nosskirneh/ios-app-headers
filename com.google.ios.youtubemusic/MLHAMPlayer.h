//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "HAMPlayerInternalDelegate-Protocol.h"
#import "MLAdaptiveLiveControllerDelegate-Protocol.h"
#import "MLAudioVideoABRPolicyDelegate-Protocol.h"
#import "MLBitrateCapDelegate-Protocol.h"
#import "MLCaptionControllerDelegate-Protocol.h"
#import "MLManifestlessPartialResponseHandlerDelegate-Protocol.h"
#import "MLOnesieVideoDataQOEErrorDelegate-Protocol.h"
#import "MLPlayerInternal-Protocol.h"
#import "MLViewportSizeObserver-Protocol.h"
#import "YTAudioSessionInterruptionObserver-Protocol.h"
#import "YTAudioSessionOutputDeviceUnavailableObserver-Protocol.h"
#import "YTAudioSessionRouteChangeObserver-Protocol.h"
#import "YTSystemNotificationsObserver-Protocol.h"

@class GIMMe, HAMEventCenter, HAMFormatSelection, HAMPixelBufferVideoTrackRenderer, HAMPlayerContext, HAMPlayerInternal, HAMVideoDecoderPixelBufferSource, MLAdaptiveLiveController, MLAudioSession, MLAudioVideoABRPolicy, MLBitrateCap, MLFormat, MLFormat3Captions, MLHAMDataLoaderProvider, MLOnesieVideoData, MLPlaybackDataLoader, MLPlayerEventCenter, MLPlayerFormatChangeEvent, MLSegmentTimeline, MLTextABRPolicy, MLTextTrackRenderer, MLVideo, MLVideoDecoderFactory, MLViewportSize, NSArray, NSError, NSString, NSURL, UIView, YTIDynamicReadaheadConfig, YTIHamplayerConfig, YTIHamplayerHotConfig, YTSystemNotifications, YTUserDefaults;
@protocol HAMAudioTrackRenderer, HAMClock, HAMFrameSourceDelegate, HAMNetworkStatsProvider, MLAudioFormatConstraint, MLCaptionController, MLCaptionDisplayController, MLCaptionTrack, MLCuepointCollector, MLHAMPlayerViewProtocol, MLNetworkRequestObserver, MLPlayerCaptionDelegate, MLPlayerConfig, MLPlayerDelegate, MLTextFormatConstraint, MLVideoFormatConstraint, MLVideoSplicer, MLViewportSizeProvider, OS_dispatch_queue;

@interface MLHAMPlayer : NSObject <HAMPlayerInternalDelegate, MLAdaptiveLiveControllerDelegate, MLAudioVideoABRPolicyDelegate, MLBitrateCapDelegate, MLCaptionControllerDelegate, MLManifestlessPartialResponseHandlerDelegate, MLOnesieVideoDataQOEErrorDelegate, MLViewportSizeObserver, YTAudioSessionInterruptionObserver, YTAudioSessionOutputDeviceUnavailableObserver, YTAudioSessionRouteChangeObserver, YTSystemNotificationsObserver, MLPlayerInternal>
{
    MLHAMDataLoaderProvider *_dataLoaderProvider;
    MLPlaybackDataLoader *_dataLoader;
    MLAudioSession *_audioSession;
    id <HAMFrameSourceDelegate> _frameSourceDelegate;
    NSObject<OS_dispatch_queue> *_playerQueue;
    HAMEventCenter *_hamEventCenter;
    YTIHamplayerConfig *_hamplayerConfig;
    YTIHamplayerHotConfig *_hamplayerHotConfig;
    MLOnesieVideoData *_onesieVideoData;
    YTIDynamicReadaheadConfig *_dynamicReadaheadConfig;
    YTSystemNotifications *_systemNotifications;
    id <HAMClock> _clock;
    _Bool _isLive;
    MLBitrateCap *_bitrateCap;
    YTUserDefaults *_userDefaults;
    HAMPlayerInternal *_player;
    MLVideoDecoderFactory *_videoDecoderFactory;
    HAMPixelBufferVideoTrackRenderer *_videoTrackRenderer;
    id <HAMAudioTrackRenderer> _audioTrackRenderer;
    MLTextTrackRenderer *_textTrackRenderer;
    MLAudioVideoABRPolicy *_videoABRPolicy;
    MLAudioVideoABRPolicy *_audioABRPolicy;
    MLTextABRPolicy *_textABRPolicy;
    int _foregroundAudioOnlyPlaybackReason;
    NSURL *_probeURLOnVideoPlay;
    long long _pendingSeeks;
    _Bool _isInBackground;
    NSError *_playerError;
    long long _playerStatus;
    NSArray *_startedTrackRenderers;
    int _startedTrackRendererMediaContentType;
    double _lastReportedCurrentTime;
    double _lastReportedBufferedTime;
    _Bool _userRequestedPlay;
    _Bool _isAutoSeeking;
    _Bool _allStreamsAreLocal;
    MLAdaptiveLiveController *_liveController;
    HAMFormatSelection *_lastVideoFormatSelection;
    HAMFormatSelection *_lastAudioFormatSelection;
    MLPlayerFormatChangeEvent *_lastFormatChangeEvent;
    id <MLCaptionController> _captionController;
    MLFormat3Captions *_loadedFormat3Captions;
    id <MLTextFormatConstraint> _textFormatConstraint;
    id <HAMNetworkStatsProvider> _networkStatsProvider;
    id <MLNetworkRequestObserver> _networkRequestObserver;
    double _readaheadCap;
    HAMVideoDecoderPixelBufferSource *_pixelBufferSource;
    _Bool _backgroundPlaybackAllowed;
    _Bool _currentVideoIsLocal;
    _Bool _muted;
    _Bool _externalPlaybackFullscreen;
    _Bool _externalPlaybackAllowed;
    _Bool _peggedToLive;
    float _rate;
    float _volume;
    id <MLAudioFormatConstraint> _audioFormatConstraint;
    double _bufferedMediaTime;
    id <MLCaptionDisplayController> _captionDisplayController;
    id <MLPlayerConfig> _config;
    id <MLPlayerDelegate> _delegate;
    NSError *_error;
    MLPlayerEventCenter *_eventCenter;
    double _maximumSeekableTime;
    double _minimumSeekableTime;
    MLSegmentTimeline *_segmentTimeline;
    NSArray *_selectableAudioFormats;
    NSArray *_selectableVideoFormats;
    MLFormat *_selectedAudioFormat;
    MLFormat *_selectedVideoFormat;
    long long _state;
    MLVideo *_video;
    id <MLVideoFormatConstraint> _videoFormatConstraint;
    id <MLViewportSizeProvider> _viewportSizeProvider;
    id <MLPlayerCaptionDelegate> _captionDelegate;
    GIMMe *_gimme;
    HAMPlayerContext *_context;
    UIView<MLHAMPlayerViewProtocol> *_playerView;
    CDStruct_d60ef703 _currentTime;
}

@property(nonatomic) _Bool peggedToLive; // @synthesize peggedToLive=_peggedToLive;
@property(readonly, nonatomic) UIView<MLHAMPlayerViewProtocol> *playerView; // @synthesize playerView=_playerView;
@property(readonly, nonatomic) HAMPlayerContext *context; // @synthesize context=_context;
@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(nonatomic) _Bool externalPlaybackAllowed; // @synthesize externalPlaybackAllowed=_externalPlaybackAllowed;
@property(nonatomic) _Bool externalPlaybackFullscreen; // @synthesize externalPlaybackFullscreen=_externalPlaybackFullscreen;
@property(nonatomic) __weak id <MLPlayerCaptionDelegate> captionDelegate; // @synthesize captionDelegate=_captionDelegate;
@property(nonatomic) float volume; // @synthesize volume=_volume;
@property(retain, nonatomic) id <MLViewportSizeProvider> viewportSizeProvider; // @synthesize viewportSizeProvider=_viewportSizeProvider;
@property(retain, nonatomic) id <MLVideoFormatConstraint> videoFormatConstraint; // @synthesize videoFormatConstraint=_videoFormatConstraint;
@property(readonly, nonatomic) MLVideo *video; // @synthesize video=_video;
@property(readonly, nonatomic) long long state; // @synthesize state=_state;
@property(readonly, nonatomic) MLFormat *selectedVideoFormat; // @synthesize selectedVideoFormat=_selectedVideoFormat;
@property(readonly, nonatomic) MLFormat *selectedAudioFormat; // @synthesize selectedAudioFormat=_selectedAudioFormat;
@property(readonly, nonatomic) NSArray *selectableVideoFormats; // @synthesize selectableVideoFormats=_selectableVideoFormats;
@property(readonly, nonatomic) NSArray *selectableAudioFormats; // @synthesize selectableAudioFormats=_selectableAudioFormats;
@property(readonly, nonatomic) MLSegmentTimeline *segmentTimeline; // @synthesize segmentTimeline=_segmentTimeline;
@property(nonatomic) float rate; // @synthesize rate=_rate;
@property(nonatomic, getter=isMuted) _Bool muted; // @synthesize muted=_muted;
@property(readonly, nonatomic) double minimumSeekableTime; // @synthesize minimumSeekableTime=_minimumSeekableTime;
@property(readonly, nonatomic) double maximumSeekableTime; // @synthesize maximumSeekableTime=_maximumSeekableTime;
@property(readonly, nonatomic) MLPlayerEventCenter *eventCenter; // @synthesize eventCenter=_eventCenter;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) __weak id <MLPlayerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) _Bool currentVideoIsLocal; // @synthesize currentVideoIsLocal=_currentVideoIsLocal;
@property(readonly, nonatomic) CDStruct_d60ef703 currentTime; // @synthesize currentTime=_currentTime;
@property(readonly, nonatomic) id <MLPlayerConfig> config; // @synthesize config=_config;
@property(readonly, nonatomic) id <MLCaptionDisplayController> captionDisplayController; // @synthesize captionDisplayController=_captionDisplayController;
@property(readonly, nonatomic) double bufferedMediaTime; // @synthesize bufferedMediaTime=_bufferedMediaTime;
@property(nonatomic) _Bool backgroundPlaybackAllowed; // @synthesize backgroundPlaybackAllowed=_backgroundPlaybackAllowed;
@property(retain, nonatomic) id <MLAudioFormatConstraint> audioFormatConstraint; // @synthesize audioFormatConstraint=_audioFormatConstraint;
- (void).cxx_destruct;
- (id)frameSourceDelegate;
- (id)dataLoader;
- (void)updateCaptionControllerAudioTrack;
- (void)maybeSwitchToAVPlayer;
- (void)setUpCaptionDisplayController;
- (void)setUpCaptionController;
- (void)sendFormatChangeEventWithReason:(long long)arg1;
- (void)emitQOEErrorWithNSError:(id)arg1 fatal:(_Bool)arg2;
- (void)updateABRPoliciesWithReadaheadCap;
- (void)updateABRPoliciesWithBitrateCap:(long long)arg1;
- (void)updateNetworkUsageNotifier;
- (void)updateActiveTrackRenderers;
- (void)internalSeekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3;
- (void)updateForegroundAudioOnlyPlaybackReason;
- (void)updatePeggedToLive;
- (void)updateSelectableFormatsWithMPD:(id)arg1;
- (void)registerWithEventCenter;
- (void)updateVolume;
- (void)setState:(long long)arg1;
- (void)updateTextFormatConstraint;
- (void)onFormatSelectionEvent:(id)arg1;
- (void)failWithError:(id)arg1;
- (void)setupTextWithMPDProvider:(id)arg1 manifestlessTimeline:(id)arg2;
- (void)setupAudioWithMPDProvider:(id)arg1 manifestlessTimeline:(id)arg2;
- (void)setupVideoWithMPDProvider:(id)arg1 manifestlessTimeline:(id)arg2;
- (void)selectableFormatsDidChange:(id)arg1;
- (void)syncToLive;
- (void)rejoinStreamForMediaChunk:(id)arg1;
- (void)bitrateCapDidChange:(long long)arg1;
- (void)appDidBecomeActive:(id)arg1;
- (void)appDidEnterBackground:(id)arg1;
- (void)disablePlayerCaptions;
- (void)setPlayerCaptionsTextStyleRule:(id)arg1;
- (void)enablePlayerCaptionsWithOption:(id)arg1;
- (void)viewportSizeDidChange:(id)arg1;
- (void)recordNonFatalQOEError:(id)arg1;
- (void)didLoadFormat3Captions:(id)arg1;
- (void)captionControllerDidFailWithError:(id)arg1;
- (void)availableCaptionTracksDidChange:(id)arg1;
- (void)activeCaptionTrackDidChange:(id)arg1;
- (void)outputRouteDidChange;
- (void)outputDeviceDidBecomeUnavailable;
- (void)didReceiveAudioSessionInterruptionWithType:(unsigned long long)arg1 options:(unsigned long long)arg2;
- (void)playerDidTerminate;
- (void)playerWillFailWithError:(id)arg1;
- (void)setStartedTrackRenderers:(id)arg1;
- (void)setSeekableTimeRange:(CDStruct_e83c9415)arg1;
- (void)setStatus:(long long)arg1;
- (void)setCurrentTime:(CDStruct_576a8307)arg1;
- (void)setBufferedTime:(CDStruct_1b6d18a9)arg1;
@property(readonly, nonatomic) MLViewportSize *viewportSize;
- (void)flushEvents;
@property(readonly, nonatomic) long long bitrate;
- (void)registerQOEController:(id)arg1;
@property(readonly, nonatomic) id <MLVideoSplicer> videoSplicer;
- (void)setPeakBitrateFraction:(float)arg1;
- (void)setPreferredMaxReadahead:(double)arg1;
@property(readonly, nonatomic) id <MLCuepointCollector> cuepointCollector;
@property(readonly, nonatomic) int playerType;
@property(readonly, nonatomic) NSArray *availableCaptionTracks;
@property(readonly, nonatomic) id <MLCaptionTrack> activeCaptionTrack;
- (id)debugParameters;
- (id)debugLogs;
- (_Bool)isExternalPlaybackActive;
@property(readonly, nonatomic) double totalMediaTime;
- (void)setTextFormatConstraint:(id)arg1;
- (void)setLiveCaptionsVerticalRatio:(double)arg1;
- (void)enableCaptionsIfAvailable;
- (void)setActiveCaptionTrack:(id)arg1;
- (void)seekToEnd;
- (void)seekToProductionTime:(double)arg1;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekToTime:(double)arg1;
- (void)replay;
- (void)pause;
- (void)playASAP;
- (void)play;
- (void)terminate;
- (void)load;
- (void)makeActivePlayer;
- (id)initWithVideo:(id)arg1 playerConfig:(id)arg2 playerView:(id)arg3 frameSourceDelegate:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

