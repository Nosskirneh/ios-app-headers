//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCoding-Protocol.h"

@class ANGPlayQueueState, ANGReportPlayQueueLoader, ANGSong, ANGUpdatePlayQueueLoader, NSArray, NSDate, NSDictionary, NSMutableDictionary, NSNumber, NSSet, NSString;

@interface ANGPlayQueue : NSObject <NSCoding>
{
    _Bool _isPlayingRemotely;
    _Bool _disableSkipLimit;
    _Bool _disableAds;
    _Bool _videoModeOn;
    _Bool _disableQueueRestrictions;
    _Bool _disablePlayerRestrictions;
    _Bool _discardAds;
    _Bool _disableIncremntalPlayQueueUpdate;
    _Bool _isLoadingSongs;
    _Bool _scheduledIncrementalUpdate;
    NSString *_playQueueID;
    NSString *_udid;
    NSString *_playQueueOwnerID;
    long long _playMode;
    ANGPlayQueueState *_serverPlayQueueState;
    unsigned long long _currentIndex;
    NSString *_overrideDisplayName;
    NSString *_displayType;
    NSString *_displayTitle;
    NSString *_displaySubtitle;
    double _serverTimestamp;
    double _progress;
    NSString *_tagId;
    NSString *_genericId;
    NSString *_artistId;
    NSString *_group;
    unsigned long long _repeatMode;
    NSMutableDictionary *_alreadyPlayedInfo;
    NSDictionary *_dialogInfo;
    NSDictionary *_messageInfo;
    NSNumber *_minutesPlayed;
    NSNumber *_numberOfSongsPlayed;
    NSSet *_songsPlayed;
    NSDictionary *_adTagParams;
    ANGUpdatePlayQueueLoader *_incrementalUpdateLoader;
    ANGReportPlayQueueLoader *_reportPlayQueueLoader;
    NSDate *_firstReportSetTime;
    NSArray *_orderedSongs;
    NSArray *_shuffledSongs;
    NSString *_analyticsPlayQueuePlatform;
    NSString *_chosenSongID;
    NSArray *_originalSongIDs;
}

+ (_Bool)playQueueSyncFeatureEnabled;
+ (void)resetSkipsAfterTimeLimit;
+ (id)stringFromPlayMode:(long long)arg1;
+ (long long)playModeFromString:(id)arg1;
+ (id)songsArrayWithCSVOrder:(id)arg1 songs:(id)arg2;
+ (id)playQueueFromDict:(id)arg1;
@property(retain, nonatomic) NSArray *originalSongIDs; // @synthesize originalSongIDs=_originalSongIDs;
@property(retain, nonatomic) NSString *chosenSongID; // @synthesize chosenSongID=_chosenSongID;
@property(retain, nonatomic) NSString *analyticsPlayQueuePlatform; // @synthesize analyticsPlayQueuePlatform=_analyticsPlayQueuePlatform;
@property(retain, nonatomic) NSArray *shuffledSongs; // @synthesize shuffledSongs=_shuffledSongs;
@property(retain, nonatomic) NSArray *orderedSongs; // @synthesize orderedSongs=_orderedSongs;
@property(nonatomic) _Bool scheduledIncrementalUpdate; // @synthesize scheduledIncrementalUpdate=_scheduledIncrementalUpdate;
@property(retain, nonatomic) NSDate *firstReportSetTime; // @synthesize firstReportSetTime=_firstReportSetTime;
@property _Bool isLoadingSongs; // @synthesize isLoadingSongs=_isLoadingSongs;
@property _Bool disableIncremntalPlayQueueUpdate; // @synthesize disableIncremntalPlayQueueUpdate=_disableIncremntalPlayQueueUpdate;
@property(retain, nonatomic) ANGReportPlayQueueLoader *reportPlayQueueLoader; // @synthesize reportPlayQueueLoader=_reportPlayQueueLoader;
@property(retain, nonatomic) ANGUpdatePlayQueueLoader *incrementalUpdateLoader; // @synthesize incrementalUpdateLoader=_incrementalUpdateLoader;
@property(retain, nonatomic) NSDictionary *adTagParams; // @synthesize adTagParams=_adTagParams;
@property(nonatomic) _Bool discardAds; // @synthesize discardAds=_discardAds;
@property(retain, nonatomic) NSSet *songsPlayed; // @synthesize songsPlayed=_songsPlayed;
@property(retain, nonatomic) NSNumber *numberOfSongsPlayed; // @synthesize numberOfSongsPlayed=_numberOfSongsPlayed;
@property(retain, nonatomic) NSNumber *minutesPlayed; // @synthesize minutesPlayed=_minutesPlayed;
@property _Bool disablePlayerRestrictions; // @synthesize disablePlayerRestrictions=_disablePlayerRestrictions;
@property _Bool disableQueueRestrictions; // @synthesize disableQueueRestrictions=_disableQueueRestrictions;
@property(nonatomic) _Bool videoModeOn; // @synthesize videoModeOn=_videoModeOn;
@property(nonatomic) _Bool disableAds; // @synthesize disableAds=_disableAds;
@property(nonatomic) _Bool disableSkipLimit; // @synthesize disableSkipLimit=_disableSkipLimit;
@property(retain, nonatomic) NSDictionary *messageInfo; // @synthesize messageInfo=_messageInfo;
@property(retain, nonatomic) NSDictionary *dialogInfo; // @synthesize dialogInfo=_dialogInfo;
@property(retain, nonatomic) NSMutableDictionary *alreadyPlayedInfo; // @synthesize alreadyPlayedInfo=_alreadyPlayedInfo;
@property(nonatomic) unsigned long long repeatMode; // @synthesize repeatMode=_repeatMode;
@property(retain, nonatomic) NSString *group; // @synthesize group=_group;
@property(retain, nonatomic) NSString *artistId; // @synthesize artistId=_artistId;
@property(retain, nonatomic) NSString *genericId; // @synthesize genericId=_genericId;
@property(retain, nonatomic) NSString *tagId; // @synthesize tagId=_tagId;
@property double progress; // @synthesize progress=_progress;
@property(nonatomic) _Bool isPlayingRemotely; // @synthesize isPlayingRemotely=_isPlayingRemotely;
@property double serverTimestamp; // @synthesize serverTimestamp=_serverTimestamp;
@property(retain, nonatomic) NSString *displaySubtitle; // @synthesize displaySubtitle=_displaySubtitle;
@property(retain, nonatomic) NSString *displayTitle; // @synthesize displayTitle=_displayTitle;
@property(retain, nonatomic) NSString *displayType; // @synthesize displayType=_displayType;
@property(retain, nonatomic) NSString *overrideDisplayName; // @synthesize overrideDisplayName=_overrideDisplayName;
@property(nonatomic) unsigned long long currentIndex; // @synthesize currentIndex=_currentIndex;
@property(retain, nonatomic) ANGPlayQueueState *serverPlayQueueState; // @synthesize serverPlayQueueState=_serverPlayQueueState;
@property long long playMode; // @synthesize playMode=_playMode;
@property(retain, nonatomic) NSString *playQueueOwnerID; // @synthesize playQueueOwnerID=_playQueueOwnerID;
@property(retain, nonatomic) NSString *udid; // @synthesize udid=_udid;
@property(retain, nonatomic) NSString *playQueueID; // @synthesize playQueueID=_playQueueID;
- (void).cxx_destruct;
- (void)handle404Error;
- (void)updatePlayQueueFromDict:(id)arg1;
- (void)checkForDialogsAndMessagesForIndex:(unsigned long long)arg1;
- (void)fillWithContentSectionProperties:(id)arg1;
- (void)appendRadioToQueueAtIndexOfSong:(id)arg1 andDialog:(id)arg2 andMessage:(id)arg3 andDisliked:(_Bool)arg4;
- (void)dislikeSong:(id)arg1;
- (void)appendRadioToQueueAtIndexOfSong:(id)arg1 andDialog:(id)arg2 andMessage:(id)arg3;
- (id)radioForModeInfinite;
- (void)appendSongs:(id)arg1;
- (void)loadMoreSongsIfNecessary;
- (_Bool)shouldDiscardAdsWithPrevious:(id)arg1;
- (void)pauseFromUserAction:(_Bool)arg1;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) NSArray *sectionObjectsArraySongs;
- (void)wasSetAsCurrentPlayQueue;
- (void)fillPlayQueueDataFrom:(id)arg1;
- (void)recordSongAndPlayTime:(id)arg1;
- (id)reportingInfoForSong:(id)arg1;
@property(readonly, nonatomic) unsigned long long duration;
@property(readonly, nonatomic) NSNumber *nextCachedSongIndex;
@property(readonly, nonatomic) _Bool supportsUserControl;
@property(readonly, nonatomic) _Bool supportsModification;
@property(readonly, nonatomic) NSArray *songs;
- (void)videoModeToggled:(id)arg1;
- (void)playModeChanged:(id)arg1;
@property(readonly, nonatomic) NSString *_displayName;
@property(readonly, nonatomic) NSString *defaultDisplayName;
@property(readonly, nonatomic) NSString *displayName;
- (void)reportToServer;
- (_Bool)wasReportedToServer;
@property(readonly, nonatomic) _Bool isActivePlayQueue;
- (void)_incrementalPlayQueueUpdate:(_Bool)arg1 includingProgress:(_Bool)arg2;
- (void)incrementalPlayQueueUpdate:(_Bool)arg1 includingProgress:(_Bool)arg2;
- (_Bool)isAloneOnSocket;
- (void)incrementalPlayQueueUpdate;
- (void)incrementalPlayQueueUpdateExternal;
- (void)reportSetPlayQueue;
- (_Bool)isThisDeviceQueue;
@property(readonly, nonatomic) NSDictionary *adjustProperties;
@property(readonly, nonatomic) NSDictionary *fbEventsProperties;
@property(readonly, nonatomic) NSDictionary *analyticsProperties;
- (double)timeIntervalBetweenSkips;
- (void)notifySkipLimitReachedWithTimeRemaining:(double)arg1 attemptSong:(id)arg2 attemptPlayQueue:(id)arg3;
@property(retain, nonatomic) NSDate *firstRecordedSkip;
@property(nonatomic) unsigned long long numberOfSkips;
@property(readonly, nonatomic) NSNumber *allowedSkips;
@property(readonly, nonatomic) _Bool isSkipLogicEnabled;
- (_Bool)checkAndRecordSkipToSong:(id)arg1;
@property(readonly, nonatomic) _Bool skipLimitReached;
@property(readonly, nonatomic) ANGSong *prevDisplaySong;
@property(readonly, nonatomic) unsigned long long prevDisplayIndex;
@property(readonly, nonatomic) ANGSong *nextDisplaySong;
@property(readonly, nonatomic) unsigned long long nextDisplayIndex;
@property(readonly, nonatomic) ANGSong *currentDisplaySong;
@property(readonly, nonatomic) unsigned long long currentDisplayIndex;
@property(readonly, nonatomic) ANGSong *prevSong;
@property(readonly, nonatomic) unsigned long long prevIndex;
@property(readonly, nonatomic) ANGSong *nextSong;
@property(readonly, nonatomic) unsigned long long nextIndex;
@property(readonly, nonatomic) ANGSong *currentSong;
- (_Bool)isPlayingOrderedSongs:(id)arg1;
- (void)setIsShuffled:(_Bool)arg1 keepSameSong:(_Bool)arg2;
@property(nonatomic) _Bool isShuffled;
@property(readonly, nonatomic) _Bool supportsShuffle;
- (long long)indexOffsetFromCurrent:(long long)arg1 ignoreRepeating:(_Bool)arg2;
- (unsigned long long)indexOffsetFromCurrent:(long long)arg1;
- (void)dispatchPlayIsUserAction:(_Bool)arg1;
- (_Bool)setCurrentIndexExternal:(unsigned long long)arg1;
- (void)possiblyPostIndexChangeNotificationForIndex:(unsigned long long)arg1;
- (void)showSkippedDisabledSongDialog;
- (_Bool)setCurrentIndex:(unsigned long long)arg1 userAction:(_Bool)arg2 report:(_Bool)arg3;
- (_Bool)setCurrentIndex:(unsigned long long)arg1 userAction:(_Bool)arg2;
- (void)playDownloads:(id)arg1 atIndex:(unsigned long long)arg2 disableSkipLimit:(_Bool)arg3 disableAds:(_Bool)arg4 disableQueueRestrictions:(_Bool)arg5 disablePlayerRestrictions:(_Bool)arg6;
- (void)playPrevSongTriggeredByUI:(_Bool)arg1;
- (void)playNextSongTriggeredByUI:(_Bool)arg1;
- (void)playPrevSong;
- (void)playNextSong;
- (void)moveToSongAtIndex:(unsigned long long)arg1;
- (void)moveToPrevSong;
- (void)moveToNextSong;
- (void)playShuffled;
- (void)play;
- (void)playShuffledAsVideoAndShowPlayer:(_Bool)arg1;
- (void)playAsVideoAndShowPlayer:(_Bool)arg1;
- (void)replaceSongs:(id)arg1 replacingSongs:(id)arg2;
- (id)_playQueueWithQueueAtEnd:(id)arg1 newPlayQueue:(id)arg2;
- (id)_playQueueWithQueueAtEnd:(id)arg1;
- (id)playQueueWithQueueAtEnd:(id)arg1;
- (id)playQueueWithSong:(id)arg1 movedToIndex:(long long)arg2;
- (id)playQueueWithPlayNext:(id)arg1;
- (id)playQueueWithRemovedSongs:(id)arg1;
- (id)playQueueWithRemovedSong:(id)arg1;
@property(readonly, nonatomic) _Bool shouldUniqueSongs;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)decodeSongsArrayFrom:(id)arg1 key:(id)arg2;
- (void)dealloc;
- (void)registerForNotifications;
- (_Bool)canDislikeSong:(id)arg1;
- (void)updateOriginalSongIDs:(id)arg1;
- (_Bool)isPartOfOriginalSongs:(id)arg1;
- (id)initWithSongs:(id)arg1 shuffledSongs:(id)arg2 currentIndex:(unsigned long long)arg3;
- (id)initWithSongs:(id)arg1 currentIndex:(unsigned long long)arg2;
- (id)initWithSongs:(id)arg1;
- (id)init;
- (id)sourceId;
- (id)typeString;
- (id)dictionaryRepresentation;
- (void)buildDataFromDict:(id)arg1;
- (id)currentState;

@end

