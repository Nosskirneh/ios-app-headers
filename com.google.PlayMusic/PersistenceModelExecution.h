//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "PersistenceModelDB.h"

@class GPDBExternalContentFTSTable, GPDBField, GPDBStandardTable, GPDBTableIndex, GPMAppServiceManager, GPMMusicModelLocalization, GPMServiceConfiguration, MusicModel, MusicPreferences, MusicQueueInfo, NSDictionary, NSMutableArray, NSMutableDictionary;

@interface PersistenceModelExecution : PersistenceModelDB
{
    MusicModel *_musicModel;
    MusicPreferences *_musicPreferences;
    GPMServiceConfiguration *_serviceConfiguration;
    MusicQueueInfo *_musicQueueInfo;
    GPMMusicModelLocalization *_modelLocalization;
    GPMAppServiceManager *_appServiceManager;
    _Bool _postedUpgradeNotification;
    NSMutableDictionary *_tableNameMap;
    NSMutableDictionary *_sectionedTableCollationFieldMap;
    NSMutableDictionary *_sectionedTableSectionFieldMap;
    NSMutableDictionary *_unsectionedTableCollationFieldMap;
    NSMutableDictionary *_tableFTSMap;
    NSMutableArray *_removedCloudQueueItemIDBuffer;
    GPDBStandardTable *_sqliteSequenceTable;
    GPDBStandardTable *_configTable;
    GPDBStandardTable *_trackTable;
    GPDBStandardTable *_albumTable;
    GPDBStandardTable *_artistTable;
    GPDBStandardTable *_radioStationTable;
    GPDBStandardTable *_playlistTable;
    GPDBStandardTable *_playlistEntryTable;
    GPDBStandardTable *_genreTable;
    GPDBStandardTable *_mainstageTable;
    GPDBExternalContentFTSTable *_trackFTSTable;
    GPDBExternalContentFTSTable *_albumFTSTable;
    GPDBExternalContentFTSTable *_artistFTSTable;
    GPDBExternalContentFTSTable *_stationsFTSTable;
    GPDBExternalContentFTSTable *_playlistsFTSTable;
    GPDBStandardTable *_lastSyncStatusTable;
    GPDBStandardTable *_playlistTombstonesTable;
    GPDBStandardTable *_playlistEntryTombstonesTable;
    GPDBStandardTable *_radioStationTombstonesTable;
    GPDBStandardTable *_trackTombstonesTable;
    GPDBStandardTable *_trackCacheTable;
    GPDBStandardTable *_pinnedContainerTable;
    GPDBStandardTable *_pinnedContainerTrackTable;
    GPDBStandardTable *_trackDownloadBlacklistTable;
    GPDBStandardTable *_listenNowDismissalTable;
    GPDBStandardTable *_queuedContainerTable;
    GPDBStandardTable *_queuedContainerTrackTable;
    GPDBStandardTable *_cloudQueueContainerTable;
    GPDBStandardTable *_cloudQueueContainerTrackTable;
    GPDBStandardTable *_userActivityEventTable;
    GPDBStandardTable *_emptySearchSuggestionsTable;
    GPDBStandardTable *_pinnedRadioTrackTable;
    GPDBStandardTable *_innerjamDismissalTable;
    GPDBField *_sqliteSequenceTableNameField;
    GPDBField *_sqliteSequenceLargestRowIDField;
    GPDBField *_configSchemaVersionField;
    GPDBField *_configSchemaLocaleIdentifierField;
    GPDBField *_trackSectionField;
    GPDBField *_trackIDField;
    GPDBField *_trackNIDField;
    GPDBField *_trackTitleField;
    GPDBField *_trackNormalizedTitleField;
    GPDBField *_trackAlbumArtField;
    GPDBField *_trackRecentTimestampField;
    GPDBField *_trackLastModifiedField;
    GPDBField *_trackTrackNumberField;
    GPDBField *_trackDiscNumberField;
    GPDBField *_trackCreationTimestampField;
    GPDBField *_trackDurationMillisecondsField;
    GPDBField *_trackAlbumField;
    GPDBField *_trackNormalizedAlbumField;
    GPDBField *_trackAlbumIDField;
    GPDBField *_trackArtistField;
    GPDBField *_trackNormalizedArtistField;
    GPDBField *_trackArtistIDField;
    GPDBField *_trackAlbumArtistField;
    GPDBField *_trackNormalizedAlbumArtistField;
    GPDBField *_trackAlbumAggregationKeyField;
    GPDBField *_trackArtistArtField;
    GPDBField *_trackGenreField;
    GPDBField *_trackNormalizedGenreField;
    GPDBField *_trackTypeField;
    GPDBField *_trackRatingField;
    GPDBField *_trackNeedsSyncField;
    GPDBField *_trackAlbumArtistDerived;
    GPDBField *_trackArtistDerived;
    GPDBField *_trackComposerField;
    GPDBField *_trackYearField;
    GPDBField *_trackEstimatedSizeField;
    GPDBField *_trackContentTypeField;
    GPDBField *_trackCanonicalIDField;
    GPDBField *_trackYouTubeVideoIDField;
    GPDBField *_trackLastRatingChangeTimestampField;
    GPDBField *_trackYouTubeVideoArtURLField;
    GPDBField *_trackAudioAdField;
    GPDBField *_trackPlayCountField;
    GPDBField *_albumKeyField;
    GPDBField *_albumIDField;
    GPDBField *_albumSectionField;
    GPDBField *_albumNameField;
    GPDBField *_albumNormalizedNameField;
    GPDBField *_albumArtistField;
    GPDBField *_albumArtistKeyField;
    GPDBField *_albumArtistIDField;
    GPDBField *_albumAlbumArtField;
    GPDBField *_albumArtistArtField;
    GPDBField *_albumRecentTimestampField;
    GPDBField *_albumCreationTimestampField;
    GPDBField *_albumYearField;
    GPDBField *_albumContentTypeField;
    GPDBField *_albumDetailField;
    GPDBField *_artistKeyField;
    GPDBField *_artistIDField;
    GPDBField *_artistSectionField;
    GPDBField *_artistNameField;
    GPDBField *_artistNormalizedNameField;
    GPDBField *_artistArtistArtField;
    GPDBField *_artistDetailField;
    GPDBField *_artistSquareArtField;
    GPDBField *_radioStationRowIDField;
    GPDBField *_radioStationTypeField;
    GPDBField *_radioStationIDField;
    GPDBField *_radioStationSeedIDField;
    GPDBField *_radioStationSeedTypeField;
    GPDBField *_radioStationNameField;
    GPDBField *_radioStationNormalizedNameField;
    GPDBField *_radioStationAlbumArtField;
    GPDBField *_radioStationRecentTimestampField;
    GPDBField *_radioStationLastModifiedField;
    GPDBField *_radioStationDetailField;
    GPDBField *_radioStationProfileImageField;
    GPDBField *_radioStationHighlightColorField;
    GPDBField *_radioStationInLibraryField;
    GPDBField *_radioStationNeedsSyncField;
    GPDBField *_radioStationCompositeArtsField;
    GPDBField *_radioStationArtsField;
    GPDBField *_radioStationBylineField;
    GPDBField *_playlistRowIDField;
    GPDBField *_playlistIDField;
    GPDBField *_playlistNameField;
    GPDBField *_playlistNormalizedNameField;
    GPDBField *_playlistLastModifiedField;
    GPDBField *_playlistRecentTimestampField;
    GPDBField *_playlistLastRefreshTimestampField;
    GPDBField *_playlistShareTokenField;
    GPDBField *_playlistTypeField;
    GPDBField *_playlistOwnerNameField;
    GPDBField *_playlistOwnerProfilePhotoURLField;
    GPDBField *_playlistNeedsSyncField;
    GPDBField *_playlistAlbumArtField;
    GPDBField *_playlistCreatorArtURLField;
    GPDBField *_playlistDetailField;
    GPDBField *_playlistIsPublicField;
    GPDBField *_playlistEntryIDField;
    GPDBField *_playlistEntryPlaylistIDField;
    GPDBField *_playlistEntryTrackSourceField;
    GPDBField *_playlistEntryTrackSourceIDField;
    GPDBField *_playlistEntryAbsolutePositionField;
    GPDBField *_playlistEntryLastModifiedMicrosecondsField;
    GPDBField *_playlistEntryNeedsSyncField;
    GPDBTableIndex *_playlistEntryPlaylistIDIndex;
    GPDBTableIndex *_playlistEntryTrackSourceIDIndex;
    GPDBTableIndex *_playlistEntryTrackSourceIDPlaylistIDIndex;
    GPDBTableIndex *_playlistEntryAbsolutePositionIndex;
    GPDBField *_genreNameField;
    GPDBField *_genreNormalizedNameField;
    GPDBField *_mainstageRowIDField;
    GPDBField *_mainstageAlbumKeyField;
    GPDBField *_mainstageAlbumIDField;
    GPDBField *_mainstagePlaylistRowIDField;
    GPDBField *_mainstageRadioRowIDField;
    GPDBField *_mainstageReasonField;
    GPDBField *_mainstageTimestampField;
    GPDBField *_mainstageIsLockerRecField;
    GPDBField *_mainstageSuggestionStringField;
    GPDBField *_lastSyncStatusTypeField;
    GPDBField *_lastSyncStatusTimestampField;
    GPDBField *_playlistTombstoneIDField;
    GPDBField *_playlistEntryTombstoneIDField;
    GPDBField *_radioStationTombstoneIDField;
    GPDBField *_trackTombstoneIDField;
    GPDBField *_trackCacheCacheIDField;
    GPDBField *_trackCacheFilePathField;
    GPDBField *_trackCacheOwnerField;
    GPDBField *_trackCacheSizeField;
    GPDBField *_trackCacheQualityField;
    GPDBField *_trackCacheTimestampField;
    GPDBField *_trackCacheCodecField;
    GPDBField *_pinnedContainerRowIDField;
    GPDBField *_pinnedContainerContainerIDField;
    GPDBField *_pinnedContainerTypeField;
    GPDBField *_pinnedContainerSubtypeField;
    GPDBField *_pinnedContainerTimestampField;
    GPDBField *_pinnedContainerTrackContainerRowIDField;
    GPDBField *_pinnedContainerTrackCacheIDField;
    GPDBField *_trackDownloadBlacklistTrackIDField;
    GPDBField *_listenNowDismissalIDField;
    GPDBField *_listenNowDismissalReasonField;
    GPDBField *_listenNowDismissalItemTypeField;
    GPDBField *_listenNowDismissalTimestampField;
    GPDBField *_listenNowDismissalAlbumTitleField;
    GPDBField *_listenNowDismissalAlbumArtistField;
    GPDBField *_listenNowDismissalAlbumMetajamIDField;
    GPDBField *_listenNowDismissalAlbumKeyField;
    GPDBField *_listenNowDismissalShareTokenField;
    GPDBField *_listenNowDismissalRadioStationIDField;
    GPDBField *_listenNowDismissalRadioSeedIDField;
    GPDBField *_listenNowDismissalRadioSeedTypeField;
    GPDBField *_listenNowDismissalNeedsSyncField;
    GPDBField *_queuedContainerRowIDField;
    GPDBField *_queuedContainerIDField;
    GPDBField *_queuedContainerTypeField;
    GPDBField *_queuedContainerTitleField;
    GPDBField *_queuedContainerSubtitleField;
    GPDBField *_queuedContainerSeveredField;
    GPDBField *_queuedContainerEventReportingIDField;
    GPDBField *_queuedContainerCloudQueueContainerIDField;
    GPDBField *_queuedContainerCloudQueueContainerVersionField;
    GPDBField *_queuedContainerSecondaryIDField;
    GPDBField *_queuedContainerTrackRowIDField;
    GPDBField *_queuedContainerTrackContainerRowIDField;
    GPDBField *_queuedContainerTrackIDField;
    GPDBField *_queuedContainerTrackNIDField;
    GPDBField *_queuedContainerTrackStateField;
    GPDBField *_queuedContainerTrackItemOrderField;
    GPDBField *_queuedContainerTrackItemUnshuffledOrderField;
    GPDBField *_queuedContainerTrackCloudQueueItemIDField;
    GPDBField *_queuedContainerTrackCloudQueueItemVersionField;
    GPDBField *_queuedContainerTrackWEntryIDField;
    GPDBField *_userActivityEventRowIDField;
    GPDBField *_userActivityEventTypeField;
    GPDBField *_userActivityEventCreatedTimestampMillisField;
    GPDBField *_userActivityEventLockerIDField;
    GPDBField *_userActivityEventMetajamIDField;
    GPDBField *_userActivityEventStreamAuthIDField;
    GPDBField *_userActivityEventIncrementalPlayCountField;
    GPDBField *_userActivityEventPlayTimeMillisField;
    GPDBField *_userActivityEventTrackDurationMillisField;
    GPDBField *_userActivityEventRatingField;
    GPDBField *_userActivityEventWEntryIDField;
    GPDBField *_userActivityEventAlbumIDField;
    GPDBField *_userActivityEventRadioIDField;
    GPDBField *_userActivityEventFeelLuckyRadioField;
    GPDBField *_userActivityEventPlaylistShareTokenField;
    GPDBField *_userActivityEventIsWoodstockPlayField;
    GPDBField *_userActivityEventDistilledContextTokenField;
    GPDBField *_userActivityEventRadioSeedIDField;
    GPDBField *_userActivityEventRadioSeedTypeField;
    GPDBField *_userActivityEventGenreIDField;
    GPDBField *_userActivityEventArtistIDField;
    GPDBField *_userActivityEventContainerTypeField;
    GPDBField *_emptySearchSuggestionTitleField;
    GPDBField *_emptySearchSuggestionTypeField;
    GPDBField *_emptySearchSuggestionTimestampField;
    GPDBField *_pinnedRadioTrackRowIDField;
    GPDBField *_pinnedRadioTrackRadioRowIDField;
    GPDBField *_pinnedRadioTrackTrackIDField;
    GPDBField *_pinnedRadioTrackTrackNIDField;
    GPDBField *_pinnedRadioTrackStateField;
    GPDBField *_innerjamDismissalRowIDField;
    GPDBField *_innerjamDismissalDismissTokenField;
    GPDBField *_innerjamDismissalDismissTokenTypeField;
    GPDBField *_innerjamDismissalDismissKeyField;
    GPDBField *_innerjamDismissalLogTokenField;
    GPDBField *_innerjamDismissalTimestampField;
}

@property(readonly) GPDBField *playlistIDField; // @synthesize playlistIDField=_playlistIDField;
@property(readonly) GPDBField *playlistNormalizedNameField; // @synthesize playlistNormalizedNameField=_playlistNormalizedNameField;
@property(readonly) GPDBStandardTable *playlistTable; // @synthesize playlistTable=_playlistTable;
@property(readonly) GPDBField *radioStationRecentTimestampField; // @synthesize radioStationRecentTimestampField=_radioStationRecentTimestampField;
@property(readonly) GPDBField *radioStationInLibraryField; // @synthesize radioStationInLibraryField=_radioStationInLibraryField;
@property(readonly) GPDBField *radioStationNormalizedNameField; // @synthesize radioStationNormalizedNameField=_radioStationNormalizedNameField;
@property(readonly) GPDBStandardTable *radioStationTable; // @synthesize radioStationTable=_radioStationTable;
@property(readonly) GPDBField *genreNormalizedNameField; // @synthesize genreNormalizedNameField=_genreNormalizedNameField;
@property(readonly) GPDBStandardTable *genreTable; // @synthesize genreTable=_genreTable;
@property(readonly) GPDBField *artistNormalizedNameField; // @synthesize artistNormalizedNameField=_artistNormalizedNameField;
@property(readonly) GPDBField *artistKeyField; // @synthesize artistKeyField=_artistKeyField;
@property(readonly) GPDBStandardTable *artistTable; // @synthesize artistTable=_artistTable;
@property(readonly) GPDBField *albumArtistKeyField; // @synthesize albumArtistKeyField=_albumArtistKeyField;
@property(readonly) GPDBField *albumNormalizedNameField; // @synthesize albumNormalizedNameField=_albumNormalizedNameField;
@property(readonly) GPDBField *albumKeyField; // @synthesize albumKeyField=_albumKeyField;
@property(readonly) GPDBStandardTable *albumTable; // @synthesize albumTable=_albumTable;
@property(readonly) GPDBField *trackNormalizedGenreField; // @synthesize trackNormalizedGenreField=_trackNormalizedGenreField;
@property(readonly) GPDBField *trackNormalizedTitleField; // @synthesize trackNormalizedTitleField=_trackNormalizedTitleField;
@property(readonly) GPDBField *trackTypeField; // @synthesize trackTypeField=_trackTypeField;
@property(readonly) GPDBStandardTable *trackTable; // @synthesize trackTable=_trackTable;
@property(readonly) NSDictionary *sectionedTableSectionFieldMap; // @synthesize sectionedTableSectionFieldMap=_sectionedTableSectionFieldMap;
- (void).cxx_destruct;
- (_Bool)insertHistoricalSearchSuggestionFromQuery:(id)arg1 executor:(id)arg2;
- (_Bool)saveEmptySearchSuggestions:(id)arg1 executor:(id)arg2;
- (id)emptySearchSuggestionsWithExecutor:(id)arg1;
- (id)searchQuerySuggestionFromDBQuery:(id)arg1;
- (id)musicQueueSyncRadioRefForSeedID:(id)arg1 seedType:(long long)arg2 executor:(id)arg3;
- (id)musicQueueSyncAlbumRefForAlbumID:(id)arg1 executor:(id)arg2;
- (id)musicQueueSyncAlbumRefForAlbumKey:(id)arg1 executor:(id)arg2;
- (id)trackNIDForTrackWithID:(id)arg1 executor:(id)arg2;
- (id)radioStationForRadioID:(id)arg1 executor:(id)arg2;
- (void)bindQueuedContainerTrack:(id)arg1 toStatement:(id)arg2;
- (void)bindQueuedContainer:(id)arg1 toStatement:(id)arg2;
- (id)cloudQueueItemsSortedByField:(id)arg1 executor:(id)arg2;
- (id)cloudQueueItemIDToRowIDMapWithExecutor:(id)arg1;
- (void)removeCloudQueueItemIDs:(id)arg1 executor:(id)arg2;
- (long long)insertCloudQueueItem:(id)arg1 executor:(id)arg2;
- (void)updateCloudQueueItem:(id)arg1 executor:(id)arg2;
- (id)activeQueuedContainerTrackTable;
- (id)activeQueuedContainerTable;
- (void)applyCloudQueueDiffsForVersion:(long long)arg1 itemsToUpdate:(id)arg2 containerMap:(id)arg3 diffsToApply:(id)arg4 sortField:(id)arg5 fillUsingItemOrder:(_Bool)arg6 fillUsingUnshuffledOrder:(_Bool)arg7 itemOrderMap:(id)arg8 executor:(id)arg9;
- (id)musicQueueSyncContainerFromLocalContainer:(id)arg1 executor:(id)arg2;
- (id)musicQueueSyncItemOrderingsWithMinimumVersion:(long long)arg1 sortField:(id)arg2 executor:(id)arg3;
- (id)cloudQueueItemIdsSortedByField:(id)arg1 executor:(id)arg2;
- (id)cloudQueueItemIdsInItemUnshuffledOrderWithExecutor:(id)arg1;
- (id)cloudQueueItemIdsInItemOrderWithExecutor:(id)arg1;
- (id)musicQueueSyncItemsWithMinimumVersion:(long long)arg1 numItems:(unsigned long long)arg2 executor:(id)arg3;
- (id)musicQueueSyncTracksWithMinimumVersion:(long long)arg1 numItems:(unsigned long long)arg2 executor:(id)arg3;
- (id)musicQueueSyncContainersWithMinimumVersion:(long long)arg1 numItems:(unsigned long long)arg2 executor:(id)arg3;
- (id)musicQueueSyncUpdateRequestForSenderVersion:(long long)arg1 updatedVersion:(long long)arg2 musicQueueSyncPlaySettings:(id)arg3 localShuffleModeOn:(_Bool)arg4 executor:(id)arg5;
- (id)musicQueueSyncQueueForCloudQueueVersion:(long long)arg1 musicQueueSyncPlaySettings:(id)arg2 executor:(id)arg3;
- (id)queuedContainerFromMusicQueueSyncContainer:(id)arg1 executor:(id)arg2;
- (void)setCloudQueueItemsFromMusicQueueSyncQueue:(id)arg1 containerMap:(id)arg2 executor:(id)arg3;
- (id)setMusicQueueSyncContainers:(id)arg1 queueVersion:(long long)arg2 executor:(id)arg3;
- (_Bool)clearCloudQueueWithExecutor:(id)arg1;
- (_Bool)updateCloudQueueFromMusicQueueSyncSyncResponse:(id)arg1 localShuffleModeOn:(_Bool)arg2 executor:(id)arg3;
- (_Bool)setCloudQueueFromMusicQueueSyncQueue:(id)arg1 executor:(id)arg2;
- (_Bool)copyCloudQueueToLocalQueueWithExecutor:(id)arg1;
- (_Bool)copyLocalQueueToCloudQueueWithExecutor:(id)arg1;
- (_Bool)updateLargestRowID:(id)arg1 forTable:(id)arg2 executor:(id)arg3;
- (id)largestRowIDForTable:(id)arg1 executor:(id)arg2;
- (_Bool)updatePinnedContainerTableToSchemaVersion69WithExecutor:(id)arg1 error:(id)arg2;
- (void)populateCloudQueueMetadataForDBUpdateWithExecutor:(id)arg1;
- (_Bool)updateUnsectionedTableDerivedDataWithExecutor:(id)arg1;
- (_Bool)updateLocaleDerivedDataWithExecutor:(id)arg1;
- (_Bool)upgradeDatabaseFromSchemaVersion:(unsigned long long)arg1 executor:(id)arg2;
- (id)searchSuggestionLockerForTracks:(id)arg1 executor:(id)arg2;
- (id)searchSuggestionLockerForAlbums:(id)arg1 executor:(id)arg2;
- (id)searchLockerForPlaylists:(id)arg1 executor:(id)arg2;
- (id)searchLockerForStations:(id)arg1 executor:(id)arg2;
- (id)searchLockerForTracks:(id)arg1 executor:(id)arg2;
- (id)searchLockerForAlbums:(id)arg1 executor:(id)arg2;
- (id)searchLockerForArtists:(id)arg1 executor:(id)arg2;
- (id)fixedPositionPrefixSearchLockerQueryFromUserQuery:(id)arg1;
- (id)prefixSearchLockerQueryFromUserQuery:(id)arg1;
- (id)cleanerSearchLockerQueryFromUserQuery:(id)arg1;
- (id)searchLockerQueryForFTSTable:(id)arg1 searchFields:(id)arg2 sortField:(id)arg3 query:(id)arg4 executor:(id)arg5;
- (unsigned long long)totalCachedTrackCountWithExecutor:(id)arg1;
- (_Bool)clearTable:(id)arg1 executor:(id)arg2;
- (id)queuedContainerFromDBQuery:(id)arg1;
- (id)queueableContainerInfoFromDBQuery:(id)arg1;
- (id)queuedContainerTrackOrderFromDBQuery:(id)arg1;
- (id)queuedContainerTrackFromDBQuery:(id)arg1;
- (id)genreFromDBQuery:(id)arg1;
- (id)radioStationFromDBQuery:(id)arg1;
- (id)playlistEntryFromDBQuery:(id)arg1;
- (id)playlistFromDBQuery:(id)arg1;
- (id)artistFromDBQuery:(id)arg1;
- (id)albumFromDBQuery:(id)arg1;
- (id)trackListDescriptionFromQuery:(id)arg1;
- (id)userActivityEventFromDBQuery:(id)arg1;
- (id)trackFromQueuedContainerTrackDBQuery:(id)arg1;
- (id)trackFromDBQuery:(id)arg1;
- (id)lastSyncStatusValueForName:(id)arg1 executor:(id)arg2;
- (id)lastSyncStatusValueForTable:(id)arg1 executor:(id)arg2;
- (void)setLastSyncStatusForName:(id)arg1 value:(id)arg2 executor:(id)arg3;
- (void)setLastSyncStatusForTable:(id)arg1 value:(id)arg2 executor:(id)arg3;
- (void)setListenNowDismissalsMinTimestamp:(id)arg1 executor:(id)arg2;
- (void)setRadioStationUpdatedMinTimestamp:(id)arg1 executor:(id)arg2;
- (void)setPlaylistEntriesUpdatedMicroseconds:(long long)arg1 executor:(id)arg2;
- (void)setPlaylistsUpdatedMinTimestamp:(id)arg1 executor:(id)arg2;
- (void)setEphemeralThumbsUpTrackSyncDate:(id)arg1 executor:(id)arg2;
- (void)setTracksUpdatedMinTimestamp:(id)arg1 executor:(id)arg2;
- (void)deleteRowFromTable:(id)arg1 idField:(id)arg2 idValue:(id)arg3 executor:(id)arg4;
- (id)tombstonesFromTable:(id)arg1 field:(id)arg2 executor:(id)arg3;
- (_Bool)clearTombstoneFromTable:(id)arg1 idField:(id)arg2 remoteID:(id)arg3 executor:(id)arg4;
- (_Bool)clearSyncFlagForTable:(id)arg1 needsSyncField:(id)arg2 idField:(id)arg3 idValue:(id)arg4 executor:(id)arg5;
- (_Bool)updateDismissalID:(id)arg1 newID:(id)arg2 executor:(id)arg3;
- (id)listenNowDismissalsToSyncWithExecutor:(id)arg1;
- (_Bool)clearUserActivityEvents:(id)arg1 executor:(id)arg2;
- (id)userActivityEventsToSyncStartingAfterEventID:(id)arg1 executor:(id)arg2;
- (_Bool)updateRatingForTrack:(id)arg1 executor:(id)arg2;
- (_Bool)updateTrackLockerID:(id)arg1 newID:(id)arg2 executor:(id)arg3;
- (id)radioStationsToSyncWithExecutor:(id)arg1;
- (id)tracksToSyncWithExecutor:(id)arg1;
- (id)followingPlaylistEntryID:(id)arg1 executor:(id)arg2;
- (id)precedingPlaylistEntryID:(id)arg1 executor:(id)arg2;
- (_Bool)updatePlaylistEntryID:(id)arg1 newID:(id)arg2 executor:(id)arg3;
- (_Bool)deleteUpSyncRefusedPlaylistEntryID:(id)arg1 executor:(id)arg2;
- (_Bool)saveUpSyncedPlaylistEntryMutationResponses:(id)arg1 requestedMutations:(id)arg2 executor:(id)arg3;
- (id)playlistEntryMutationsToUpSyncWithExecutor:(id)arg1;
- (_Bool)updatePlaylistID:(id)arg1 newID:(id)arg2 executor:(id)arg3;
- (id)playlistsToSyncWithExecutor:(id)arg1;
- (void)bindCachedGenreCondition:(id)arg1 onQuery:(id)arg2;
- (id)addCachedGenreConditionToQuery:(id)arg1 isCorrelated:(_Bool)arg2;
- (void)bindCachedRadioStationCondition:(id)arg1 query:(id)arg2;
- (id)addCachedRadioStationConditionToQuery:(id)arg1;
- (void)bindCachedPlaylistCondition:(id)arg1 query:(id)arg2;
- (id)addCachedPlaylistConditionToQuery:(id)arg1;
- (void)bindNonExplicitTrackCondition:(id)arg1 query:(id)arg2;
- (id)addNonExplicitTrackConditionToQuery:(id)arg1;
- (id)preboundNonExplicitTracksQueryFromTracksQuery:(id)arg1;
- (void)bindCachedTrackCondition:(id)arg1 query:(id)arg2;
- (id)addCachedTrackConditionToQuery:(id)arg1;
- (id)preboundCachedTracksQueryFromTracksQuery:(id)arg1;
- (void)bindCachedAlbumCondition:(id)arg1 query:(id)arg2;
- (id)addCachedAlbumConditionToQuery:(id)arg1;
- (void)bindCachedArtistCondition:(id)arg1 query:(id)arg2;
- (id)addCachedArtistConditionToQuery:(id)arg1;
- (void)bindCachedCondition:(id)arg1 onQuery:(id)arg2 forTable:(id)arg3;
- (id)addCachedConditionToQuery:(id)arg1 forTable:(id)arg2 isCorrelated:(_Bool)arg3;
- (unsigned long long)trackCountForContainer:(id)arg1 executor:(id)arg2;
- (id)maximumQueuedContainerTrackOrderWithExecutor:(id)arg1;
- (id)minimumQueuedContainerTrackOrderWithExecutor:(id)arg1;
- (unsigned long long)queuedContainerTrackCountWithExecutor:(id)arg1;
- (id)queuedContainerTracksFromIndex:(unsigned long long)arg1 numTracksToReturn:(unsigned long long)arg2 executor:(id)arg3;
- (id)queuedContainerTrackForTrackAtIndex:(unsigned long long)arg1 executor:(id)arg2;
- (void)shiftQueuedTracksOrderFromStartOrder:(long long)arg1 usingField:(id)arg2 byDelta:(long long)arg3 cloudQueueVersion:(long long)arg4 executor:(id)arg5;
- (id)queuedContainerTracksWithExecutor:(id)arg1;
- (id)queuedContainerTracksWithItemOrderGreaterThan:(long long)arg1 includeItemOrder:(_Bool)arg2 executor:(id)arg3;
- (id)queuedContainersWithExecutor:(id)arg1;
- (void)cleanupOrphanedQueueContainersWithExecutor:(id)arg1;
- (id)deleteQueuedContainerTracksFromTop:(_Bool)arg1 withSize:(unsigned long long)arg2 executor:(id)arg3;
- (void)severConnectionsForQueuedContainersWithRowIDs:(id)arg1 executor:(id)arg2;
- (void)severConnectionsForQueuedContainerTracksWithState:(long long)arg1 executor:(id)arg2;
- (id)clearQueuedContainerTracksWithState:(long long)arg1 executor:(id)arg2;
- (id)insertQueuedContainer:(id)arg1 isSevered:(_Bool)arg2 cloudQueueVersion:(long long)arg3 executor:(id)arg4;
- (void)insertQueuedContainerTracksForContainerRowID:(id)arg1 container:(id)arg2 state:(long long)arg3 startItemOrder:(long long)arg4 startItemUnshuffledOrder:(long long)arg5 length:(unsigned long long)arg6 offset:(unsigned long long)arg7 shouldShuffle:(_Bool)arg8 cloudQueueVersion:(long long)arg9 executor:(id)arg10;
- (void)insertQueuedContainerTracksFromDBForContainerRowID:(id)arg1 container:(id)arg2 state:(long long)arg3 startItemOrder:(long long)arg4 startItemUnshuffledOrder:(long long)arg5 length:(unsigned long long)arg6 offset:(unsigned long long)arg7 shouldShuffle:(_Bool)arg8 cloudQueueVersion:(long long)arg9 executor:(id)arg10;
- (void)appendQueuedContainerTracksForContainerRowID:(id)arg1 container:(id)arg2 state:(long long)arg3 startItemOrder:(long long)arg4 startItemUnshuffledOrder:(long long)arg5 length:(unsigned long long)arg6 offset:(unsigned long long)arg7 shouldShuffle:(_Bool)arg8 cloudQueueVersion:(long long)arg9 executor:(id)arg10;
- (id)queuedContainerTracksForContainer:(id)arg1 executor:(id)arg2;
- (id)tracksForQueuedContainer:(id)arg1 executor:(id)arg2;
- (void)updateQueuedContainerTracksUsingNewTracks:(id)arg1 oldQueuedContainerTracks:(id)arg2 container:(id)arg3 startItemOrder:(long long)arg4 startItemUnshuffledOrder:(long long)arg5 bottomOrder:(long long)arg6 executor:(id)arg7;
- (_Bool)refreshContainer:(id)arg1 withNewTracks:(id)arg2 executor:(id)arg3;
- (_Bool)removeDeletedTracksFromQueueWithExecutor:(id)arg1;
- (_Bool)shuffleQueueBelowQueuedContainerTrackAtIndex:(unsigned long long)arg1 includeTrackAtIndex:(_Bool)arg2 cloudQueueVersion:(long long)arg3 executor:(id)arg4;
- (void)shuffleQueuedContainerTracks:(id)arg1 fromIndex:(unsigned long long)arg2 cloudQueueVersion:(long long)arg3 executor:(id)arg4;
- (unsigned long long)shuffleQueueWithTrackAtIndex:(unsigned long long)arg1 cloudQueueVersion:(long long)arg2 executor:(id)arg3;
- (_Bool)clearQueueWithExecutor:(id)arg1;
- (_Bool)setQueuedContainerTrackState:(long long)arg1 forTrackAtIndex:(unsigned long long)arg2 executor:(id)arg3;
- (id)queueableContainerInfoForTrackAtIndex:(unsigned long long)arg1 executor:(id)arg2;
- (unsigned long long)unshuffleQueueWithTrackAtIndex:(unsigned long long)arg1 cloudQueueVersion:(long long)arg2 executor:(id)arg3;
- (_Bool)moveQueuedContainerTrackAtIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 cloudQueueVersion:(long long)arg3 executor:(id)arg4;
- (_Bool)removeQueuedContainerTracksFromIndex:(unsigned long long)arg1 numTracksToRemove:(unsigned long long)arg2 removedCloudQueueItemIDs:(id *)arg3 executor:(id)arg4;
- (_Bool)enqueueContainer:(id)arg1 queueItemState:(long long)arg2 currentPosition:(unsigned long long)arg3 cloudQueueVersion:(long long)arg4 removedCloudQueueItemIDs:(id *)arg5 executor:(id)arg6;
- (_Bool)enqueueNextContainer:(id)arg1 afterPosition:(unsigned long long)arg2 shouldShuffle:(_Bool)arg3 cloudQueueVersion:(long long)arg4 removedCloudQueueItemIDs:(id *)arg5 executor:(id)arg6;
- (unsigned long long)enqueuePlayedContainer:(id)arg1 selectedPosition:(unsigned long long)arg2 shouldShuffle:(_Bool)arg3 cloudQueueVersion:(long long)arg4 removedCloudQueueItemIDs:(id *)arg5 executor:(id)arg6;
- (id)cloudQueueItemIDsWithExecutor:(id)arg1;
- (id)tracksInPlayQueueWithExecutor:(id)arg1;
- (_Bool)blacklistTrackID:(id)arg1 executor:(id)arg2;
- (id)undownloadedPinnedTracksQueryWithOwnerCondition:(id *)arg1;
- (unsigned long long)sumEstimatedContainerSize:(id)arg1;
- (id)pinningStatisticsWithExecutor:(id)arg1;
- (id)tracksPendingDownloadWithLimit:(unsigned long long)arg1 executor:(id)arg2;
- (unsigned long long)totalSizeOfCachedTracksWithOwner:(long long)arg1 executor:(id)arg2;
- (unsigned long long)totalSizeOfCachedTracksWithExecutor:(id)arg1;
- (unsigned long long)totalSizeOfTracksPendingDownloadWithExecutor:(id)arg1;
- (id)downloadedTrackCacheIDsNoLongerPinnedWithExecutor:(id)arg1;
- (void)clearOrphanedPinnedContainerTracksWithExecutor:(id)arg1;
- (void)clearOrphanedPinnedContainersWithExecutor:(id)arg1;
- (id)rowIDForPinnedContainerID:(id)arg1 type:(long long)arg2 subtype:(long long)arg3 executor:(id)arg4;
- (id)rowIDForPinnableContainerInfo:(id)arg1 executor:(id)arg2;
- (void)deletePinnedTracksOfType:(long long)arg1 executor:(id)arg2;
- (void)insertPinnedTracksUsingSelectionQuery:(id)arg1 typeCondition:(id)arg2 typeToBind:(long long)arg3 executor:(id)arg4;
- (void)insertPinnedRadioStationTracksWithExecutor:(id)arg1;
- (void)insertPinnedSharedPlaylistTracksWithExecutor:(id)arg1;
- (void)insertPinnedAutoPlaylistTracksOfID:(id)arg1 autoPlaylistType:(long long)arg2 executor:(id)arg3;
- (void)insertPinnedAutoPlaylistTracksWithExecutor:(id)arg1;
- (void)insertPinnedPlaylistTracksWithExecutor:(id)arg1;
- (void)insertPinnedAlbumTracksWithExecutor:(id)arg1;
- (id)incompletePinnableContainersRowIDSetWithExecutor:(id)arg1;
- (_Bool)isRefreshingRadioStation:(id)arg1 executor:(id)arg2;
- (id)pinnedMusicItemsWithExecutor:(id)arg1;
- (id)estimatedSizeOfContainerWithID:(id)arg1 ofType:(long long)arg2 subtype:(long long)arg3 executor:(id)arg4;
- (_Bool)updateAllPinnedContainerTracksWithExecutor:(id)arg1;
- (_Bool)hasSubmittedPinnedRadioTracksForContainerInfo:(id)arg1 executor:(id)arg2;
- (double)downloadProgressForPinnableContainerInfo:(id)arg1 executor:(id)arg2;
- (_Bool)shouldReportFullyDownloadedForPinnableContainerInfo:(id)arg1 executor:(id)arg2;
- (id)tracksOfPinnedContainer:(id)arg1 executor:(id)arg2;
- (id)nextPinnedContainerPendingDownloadWithExecutor:(id)arg1;
- (_Bool)isPinnedContainer:(id)arg1 executor:(id)arg2;
- (_Bool)deletePinnedContainer:(id)arg1 executor:(id)arg2;
- (_Bool)insertPinnedContainer:(id)arg1 executor:(id)arg2;
- (_Bool)hasCachedTracksForRadioStation:(id)arg1 filterExplicit:(_Bool)arg2 executor:(id)arg3;
- (_Bool)hasCachedTracksForPlaylist:(id)arg1 filterExplicit:(_Bool)arg2 executor:(id)arg3;
- (_Bool)hasCachedTracksForGenre:(id)arg1 filterExplicit:(_Bool)arg2 executor:(id)arg3;
- (_Bool)hasCachedTracksForArtist:(id)arg1 filterExplicit:(_Bool)arg2 executor:(id)arg3;
- (_Bool)hasCachedTracksForAlbum:(id)arg1 filterExplicit:(_Bool)arg2 executor:(id)arg3;
- (_Bool)hasCachedTrack:(id)arg1 filterExplicit:(_Bool)arg2 executor:(id)arg3;
- (_Bool)hasValidTrackCacheEntryForCacheID:(id)arg1 executor:(id)arg2;
- (id)clearStaleEphemeralTrackCacheEntriesWithExecutor:(id)arg1;
- (id)staleEphemeralCacheEntryIDsWithExecutor:(id)arg1;
- (_Bool)clearOrphanedTrackCacheEntriesWithExecutor:(id)arg1;
- (_Bool)clearTrackCacheForOwner:(long long)arg1 executor:(id)arg2;
- (_Bool)deleteTrackCacheEntryForCacheID:(id)arg1 executor:(id)arg2;
- (id)trackCacheIDToSizeMapWithExecutor:(id)arg1;
- (id)trackCacheIDsWithExecutor:(id)arg1;
- (id)resultAsTrackCacheEntry:(id)arg1;
- (id)trackCacheEntriesForOwner:(long long)arg1 executor:(id)arg2;
- (id)LRUStreamedTrackCacheEntriesWithOwner:(long long)arg1 limit:(long long)arg2 executor:(id)arg3;
- (id)trackCacheEntryForCacheID:(id)arg1 executor:(id)arg2;
- (_Bool)insertTrackCacheEntry:(id)arg1 executor:(id)arg2;
- (_Bool)isValidTrackCacheCodec:(long long)arg1;
- (_Bool)hasUserVersionOfSharedPlaylist:(id)arg1 executor:(id)arg2;
- (_Bool)isSubscribedSharedPlaylist:(id)arg1 executor:(id)arg2;
- (_Bool)hasTracksInLockerForArtist:(id)arg1 executor:(id)arg2;
- (_Bool)hasTracksInLockerForAlbum:(id)arg1 executor:(id)arg2;
- (_Bool)hasSubscriptionTracksInLockerForAlbum:(id)arg1 executor:(id)arg2;
- (_Bool)areAllLockerTracks:(id)arg1 fromSubscriptionOnly:(_Bool)arg2 executor:(id)arg3;
- (id)lastPlaylistEntryPositionInPlaylist:(id)arg1 executor:(id)arg2;
- (long long)playlistEntryAbsolutePositionForPlaylist:(id)arg1 atIndex:(unsigned long long)arg2 executor:(id)arg3;
- (id)playlistEntryIDForPlaylist:(id)arg1 atIndex:(unsigned long long)arg2 executor:(id)arg3;
- (id)stationIDForRadioStation:(id)arg1 executor:(id)arg2;
- (_Bool)deleteTracks:(id)arg1 executor:(id)arg2;
- (_Bool)deleteRadioStation:(id)arg1 executor:(id)arg2;
- (_Bool)deletePlaylistEntryForPlaylist:(id)arg1 atIndex:(unsigned long long)arg2 executor:(id)arg3;
- (_Bool)deletePlaylist:(id)arg1 executor:(id)arg2;
- (void)renumberPlaylistEntryPositionsInPlaylist:(id)arg1 executor:(id)arg2;
- (_Bool)reorderPlaylistEntryForPlaylist:(id)arg1 fromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3 executor:(id)arg4;
- (_Bool)insertDismissalForMainstageItem:(id)arg1 executor:(id)arg2;
- (void)bindTrackListDescription:(id)arg1 toInsert:(id)arg2;
- (_Bool)insertUserActivityEvent:(id)arg1 executor:(id)arg2;
- (_Bool)insertTracks:(id)arg1 replace:(_Bool)arg2 needsSync:(_Bool)arg3 executor:(id)arg4;
- (void)bindRadioStation:(id)arg1 toStatement:(id)arg2 needsSync:(_Bool)arg3;
- (id)updateOrInsertRadioStation:(id)arg1 needsSync:(_Bool)arg2 executor:(id)arg3;
- (_Bool)insertPlaylistEntries:(id)arg1 needsSync:(_Bool)arg2 executor:(id)arg3;
- (void)bindPlaylist:(id)arg1 toStatement:(id)arg2 needsSync:(_Bool)arg3;
- (id)updateOrInsertPlaylist:(id)arg1 needsSync:(_Bool)arg2 executor:(id)arg3;
- (void)insertArtist:(id)arg1 executor:(id)arg2;
- (void)insertAlbum:(id)arg1 executor:(id)arg2;
- (_Bool)removeMainstageItem:(id)arg1 executor:(id)arg2;
- (_Bool)hasMainstageItemForItem:(id)arg1 executor:(id)arg2;
- (id)radioRowIDForRadioSeedType:(long long)arg1 seedID:(id)arg2 executor:(id)arg3;
- (id)radioRowIDForPinnableContainerInfo:(id)arg1 executor:(id)arg2;
- (id)radioRowIDForRadioSeed:(id)arg1 executor:(id)arg2;
- (id)playlistRowIDForPlaylist:(id)arg1 executor:(id)arg2;
- (void)insertMainstageItem:(id)arg1 forReason:(long long)arg2 withSuggestionString:(id)arg3 isLockerRec:(_Bool)arg4 executor:(id)arg5;
- (id)mainstageSubQueryForField:(id)arg1;
- (void)clearEphemeralRadiosNotInMainstageWithExecutor:(id)arg1;
- (void)clearEphemeralPlaylistsNotInMainstageWithExecutor:(id)arg1;
- (void)clearEphemeralAlbumsNotInMainstageWithExecutor:(id)arg1;
- (void)postProcessMainstageWithExecutor:(id)arg1;
- (void)populateMainstageWithLockerAlbumsWithExecutor:(id)arg1;
- (void)addTrackDuplicateFilterToQuery:(id)arg1;
- (void)setupAutoPlaylistTracksQuery:(id)arg1 type:(long long)arg2 addOrder:(_Bool)arg3 shouldFilterCachedOnly:(_Bool)arg4 shouldFilterLockerOnly:(_Bool)arg5 shouldFilterExplicit:(_Bool)arg6 offset:(unsigned long long)arg7 limit:(unsigned long long)arg8 executor:(id)arg9;
- (id)fetchTracksInAutoPlaylist:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 limit:(unsigned long long)arg4 executor:(id)arg5;
- (unsigned long long)trackCountForAutoPlaylistType:(long long)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 executor:(id)arg4;
- (_Bool)autoPlaylistHasItems:(long long)arg1 filterLockerOnly:(_Bool)arg2 executor:(id)arg3;
- (id)autoPlaylistsWithExecutor:(id)arg1;
- (void)bindDismissedItemCondition:(id)arg1 onQuery:(id)arg2 activeReason:(_Bool)arg3;
- (id)addDismissedItemConditionToQuery:(id)arg1 itemTypes:(id)arg2 activeReason:(_Bool)arg3;
- (id)addDismissedItemConditionToQuery:(id)arg1 itemType:(long long)arg2 activeReason:(_Bool)arg3;
- (id)mainstageRecommendationsWithExecutor:(id)arg1;
- (id)recentRadioStationsWithLimit:(unsigned long long)arg1 forMainstage:(_Bool)arg2 executor:(id)arg3;
- (id)recentPlaylistsWithLimit:(unsigned long long)arg1 forMainstage:(_Bool)arg2 executor:(id)arg3;
- (id)recentAlbumsWithLimit:(unsigned long long)arg1 forMainstage:(_Bool)arg2 executor:(id)arg3;
- (id)fetchGenresInRange:(struct _NSRange)arg1 executor:(id)arg2;
- (void)removeTrack:(id)arg1 executor:(id)arg2;
- (void)clearSubscriptionDataInMainstageWithExecutor:(id)arg1;
- (void)clearSubscriptionTracksWithExecutor:(id)arg1;
- (void)clearSubscriptionPlaylistTracksWithExecutor:(id)arg1;
- (void)cleanupGenresTableWithExecutor:(id)arg1;
- (void)cleanupAlbumsTableWithExecutor:(id)arg1;
- (void)cleanupArtistsTableWithExecutor:(id)arg1;
- (void)cleanupMainstageTableWithExecutor:(id)arg1;
- (void)cleanupUsingField:(id)arg1 fromTable:(id)arg2 ifNotExistInField:(id)arg3 fromTable:(id)arg4 notExistInMainstageField:(id)arg5 executor:(id)arg6;
- (void)cleanupTablesAfterTrackChangesWithExecutor:(id)arg1;
- (void)clearOrphanedEphemeralTracksWithExecutor:(id)arg1;
- (_Bool)clearRadio:(long long)arg1 executor:(id)arg2;
- (void)populateArtURLsOfArtist:(id)arg1 executor:(id)arg2;
- (id)fetchArtURLForAlbum:(id)arg1 executor:(id)arg2;
- (id)fetchUniqueArtURLsForGenre:(id)arg1 limit:(unsigned long long)arg2 executor:(id)arg3;
- (id)fetchUniqueArtURLsForArtist:(id)arg1 limit:(unsigned long long)arg2 executor:(id)arg3;
- (id)fetchUniqueArtURLsForPlaylist:(id)arg1 limit:(unsigned long long)arg2 executor:(id)arg3;
- (unsigned long long)trackCountForTracksByGenre:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 executor:(id)arg4;
- (void)setupTracksByGenreQuery:(id)arg1 genreNormalizedName:(id)arg2 addOrder:(_Bool)arg3 shouldFilterCachedOnly:(_Bool)arg4 shouldFilterExplicit:(_Bool)arg5 offset:(unsigned long long)arg6 limit:(unsigned long long)arg7 executor:(id)arg8;
- (id)fetchTracksByGenre:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 limit:(unsigned long long)arg4 executor:(id)arg5;
- (id)fetchRadioStationByRadioSeed:(id)arg1 rowID:(id *)arg2 executor:(id)arg3;
- (id)fetchLockerRadioStationByRadioSeed:(id)arg1 rowID:(id *)arg2 executor:(id)arg3;
- (id)fetchLockerTrackForTrackNID:(id)arg1 executor:(id)arg2;
- (id)fetchLockerAlbumForAlbumID:(id)arg1 executor:(id)arg2;
- (id)fetchTrackByLockerID:(id)arg1 executor:(id)arg2;
- (id)fetchLockerTracksByAlbumID:(id)arg1 executor:(id)arg2;
- (id)fetchLockerTracksByArtistID:(id)arg1 executor:(id)arg2;
- (id)fetchTrackByMetajamID:(id)arg1 executor:(id)arg2;
- (unsigned long long)trackCountForTracksByArtist:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 executor:(id)arg4;
- (void)setupTracksByArtistQuery:(id)arg1 artistKey:(id)arg2 addOrder:(_Bool)arg3 shouldFilterCachedOnly:(_Bool)arg4 shouldFilterExplicit:(_Bool)arg5 offset:(unsigned long long)arg6 limit:(unsigned long long)arg7 executor:(id)arg8;
- (id)fetchTracksByArtist:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 limit:(unsigned long long)arg4 executor:(id)arg5;
- (id)fetchAlbumsByArtist:(id)arg1 executor:(id)arg2;
- (void)setupRadioStationTracksQuery:(id)arg1 radioStationRowID:(id)arg2 orderByInsertionOrder:(_Bool)arg3 shouldFilterCachedOnly:(_Bool)arg4 shouldFilterExplicit:(_Bool)arg5 shouldQueryCacheStatus:(_Bool)arg6 offset:(unsigned long long)arg7 limit:(unsigned long long)arg8 executor:(id)arg9;
- (id)fetchTracksInRadioStation:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 limit:(unsigned long long)arg4 executor:(id)arg5;
- (unsigned long long)trackCountForPlaylistID:(id)arg1 shouldFilterOnDeviceOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 executor:(id)arg4;
- (id)preboundPlaylistTracksQueryForPlaylistID:(id)arg1 playlistOrder:(_Bool)arg2 cachedOnly:(_Bool)arg3 filterExplicit:(_Bool)arg4 offset:(unsigned long long)arg5 limit:(unsigned long long)arg6;
- (id)fetchTracksInPlaylist:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 limit:(unsigned long long)arg4 executor:(id)arg5;
- (unsigned long long)trackCountForAlbumKey:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 executor:(id)arg4;
- (void)setupAlbumTracksQuery:(id)arg1 albumKey:(id)arg2 addOrder:(_Bool)arg3 shouldFilterCachedOnly:(_Bool)arg4 shouldFilterExplicit:(_Bool)arg5 offset:(unsigned long long)arg6 limit:(unsigned long long)arg7 executor:(id)arg8;
- (id)fetchTracksInAlbum:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3 limit:(unsigned long long)arg4 executor:(id)arg5;
- (id)fetchRandomTracksWithLimit:(unsigned long long)arg1 executor:(id)arg2;
- (id)fetchAlbumsOfGenre:(id)arg1 executor:(id)arg2;
- (unsigned long long)trackCountForAllLockerTracksWithExecutor:(id)arg1 shouldFilterCachedOnly:(_Bool)arg2 shouldFilterExplicit:(_Bool)arg3;
- (void)setupTracksQuery:(id)arg1 addOrder:(_Bool)arg2 shouldFilterCachedOnly:(_Bool)arg3 shouldFilterExplicit:(_Bool)arg4 offset:(unsigned long long)arg5 limit:(unsigned long long)arg6 executor:(id)arg7;
- (_Bool)removeItem:(id)arg1 executor:(id)arg2;
- (void)removeDuplicateLockerEntriesWithExecutor:(id)arg1;
- (_Bool)clearListenNowRecommendationsWithExecutor:(id)arg1;
- (long long)listenNowSuggestionReasonFromMainstageReason:(long long)arg1;
- (long long)mainstageReasonFromListenNowSuggestionReason:(long long)arg1;
- (_Bool)saveListenNowRecommendationsFromSJListenNowItems:(id)arg1 executor:(id)arg2;
- (_Bool)removeDismissal:(struct GTLRMusicPA_GoogleInternalPlayMusicDismissalV1Dismissal *)arg1 executor:(id)arg2;
- (id)fetchInnerjamDismissalKeysWithExecutor:(id)arg1;
- (id)fetchInnerjamDismissalsWithExecutor:(id)arg1;
- (_Bool)addInnerjamDismissalWithDismissalToken:(id)arg1 dismissalType:(long long)arg2 dismissalKey:(id)arg3 logToken:(id)arg4 executor:(id)arg5;
- (_Bool)saveSyncedListenNowDismissals:(id)arg1 executor:(id)arg2;
- (_Bool)saveSyncedEphemeralThumbsUpSJTracks:(id)arg1 executor:(id)arg2;
- (unsigned long long)minimumCachedNewTracksCountForBatchCount:(unsigned long long)arg1;
- (_Bool)markNewTracksAsSubmittedForRadioStation:(id)arg1 executor:(id)arg2;
- (_Bool)deletePinnedTracksForRadioStation:(id)arg1 withTrackState:(long long)arg2 executor:(id)arg3;
- (id)getCachedTracksForPinnedRadioStation:(id)arg1 allowUsedCachedTracks:(_Bool)arg2 maxEntries:(unsigned long long)arg3 executor:(id)arg4;
- (_Bool)updateTracksForPinnedRadioStation:(id)arg1 executor:(id)arg2;
- (_Bool)saveRadioStation:(id)arg1 needsSync:(_Bool)arg2 executor:(id)arg3;
- (_Bool)saveSyncedSJRadioStations:(id)arg1 executor:(id)arg2;
- (void)bindAlbum:(id)arg1 toInsert:(id)arg2;
- (void)bindTrack:(id)arg1 toInsert:(id)arg2 needsSync:(_Bool)arg3;
- (_Bool)saveSyncedSJTracks:(id)arg1 executor:(id)arg2;
- (id)playlistShareTokenForPlaylistID:(id)arg1 executor:(id)arg2;
- (id)playlistIDForShareToken:(id)arg1 executor:(id)arg2;
- (_Bool)saveSharedSJPlaylistEntries:(id)arg1 shareToken:(id)arg2 executor:(id)arg3;
- (_Bool)saveDownSyncSJPlaylistEntries:(id)arg1 executor:(id)arg2;
- (_Bool)saveSyncedSJPlaylists:(id)arg1 executor:(id)arg2;
- (_Bool)clearLastSyncStatusTableWithExecutor:(id)arg1;
- (void)populateGenresTableWithTracks:(id)arg1 executor:(id)arg2;
- (void)populateArtistsTableWithTracks:(id)arg1 executor:(id)arg2;
- (void)populateAlbumsTableWithTracks:(id)arg1 executor:(id)arg2;
- (void)populateAggregationTablesWithTracks:(id)arg1 executor:(id)arg2;
- (_Bool)createInnerjamDismissalTableWithExecutor:(id)arg1;
- (_Bool)createCloudQueueContainerTablesWithExecutor:(id)arg1;
- (_Bool)createQueuedContainerTablesWithExecutor:(id)arg1;
- (_Bool)createMainStageTableWithExecutor:(id)arg1;
- (_Bool)createPinnedRadioTrackTableWithExecutor:(id)arg1 error:(id *)arg2;
- (_Bool)createRadioStationTableWithExecutor:(id)arg1;
- (_Bool)createPlaylistTableWithExecutor:(id)arg1;
- (_Bool)createListenNowDismissalTableWithExecutor:(id)arg1;
- (_Bool)createPinnedContainerTablesWithExecutor:(id)arg1;
- (_Bool)createTombstonesTablesWithExecutor:(id)arg1;
- (_Bool)createFTSTablesWithExecutor:(id)arg1;
- (_Bool)createTablesWithExecutor:(id)arg1;
- (id)openDatabaseAtPath:(id)arg1 overwrite:(_Bool)arg2;
- (void)writeConfigWithExecutor:(id)arg1;
- (id)getSchemaLocaleIdentifierWithExecutor:(id)arg1;
- (unsigned long long)getSchemaVersionWithExecutor:(id)arg1;
- (_Bool)validateDatabase:(id)arg1;
- (void)setupSchema;
- (void)setupInnerjamDismissals;
- (void)setupEmptySearchSuggestions;
- (void)setupUserActivityEvents;
- (void)setupQueuedContainers;
- (void)setupListenNowDismissals;
- (void)setupDownloadBlacklist;
- (void)setupPinnedContainers;
- (void)setupTrackCache;
- (void)setupTombstones;
- (void)setupTrackTombstones;
- (void)setupRadioStationTombstones;
- (void)setupPlaylistEntryTombstones;
- (void)setupPlaylistTombstones;
- (void)setupFTS;
- (void)setupMainstage;
- (void)setupGenres;
- (void)setupPlaylists;
- (void)setupRadioStations;
- (void)setupArtists;
- (void)setupAlbums;
- (void)setupTracks;
- (void)setupSQLiteInternalTables;
- (void)setupUpdatedMin;
- (void)setupConfig;
- (id)makeFTSTableWithName:(id)arg1 contentTable:(id)arg2 fields:(id)arg3;
- (id)makeStandardTableWithName:(id)arg1 fields:(id)arg2 constraints:(id)arg3 indexes:(id)arg4;
- (void)postUpgradeNotificationOnce;
- (void)executeDBTask:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithMusicModel:(id)arg1 musicPreferences:(id)arg2 serviceConfiguration:(id)arg3 musicQueueInfo:(id)arg4 appServiceManager:(id)arg5 path:(id)arg6 overwrite:(_Bool)arg7;
- (id)initWithMusicModel:(id)arg1 musicPreferences:(id)arg2 serviceConfiguration:(id)arg3 musicQueueInfo:(id)arg4 appServiceManager:(id)arg5 overwrite:(_Bool)arg6;
- (id)init;

@end

