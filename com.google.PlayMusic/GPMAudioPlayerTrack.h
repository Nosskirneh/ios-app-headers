//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "AEModule.h"

#import "GAKAudioSink-Protocol.h"
#import "GPMAudioPlayerFileDecoderDelegate-Protocol.h"

@class AEManagedValue, GPMAudioBuffer, GPMCircularBufferPool, NSError, NSObject, NSString;
@protocol AsyncReader, GPMAudioPlayerFileDecoder, GPMAudioPlayerFileDecoderFactory, GPMAudioPlayerTrackDelegate, GPMPlayerItem, OS_dispatch_queue;

@interface GPMAudioPlayerTrack : AEModule <GAKAudioSink, GPMAudioPlayerFileDecoderDelegate>
{
    id <GPMAudioPlayerTrackDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    NSObject<OS_dispatch_queue> *_workQueue;
    id <GPMAudioPlayerFileDecoderFactory> _fileDecoderFactory;
    id <GPMPlayerItem> _playerItem;
    id <AsyncReader> _asyncReader;
    unsigned int _bufferCapacityBytes;
    GPMCircularBufferPool *_circularBufferPool;
    _Bool _enableFetching;
    _Bool _audioFormatIsKnown;
    struct AudioStreamBasicDescription _knownAudioFormat;
    _Bool _codecDetectionStarted;
    id <GPMAudioPlayerFileDecoder> _decoder;
    double _seekRequestTrackTime;
    unsigned int _seekEpoch;
    double _trackOffsetTime;
    GPMAudioBuffer *_audioBuffer;
    AEManagedValue *_audioBufferValue;
    unsigned int _silenceFramesMostRecentCallToProcess;
    unsigned long long _totalDecodedFramesAtCurrentTrackOffsetTimeCount;
    unsigned long long _lastTotalUnderrunFrameCount;
    unsigned long long _readerRequestSizeByteCount;
    unsigned int _maximumDecodedAudioChunkSizeByteCount;
    _Bool _requestInFlight;
    unsigned long long _offset;
    _Bool _requestedTotalSize;
    _Bool _totalSizeIsKnown;
    unsigned long long _totalSize;
    _Bool _requestedDownloadedSize;
    unsigned long long _downloadedSize;
    _Bool _endOfFileReported;
    _Bool _decodedToEndOfStream;
    NSError *_error;
}

@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) _Bool decodedToEndOfStream; // @synthesize decodedToEndOfStream=_decodedToEndOfStream;
- (void).cxx_destruct;
- (_Bool)isCurrentlyOnWorkQueue;
- (void)reportError:(id)arg1;
- (void)startRequest;
- (void)startDetectingCodec;
- (void)requestServerSideSeek:(double)arg1;
- (void)clearSeekRequest;
- (_Bool)isSeekRequested;
- (void)updateFetching:(_Bool)arg1;
- (void)decoder:(id)arg1 decodingError:(id)arg2;
- (void)setAudioBuffer:(id)arg1;
- (_Bool)createAudioBuffer;
- (void)decoder:(id)arg1 willBeginDecodingToFormat:(struct AudioStreamBasicDescription *)arg2;
- (void)handleAudio:(struct AudioBufferList *)arg1 fromSource:(id)arg2;
@property(readonly, nonatomic) double playheadTime;
@property(readonly, nonatomic) unsigned long long playheadFrames;
- (void)requestDownloadedSize;
- (unsigned long long)downloadedSize;
@property(readonly, nonatomic) double downloadedMediaTime;
@property(readonly, nonatomic) unsigned int bufferedFrameCount;
@property(readonly, nonatomic) _Bool isUpdatePollingNeeded;
@property(readonly, nonatomic) _Bool downloadedToEndOfStream;
- (void)updateBufferedToEndOfStream;
@property(readonly, nonatomic) const struct AudioStreamBasicDescription *audioFormat;
- (void)shutdown;
- (void)update;
- (void)stopFetching;
- (void)startFetching;
- (void)seekToTrackTime:(double)arg1;
- (id)initWithRenderer:(id)arg1 delegate:(id)arg2 delegateQueue:(id)arg3 serialWorkQueue:(id)arg4 fileDecoderFactory:(id)arg5 playerItem:(id)arg6 readerRequestSizeBytes:(unsigned long long)arg7 maximumDecodedAudioChunkSizeBytes:(unsigned int)arg8 bufferCapacityBytes:(unsigned int)arg9 circularBufferPool:(id)arg10;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

