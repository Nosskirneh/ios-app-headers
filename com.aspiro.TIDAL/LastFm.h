//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSOperationQueue, NSString;
@protocol LastFmCache;

@interface LastFm : NSObject
{
    _Bool _nextRequestIgnoresCache;
    NSString *_session;
    NSString *_username;
    NSString *_apiKey;
    NSString *_apiSecret;
    id <LastFmCache> _cacheDelegate;
    long long _maxConcurrentOperationCount;
    double _timeoutInterval;
    NSOperationQueue *_queue;
}

+ (id)numberFormatter;
+ (id)alternativeDateFormatter3;
+ (id)alternativeDateFormatter2;
+ (id)alternativeDateFormatter1;
+ (id)dateFormatter;
+ (id)sharedInstance;
@property(retain, nonatomic) NSOperationQueue *queue; // @synthesize queue=_queue;
@property(nonatomic) _Bool nextRequestIgnoresCache; // @synthesize nextRequestIgnoresCache=_nextRequestIgnoresCache;
@property(nonatomic) double timeoutInterval; // @synthesize timeoutInterval=_timeoutInterval;
@property(nonatomic) long long maxConcurrentOperationCount; // @synthesize maxConcurrentOperationCount=_maxConcurrentOperationCount;
@property(nonatomic) id <LastFmCache> cacheDelegate; // @synthesize cacheDelegate=_cacheDelegate;
@property(copy, nonatomic) NSString *apiSecret; // @synthesize apiSecret=_apiSecret;
@property(copy, nonatomic) NSString *apiKey; // @synthesize apiKey=_apiKey;
@property(copy, nonatomic) NSString *username; // @synthesize username=_username;
@property(copy, nonatomic) NSString *session; // @synthesize session=_session;
- (void).cxx_destruct;
- (id)getEventsForLocation:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getHypedTracksWithLimit:(long long)arg1 page:(long long)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getTopTracksWithLimit:(long long)arg1 page:(long long)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getTopAlbumsForUserOrNil:(id)arg1 period:(int)arg2 limit:(long long)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)getEventsForUserOrNil:(id)arg1 festivalsOnly:(_Bool)arg2 limit:(long long)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)getTopTracksForUserOrNil:(id)arg1 period:(int)arg2 limit:(long long)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)getLovedTracksForUserOrNil:(id)arg1 limit:(long long)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getRecentTracksForUserOrNil:(id)arg1 limit:(long long)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getTopArtistsForUserOrNil:(id)arg1 period:(int)arg2 limit:(long long)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)getInfoForUserOrNil:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (void)logout;
- (id)getRecommendedAlbumsWithLimit:(long long)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getNewReleasesForUserBasedOnRecommendations:(_Bool)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)sendScrobbledTrack:(id)arg1 byArtist:(id)arg2 onAlbum:(id)arg3 withDuration:(double)arg4 atTimestamp:(double)arg5 successHandler:(CDUnknownBlockType)arg6 failureHandler:(CDUnknownBlockType)arg7;
- (id)sendNowPlayingTrack:(id)arg1 byArtist:(id)arg2 onAlbum:(id)arg3 withDuration:(double)arg4 successHandler:(CDUnknownBlockType)arg5 failureHandler:(CDUnknownBlockType)arg6;
- (id)getSessionInfoWithSuccessHandler:(CDUnknownBlockType)arg1 failureHandler:(CDUnknownBlockType)arg2;
- (id)getSessionForUser:(id)arg1 password:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)createUserWithUsername:(id)arg1 password:(id)arg2 email:(id)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)getSimilarTracksTo:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getBuyLinksForTrack:(id)arg1 artist:(id)arg2 country:(id)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)unbanTrack:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)banTrack:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)unloveTrack:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)loveTrack:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getInfoForTrack:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getInfoForTrack:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getTopTagsForAlbum:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getBuyLinksForAlbum:(id)arg1 artist:(id)arg2 country:(id)arg3 successHandler:(CDUnknownBlockType)arg4 failureHandler:(CDUnknownBlockType)arg5;
- (id)getTracksForAlbum:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getInfoForAlbum:(id)arg1 artist:(id)arg2 successHandler:(CDUnknownBlockType)arg3 failureHandler:(CDUnknownBlockType)arg4;
- (id)getSimilarArtistsTo:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getImagesForArtist:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getTopTracksForArtist:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getTopAlbumsForArtist:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getEventsForArtist:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (id)getInfoForArtist:(id)arg1 successHandler:(CDUnknownBlockType)arg2 failureHandler:(CDUnknownBlockType)arg3;
- (_Bool)useCache;
- (id)_performApiCallForMethod:(id)arg1 useCache:(_Bool)arg2 signature:(id)arg3 withSortedParamsArray:(id)arg4 andOriginalParams:(id)arg5 rootXpath:(id)arg6 returnDictionary:(_Bool)arg7 mappingObject:(id)arg8 successHandler:(CDUnknownBlockType)arg9 failureHandler:(CDUnknownBlockType)arg10;
- (id)performApiCallForMethod:(id)arg1 useCache:(_Bool)arg2 withParams:(id)arg3 rootXpath:(id)arg4 returnDictionary:(_Bool)arg5 mappingObject:(id)arg6 successHandler:(CDUnknownBlockType)arg7 failureHandler:(CDUnknownBlockType)arg8;
- (id)period:(int)arg1;
- (id)forceString:(id)arg1;
- (id)transformValue:(id)arg1 intoClass:(id)arg2;
- (id)urlEscapeString:(id)arg1;
- (id)md5sumFromString:(id)arg1;
- (id)init;

@end

