//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "AudioPlayerDelegate-Protocol.h"
#import "EncryptionManagerDelegate-Protocol.h"
#import "WMPMediaControllerDelegate-Protocol.h"

@class MediaPlayer, NSData, NSString, UIImageView, WMPPlayReportService;

@interface LocalMediaController : NSObject <AudioPlayerDelegate, EncryptionManagerDelegate, WMPMediaControllerDelegate>
{
    MediaPlayer *_player;
    double _timeElapsed;
    double _lastTimeElapsedAdded;
    double _totalTimeElapsedAdded;
    _Bool _isChangingItem;
    _Bool _started;
    _Bool _notifiedTrackChange;
    NSString *_nextPreloadedItemUuid;
    long long _nextPreloadedTrackAudioEncoding;
    NSData *_nextOfflineTrackData;
    long long _retryCounter;
    _Bool _canSkipForwards;
    _Bool _isOldAudioDeviceAvailable;
    _Bool _playbackWasInterrupted;
    _Bool _replayTrackInNormalQuality;
    long long _streamEncoding;
    UIImageView *_artworkImageView;
    WMPPlayReportService *_playReportService;
    id _offlineModeObserver;
}

+ (id)sharedInstance;
@property(retain, nonatomic) id offlineModeObserver; // @synthesize offlineModeObserver=_offlineModeObserver;
@property(nonatomic) _Bool replayTrackInNormalQuality; // @synthesize replayTrackInNormalQuality=_replayTrackInNormalQuality;
@property(retain, nonatomic) WMPPlayReportService *playReportService; // @synthesize playReportService=_playReportService;
@property(retain, nonatomic) UIImageView *artworkImageView; // @synthesize artworkImageView=_artworkImageView;
@property(nonatomic) _Bool playbackWasInterrupted; // @synthesize playbackWasInterrupted=_playbackWasInterrupted;
@property(nonatomic) _Bool isOldAudioDeviceAvailable; // @synthesize isOldAudioDeviceAvailable=_isOldAudioDeviceAvailable;
@property(nonatomic) long long streamEncoding; // @synthesize streamEncoding=_streamEncoding;
- (void).cxx_destruct;
- (double)duration;
- (id)getPlayer;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)started;
- (double)secondsElapsed;
- (_Bool)isPaused;
- (_Bool)isPlaying;
- (double)timeElapsed;
- (void)handleTrackCutWasUpdatedNotification:(id)arg1;
- (void)handleAudioSessionRouteChange;
- (void)resetPreloadedItem;
- (void)trackDidStartPlaying:(id)arg1;
- (void)trackDidStopPlaying:(id)arg1;
- (void)tryToStartNextTrack;
- (void)audioPlayerPlaybackStateChanged:(id)arg1;
- (void)playbackChangedNotification:(_Bool)arg1;
- (void)beginScrubbing;
- (void)addItemURLNextInQueue:(id)arg1;
- (void)encryptionManagerDidDecryptItem:(id)arg1 itemUrl:(id)arg2;
- (void)resumePlayingVideoWithQualityUrl:(id)arg1;
- (id)getOriginatingPlaylistUuidForItemUuid:(id)arg1;
- (void)prepareItemToPlay:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)getURLAndPrepareMediaItemToPlay:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)preloadNextTrackAndCrossfadeTrackIndex;
- (void)handleCrossfadeEffect:(double)arg1;
- (_Bool)allowToPlayInBasicSubscription;
- (void)checkTimeToPreloadAndCrossfade:(double)arg1;
- (void)handleMediaNotDownloadedYet;
- (void)handleNoOfflinePlaytimeLeftCase;
- (void)handleAudioQualityNotAllowedCase;
- (void)handleTrackUnavailableInTimeZoneCase;
- (void)handleTrackCutIsNotAllowedForPlayback;
- (void)handleTrackIsNotReadyForPlaybackCase;
- (void)handleNoPlayTimeLeftCase;
- (void)handleSessionInvalidCase;
- (void)handleNoPrivilegesCase;
- (void)audioPlayerDidUpdateElapsedTime:(double)arg1;
- (void)audioPlayerDidLostNetworkConnection;
- (void)updateElapsedTime:(double)arg1;
- (void)audioPlayerWillStartPrebuffering;
- (_Bool)shouldUseCacheForMediaItem:(id)arg1;
- (_Bool)shouldCacheItem:(id)arg1 withAudioEncoding:(long long)arg2;
- (void)crossfadeDidFinish;
- (void)audioPlayerIsFullyBuffered;
- (void)audioPlayerDidFailWithError:(id)arg1;
- (void)cleanNextPreloadedTrackInfo;
- (void)replayCurrentTrackInNormal;
- (void)resetPlayerInfoOnError;
- (void)playDidFailWithErrorCode:(long long)arg1 withError:(id)arg2 withDelay:(double)arg3;
- (void)preloadAndStartVideoPlayerWithURL:(id)arg1 andVideo:(id)arg2;
- (void)preloadAndStartAudioPlayerWithURL:(id)arg1 andItem:(id)arg2 streamEncoding:(long long)arg3;
- (void)updateStreamEncoding:(long long)arg1;
- (_Bool)shouldRewindToBeginningOfTrack;
- (_Bool)checkAndHandleNotPossibleStreamingCase:(id)arg1;
- (void)handleTrackPreloadingError:(id)arg1;
- (void)preloadAndStartPlayMediaItem:(id)arg1;
- (void)seekToTime:(double)arg1 forcePlay:(_Bool)arg2;
- (void)seekToTime:(double)arg1;
- (void)stop;
- (void)playNextItem;
- (void)playPreviousItem;
- (void)pauseCurrentTrack;
- (void)pauseTrackUseSoftEffect:(_Bool)arg1;
- (void)pause;
- (void)playMediaItem:(id)arg1 autoPlay:(_Bool)arg2;
- (void)play:(id)arg1 autoPlay:(_Bool)arg2;
- (void)play:(id)arg1;
- (void)loadPlayer:(id)arg1 elapsedTime:(double)arg2 paused:(_Bool)arg3;
- (void)play;
- (void)handleInterruption:(long long)arg1 withAudioSessionOption:(long long)arg2;
- (void)startObservingOfflineModeNotifications;
- (void)removeObservers;
- (void)addObservers;
- (void)dealloc;
- (void)configureAudioSession;
- (id)init;
- (void)reportPlayProgress;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

