//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AVAudioPlayerDelegate-Protocol.h"

@class JMediaItem, NSArray, NSDate, NSMutableArray, NSString, NSTimer, NSURL, UIImage;

@interface JAudioPlayer : NSObject <AVAudioPlayerDelegate>
{
    struct JFFilePlayer *mJPlayer;
    NSMutableArray *mTracks;
    NSURL *mRootFolderURL;
    UIImage *mDefArtwork;
    UIImage *mDefArtworkForBrowser;
    int mDefArtworkForBrowserTheme;
    JMediaItem *mCurMediaItem;
    UIImage *mCurArtwork;
    NSArray *mCurDominantColors;
    int mCurTrackPos;
    int mShuffleMode;
    int mRepeatMode;
    int mManualNextMode;
    int mAutoNextMode;
    int mXFadeTime;
    int mPlayDirection;
    _Bool mPausedByInterruption;
    _Bool mAGCFlag;
    int mAGCGain;
    int mSpeed;
    _Bool mPitchCorrection;
    _Bool mMonoOutput;
    int mPan;
    int mPreamp;
    _Bool mReplayGainCombined;
    _Bool mReplayGainFlag;
    int mReplayGainGain;
    deque_1d2fa80d mShuffleHistory;
    deque_1d2fa80d mShuffleQueue;
    deque_1d2fa80d mNextQueue;
    NSTimer *mOneShotTimer;
    double mOneShotRemainingTime;
    int mErrorCounter;
    unsigned long long mBackgroundTaskId;
    NSTimer *mOneShotTimerForNPInfo;
    int mRepeatAB_A_Pos;
    int mRepeatAB_B_Pos;
    NSTimer *mRepeatAB_Timer;
    NSTimer *mTrialTimer;
    int mTrialFlag;
    int mCurrentAudioRoute;
    NSString *mCurrentAudioRouteName;
    NSDate *mLastAdCheckTime;
}

+ (int)port2AudioRoute:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)getCurrentAudioRouteName;
- (int)getCurrentAudioRoute;
- (void)handleAudioRouteChange;
- (void)onTrialTimer:(id)arg1;
- (void)stopTrialTimer;
- (void)startTrialTimer:(int)arg1;
- (void)onRepeatTimer:(id)arg1;
- (void)stopRepeatAB;
- (void)startRepeatAB;
- (int)getRepeatAB_B_Pos;
- (int)getRepeatAB_A_Pos;
- (void)setRepeatAB_B_Pos:(int)arg1;
- (void)setRepeatAB_A_Pos:(int)arg1;
- (void)setPan:(int)arg1;
- (void)setPreamp:(int)arg1;
- (int)getSpeed;
- (void)setSpeed:(int)arg1;
- (void)setReplayGainGain:(int)arg1;
- (void)setReplayGainFlag:(_Bool)arg1;
- (void)setReplayGainCombined:(_Bool)arg1;
- (void)setAgcGain:(int)arg1;
- (void)setAgcFlag:(_Bool)arg1;
- (void)initSoundEffects;
- (void)handleMediaStop;
- (void)onEngineMsg:(id)arg1;
- (void)handleMsg_ChapterChanged:(int)arg1;
- (void)handleMsg_AddNext;
- (void)handleMsg_ModeChanged:(int)arg1;
- (void)handleMsg_Started;
- (void)handleMsg_Opened;
- (void)lastFM_MetaChange;
- (_Bool)setIntInfo:(char *)arg1 v:(int)arg2;
- (int)getIntInfo:(char *)arg1;
- (void)closeEngine;
- (void)initEngine;
- (void)queueChanged;
- (void)adjustQueueByMove:(deque_1d2fa80d *)arg1 fromIndex:(int)arg2 toIndex:(int)arg3;
- (void)adjustQueueByInsert:(deque_1d2fa80d *)arg1 atIndex:(int)arg2 count:(int)arg3;
- (void)adjustQueueByRemove:(deque_1d2fa80d *)arg1 atIndex:(int)arg2;
- (int)popTrackFromQueueFront:(deque_1d2fa80d *)arg1;
- (void)pushTrackToQueueFront:(deque_1d2fa80d *)arg1 track:(int)arg2 maxQueueSize:(int)arg3;
- (int)popTrackFromQueueBack:(deque_1d2fa80d *)arg1;
- (void)pushTrackToQueueBack:(deque_1d2fa80d *)arg1 track:(int)arg2 maxQueueSize:(int)arg3;
- (void)dumpQueue:(deque_1d2fa80d *)arg1 name:(id)arg2;
- (void)addTracks:(id)arg1;
- (void)insertTracks:(id)arg1 atIndex:(int)arg2;
- (void)playTrack:(int)arg1;
- (int)moveTrackToPlayNext:(int)arg1;
- (void)moveTrack:(int)arg1 toIndex:(int)arg2;
- (void)removeTrack:(int)arg1;
- (id)getQueue;
- (_Bool)saveQueue:(_Bool)arg1;
- (void)saveQueueToPref:(id)arg1 queue:(deque_1d2fa80d *)arg2 name:(id)arg3;
- (_Bool)loadQueue;
- (void)loadQueueFromPref:(id)arg1 queue:(deque_1d2fa80d *)arg2 name:(id)arg3;
- (void)saveDefaults;
- (void)loadDefaults;
- (void)onOneShotTimer:(id)arg1;
- (_Bool)isGapTimerRunning;
- (void)destroyOneShotTimer;
- (void)createOneShotTimerWithInterval:(double)arg1 userInfo:(id)arg2;
- (void)createOneShotTimerForGap:(int)arg1;
- (void)createOneShotTimerForError:(int)arg1;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (void)audioPlayerDecodeErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)audioPlayerEndInterruption:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)audioPlayerBeginInterruption:(id)arg1;
- (void)notifyLockScreen:(_Bool)arg1 withTimer:(_Bool)arg2;
- (void)notifyLockScreen:(_Bool)arg1;
- (void)onOneShotTimerForNPInfo:(id)arg1;
- (void)createOneShotTimerForNPInfo;
- (void)notifyInterstitialAd;
- (void)notifyChangePlayQueue;
- (void)notifyChangeTrackInfo:(int)arg1 byEngine:(_Bool)arg2;
- (void)notifyChangePlayState;
- (void)notifyChange:(id)arg1 userInfo:(id)arg2;
- (void)onSettingsChanged:(id)arg1;
- (void)onAudioSessionRouteChanged:(id)arg1;
- (void)onAudioSessionInterruption:(id)arg1;
- (void)onAudioSessionMediaServicesWereLost:(id)arg1;
- (int)setShuffleMode:(int)arg1;
- (int)setRepeatMode:(int)arg1;
- (int)changeShuffleMode;
- (int)changeRepeatMode;
- (int)getShuffleMode;
- (int)getRepeatMode;
- (id)getID;
- (id)getTrackID;
- (id)getAlbumID;
- (id)getAlbumArtistID;
- (id)getArtistID;
- (id)getCurPosAsString;
- (int)getCurTrack;
- (int)getNumTracks;
- (id)getLyric;
- (id)getDominantColors;
- (id)getArtworkForBrowser;
- (id)getArtwork;
- (id)getTitleAndArtist;
- (id)getTrackItem;
- (id)getFilePath;
- (id)getYearAsString;
- (id)getAlbum;
- (id)getArtist;
- (id)getTitle;
- (id)getURL;
- (int)getNextShuffleTrack:(_Bool)arg1;
- (int)getNextNormalTrack:(_Bool)arg1;
- (int)getNextRandomTrack:(int *)arg1 numUnplayed:(int)arg2;
- (int)checkRecentlyUsedTracks:(deque_1d2fa80d *)arg1 curTrack:(int)arg2 results:(int *)arg3 numResults:(int)arg4;
- (int)getPrevTrack:(_Bool)arg1;
- (int)getNextTrack:(_Bool)arg1;
- (int)getRemainingTime;
- (int)getCurPlayingTime;
- (int)getDuration;
- (_Bool)willPlay;
- (void)mute:(_Bool)arg1;
- (_Bool)isMute;
- (int)getMode;
- (_Bool)isRunning;
- (_Bool)isPlaying;
- (_Bool)isOpen;
- (_Bool)seekByMsec:(int)arg1;
- (_Bool)gotoPrevByUser:(_Bool)arg1;
- (_Bool)gotoPrev:(_Bool)arg1;
- (_Bool)gotoNextByUser:(_Bool)arg1;
- (_Bool)gotoNext;
- (_Bool)pauseOrResume;
- (_Bool)doFadeInOrOut;
- (_Bool)pause;
- (_Bool)stop;
- (_Bool)play;
- (_Bool)close;
- (_Bool)openWithUrl:(id)arg1 track:(int)arg2;
- (_Bool)openNextWithUrl:(id)arg1 track:(int)arg2;
- (_Bool)playTrack:(int)arg1 shouldPlay:(_Bool)arg2;
- (_Bool)renameTracksWithFileName:(id)arg1 toFileName:(id)arg2;
- (_Bool)renameTracksWithFolder:(id)arg1 toFolder:(id)arg2;
- (_Bool)removeTracksWithPath:(id)arg1 isSingle:(_Bool)arg2;
- (_Bool)removeTrackWithTrack:(int)arg1;
- (_Bool)insertTracks:(int)arg1 tracks:(id)arg2 trackType:(int)arg3 playNext:(_Bool)arg4 showToast:(_Bool)arg5;
- (_Bool)addTracks:(id)arg1 trackType:(int)arg2 playNext:(_Bool)arg3 showToast:(_Bool)arg4;
- (_Bool)addAndPlayTracks:(id)arg1 trackType:(int)arg2 trackToPlay:(int)arg3;
- (_Bool)playTracks:(id)arg1 trackType:(int)arg2 trackToPlay:(int)arg3;
- (void)initVar;
- (void)activateAudioSession:(_Bool)arg1;
- (void)initAudioSession;
- (void)dealloc;
- (id)init;
- (void)resetCurTrackVarsWithTrack:(int)arg1;
- (void)resetCurTrackVars;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

