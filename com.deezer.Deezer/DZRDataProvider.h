//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "DZRMusicLibrarySynchronizationUpdaterDelegate-Protocol.h"

@class DZNRequestManager, DZRExtensionDataProvider, DZRListeningRestrictionService, DZRPlaybackStateService, DZRReachabilityFacade, DZWebSocketManager, DeezerUser, DownloaderStoreManager, NSDate, NSMapTable, NSString;
@protocol OS_dispatch_queue;

@interface DZRDataProvider : NSObject <DZRMusicLibrarySynchronizationUpdaterDelegate>
{
    _Bool _isDataProviderOfflineForced;
    _Bool _isAppTryingToConnectToDeezerApi;
    _Bool _isMobileSessionTagRequired;
    DZNRequestManager *_requestManager;
    DZNRequestManager *_rawRequestManager;
    DownloaderStoreManager *_cache;
    DeezerUser *_user;
    NSDate *_dateOfLastAPISessionError;
    DZRListeningRestrictionService *_liveRestrictionService;
    DZRPlaybackStateService *_livePlaybackService;
    DZNRequestManager *_parentRequestManager;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    DZRReachabilityFacade *_reachability;
    DZRExtensionDataProvider *_extensionDataProvider;
    NSMapTable *_albumCache;
    NSMapTable *_artistCache;
    NSMapTable *_talkShowCache;
    NSMapTable *_friendsCache;
    NSMapTable *_audiobookCache;
    NSObject<OS_dispatch_queue> *_friendsCacheQueue;
    NSObject<OS_dispatch_queue> *_albumCacheQueue;
    NSObject<OS_dispatch_queue> *_talkShowCacheQueue;
    NSObject<OS_dispatch_queue> *_artistCacheQueue;
    NSObject<OS_dispatch_queue> *_audiobookCacheQueue;
    DZWebSocketManager *_webSocketManager;
}

+ (id)defaultDataProvider;
+ (id)cacheKeyForLimitedPlaylistsForUserID:(id)arg1;
+ (id)cacheKeyForFavoriteAlbumsForUserID:(id)arg1;
+ (id)cacheKeyForFriendPlaylistsForUserID:(id)arg1;
+ (id)cacheKeyForPlaylistsForUserID:(id)arg1;
@property(nonatomic) _Bool isMobileSessionTagRequired; // @synthesize isMobileSessionTagRequired=_isMobileSessionTagRequired;
@property(nonatomic, getter=isAppTryingToConnectToDeezerApi) _Bool isAppTryingToConnectToDeezerApi; // @synthesize isAppTryingToConnectToDeezerApi=_isAppTryingToConnectToDeezerApi;
@property(retain, nonatomic) DZWebSocketManager *webSocketManager; // @synthesize webSocketManager=_webSocketManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *audiobookCacheQueue; // @synthesize audiobookCacheQueue=_audiobookCacheQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *artistCacheQueue; // @synthesize artistCacheQueue=_artistCacheQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *talkShowCacheQueue; // @synthesize talkShowCacheQueue=_talkShowCacheQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *albumCacheQueue; // @synthesize albumCacheQueue=_albumCacheQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *friendsCacheQueue; // @synthesize friendsCacheQueue=_friendsCacheQueue;
@property(retain, nonatomic) NSMapTable *audiobookCache; // @synthesize audiobookCache=_audiobookCache;
@property(retain, nonatomic) NSMapTable *friendsCache; // @synthesize friendsCache=_friendsCache;
@property(retain, nonatomic) NSMapTable *talkShowCache; // @synthesize talkShowCache=_talkShowCache;
@property(retain, nonatomic) NSMapTable *artistCache; // @synthesize artistCache=_artistCache;
@property(retain, nonatomic) NSMapTable *albumCache; // @synthesize albumCache=_albumCache;
@property(retain, nonatomic) DZRExtensionDataProvider *extensionDataProvider; // @synthesize extensionDataProvider=_extensionDataProvider;
@property(retain, nonatomic) DZRReachabilityFacade *reachability; // @synthesize reachability=_reachability;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(retain, nonatomic) DZNRequestManager *parentRequestManager; // @synthesize parentRequestManager=_parentRequestManager;
@property(retain, nonatomic) DZRPlaybackStateService *livePlaybackService; // @synthesize livePlaybackService=_livePlaybackService;
@property(retain, nonatomic) DZRListeningRestrictionService *liveRestrictionService; // @synthesize liveRestrictionService=_liveRestrictionService;
@property(retain, nonatomic) NSDate *dateOfLastAPISessionError; // @synthesize dateOfLastAPISessionError=_dateOfLastAPISessionError;
@property(nonatomic) _Bool isDataProviderOfflineForced; // @synthesize isDataProviderOfflineForced=_isDataProviderOfflineForced;
@property(retain, nonatomic) DeezerUser *user; // @synthesize user=_user;
@property(retain, nonatomic) DownloaderStoreManager *cache; // @synthesize cache=_cache;
@property(readonly, nonatomic) DZNRequestManager *rawRequestManager; // @synthesize rawRequestManager=_rawRequestManager;
@property(retain, nonatomic) DZNRequestManager *requestManager; // @synthesize requestManager=_requestManager;
- (void).cxx_destruct;
- (void)dealloc;
- (void)sendRestrictionToLive:(id)arg1;
- (void)presentStreamRestrictionAlert;
- (long long)timestampDiff;
- (void)setTimestampDiff:(long long)arg1;
- (_Bool)isCacheContentExpiredForUserID:(id)arg1;
- (void)resetAuthentification;
- (void)cleanRequestManager;
- (void)dispatchFailure:(CDUnknownBlockType)arg1 withError:(id)arg2;
- (void)dispatchSuccess:(CDUnknownBlockType)arg1 withData:(id)arg2 andInfo:(id)arg3;
- (_Bool)canAccessToNetwork;
- (_Bool)isForcedOfflineMode;
- (_Bool)offlineModeIsOn;
- (_Bool)musicLibrarySynchronizationUpdaterIsAllowedToSynchronize:(id)arg1;
- (void)forceOfflineModeForStartup:(_Bool)arg1;
- (void)notifyOnlineStateChanged;
- (void)relaunchUserAuth;
- (void)setupAccessChangesObservation;
- (void)updateNetworkActivityIndicator;
- (void)resetRequestsQueue;
- (void)configureCache:(id)arg1;
- (void)configureRequestManagerForAPI:(id)arg1;
- (void)configureRawRequestManager:(id)arg1;
- (id)init;
- (id)setBookmarkForUser:(id)arg1 forEpisode:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchBookmarksForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchTopChartsByGenre:(id)arg1 date:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchAlbumsSelectionByGenre:(id)arg1 date:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchAlbumsReleaseByGenre:(id)arg1 date:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchRadiosAggregateSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)fetchRadiosForRadioCategoryWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForTalkEpisodeWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForSongWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForArtistWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForRadioWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForTalkEpisodesList:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForSongsList:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchPlaylistsWithIds:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchDataForPlaylistWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForAlbumWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchAlbumsForArtistCard:(id)arg1 fetchCount:(long long)arg2 withSuccess:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchSimilarArtistsForArtist:(id)arg1 atStartIndex:(long long)arg2 fetchCount:(long long)arg3 withSuccess:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchPlaylistsForArtistCard:(id)arg1 atStartIndex:(long long)arg2 fetchCount:(long long)arg3 withSuccess:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchContentForPodCast:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchTracksForArtistCard:(id)arg1 withSuccess:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForArtist:(id)arg1 withSuccess:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)changePasswordFrom:(id)arg1 newPassword:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)changeEmailFromOld:(id)arg1 toNew:(id)arg2 password:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)updatePrivateInformations:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)getPrivateInformationsSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)fetchTextsForCustoID:(id)arg1 lang:(id)arg2 cacheOptions:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (void)removeAudiobookFromCache:(id)arg1;
- (void)addAudiobookIntoCache:(id)arg1;
- (void)removeFriendFromCache:(id)arg1;
- (void)addFriendIntoCache:(id)arg1;
- (void)removeTalkShowFromCache:(id)arg1;
- (void)addTalkShowIntoCache:(id)arg1;
- (void)removeArtistFromCache:(id)arg1;
- (void)addArtistIntoCache:(id)arg1;
- (void)removeAlbumFromCache:(id)arg1;
- (void)addAlbumIntoCache:(id)arg1;
- (id)audiobookWithDeezerId:(id)arg1;
- (id)friendWithDeezerId:(id)arg1;
- (id)talkShowWithDeezerId:(id)arg1;
- (id)artistWithDeezerId:(id)arg1;
- (id)albumWithDeezerId:(id)arg1;
- (id)debug_offlineBugOthers;
- (CDUnknownBlockType)failMSISDNErrors;
- (CDUnknownBlockType)makeMSISDNErrorsBypassRetry;
- (id)contentRequestMSISDNWithMethod:(id)arg1 andPostParameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)cachedContentRequestWithKey:(id)arg1 userID:(id)arg2 cacheOptions:(unsigned long long)arg3 method:(id)arg4 postParameters:(id)arg5 parsing:(CDUnknownBlockType)arg6 transformToValidFormat:(CDUnknownBlockType)arg7 validation:(CDUnknownBlockType)arg8 success:(CDUnknownBlockType)arg9 failure:(CDUnknownBlockType)arg10;
- (id)cachedContentRequestWithKey:(id)arg1 userID:(id)arg2 cacheOptions:(unsigned long long)arg3 method:(id)arg4 postParameters:(id)arg5 parsing:(CDUnknownBlockType)arg6 validation:(CDUnknownBlockType)arg7 success:(CDUnknownBlockType)arg8 failure:(CDUnknownBlockType)arg9;
- (id)postMultiPartRequestForImage:(id)arg1 withMethod:(id)arg2 getParameters:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)postRequestWithMethod:(id)arg1 andPostParameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)getRequestWithMethod:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)unloggedRawDataRequestWithURL:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)unloggedRequestWithMethod:(id)arg1 getParameters:(id)arg2 postParameters:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)unloggedJSONRequestWithMethod:(id)arg1 getParameters:(id)arg2 postParameters:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)apiRequestWithMethod:(id)arg1 getParameters:(id)arg2 postParameters:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (CDUnknownBlockType)unloggedRawDataRequestURL:(id)arg1 wrappedWithBehaviors:(id)arg2 requestPriority:(long long)arg3;
- (CDUnknownBlockType)requestMethod:(id)arg1 getParameters:(id)arg2 postParameters:(id)arg3 wrappedWithBehaviors:(id)arg4 jsonInput:(_Bool)arg5;
- (CDUnknownBlockType)requestMethod:(id)arg1 getParameters:(id)arg2 postParameters:(id)arg3 wrappedWithBehaviors:(id)arg4;
- (id)requestWithMethod:(id)arg1 getParameters:(id)arg2 postParameters:(id)arg3;
- (CDUnknownBlockType)checkDeezerAPIErrors;
- (CDUnknownBlockType)checkNetworkReachabilityForUnloggedRequests;
- (CDUnknownBlockType)checkNetworkReachabilityForCachedRequestsWithCacheOptions:(unsigned long long)arg1;
- (CDUnknownBlockType)checkNetworkReachability;
- (CDUnknownBlockType)checkDeezerAPIState;
- (_Bool)isAPIInitialized;
- (CDUnknownBlockType)retryWithCount:(unsigned long long)arg1;
- (CDUnknownBlockType)cacheWithKey:(id)arg1 userID:(id)arg2 cacheOptions:(unsigned long long)arg3 parsing:(CDUnknownBlockType)arg4 transformToValidFormat:(CDUnknownBlockType)arg5 validation:(CDUnknownBlockType)arg6;
- (_Bool)isCacheContentExpiredForKey:(id)arg1 userID:(id)arg2;
- (id)dateForCachedContentWithKey:(id)arg1 userID:(id)arg2;
- (_Bool)lookupCachedDataForKey:(id)arg1 userID:(id)arg2 withParsingBlock:(CDUnknownBlockType)arg3 validate:(CDUnknownBlockType)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (CDUnknownBlockType)conditionWrapperWithError:(id)arg1 checker:(CDUnknownBlockType)arg2;
- (CDUnknownBlockType)wrapperWithConfigurator:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)wrap:(CDUnknownBlockType)arg1 withWrappers:(id)arg2;
- (id)dismissNotificationWithID:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)markAllNotificationAsReadSinceID:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)getNotificationsFromID:(id)arg1 count:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchAuthTokenSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)setSettings:(id)arg1 forUser:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchSettingsForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)removeWebApplicationWithIdFromFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)addWebApplicationWithIdToFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchFavoriteWebApplicationsNotificationForUser:(id)arg1 withSuccess:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchInformationForWebApplicationWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)chartsOfType:(long long)arg1 forGenreID:(unsigned long long)arg2 startingAt:(unsigned long long)arg3 fetchingCount:(unsigned long long)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)chartsGenreSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)fetchAudiobookChapters:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postLogListenEntryDictionary:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postLogListenEntriesDictionaries:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postGlobalLogEntriesDictionaries:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postLogFeedEntriesDictionaries:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postOnboardingLogEntriesDictionaries:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postLyricsLogEntriesDictionaries:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)postGenericLogEntriesDictionaries:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)tempLogWithInfo:(id)arg1;
- (id)logDevice;
- (id)onboardingSendChannelSelection:(id)arg1 maximumNumberOfArtistsInReturn:(int)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)onboardingChannelsRequestWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)sendFeatureFMEvent:(unsigned long long)arg1 forTrack:(id)arg2 inPlaylist:(id)arg3 timeStamp:(double)arg4;
- (id)sendFeatureFMEvent:(unsigned long long)arg1 forTrack:(id)arg2 timeStamp:(double)arg3;
- (id)fetchSponsoredTrackForQueue:(id)arg1 withSuccess:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)familyUpdateChildAccountKidStatus:(_Bool)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)familyDeleteChildAccountWithID:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)familyCreateChildAccountWithBlogname:(id)arg1 gender:(id)arg2 age:(id)arg3 isKid:(_Bool)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)familyGetAccountsWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)updateUserDevice:(id)arg1 deviceSerialID:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)deleteUserDevice:(id)arg1 deviceSerialID:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)setUserDevice:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)getUserDevices:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)switchToNewUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)fallbackToUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)switchToUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)unlinkGoogleAccountWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)unlinkFacebookAccountWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)errorFromFacebookLinkPayload:(id)arg1 facebookUID:(id)arg2;
- (id)relogLinkDeezerAccountToFacebookWithFBAccountID:(id)arg1 FBToken:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)linkDeezerAccountToFacebookWithFBAccountID:(id)arg1 FBToken:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)relogGetARLFromGPlusWithID:(id)arg1 token:(id)arg2 successResponse:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)getARLFromGPlusWithID:(id)arg1 token:(id)arg2 successResponse:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)setNewTracksSeenForPlaylist:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)expiresDateFromURLResponse:(id)arg1;
- (double)cacheControlMaxAgeFromURLResponse:(id)arg1;
- (double)cacheDurationFromURLResponse:(id)arg1;
- (id)user:(id)arg1 stopFollowingFriend:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)user:(id)arg1 startFollowingFriend:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)shareToDeezerFriends:(id)arg1 ofUser:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchCategoriesWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)fetchMediaFromLiveRadio:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)liveRadioWithIdentifier:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchLyricsWithDeezerId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchMoreInformationForPlaylist:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)searchLiveRadiosWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchUsersWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchTracksWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchTalkShowsWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchPlaylistsWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchMixesWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchArtistsWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchChannelsWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchAlbumsWithQuery:(id)arg1 limit:(unsigned long long)arg2 startingIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)searchWithQuery:(id)arg1 type:(id)arg2 limit:(unsigned long long)arg3 startingIndex:(unsigned long long)arg4 parseResult:(CDUnknownBlockType)arg5 success:(CDUnknownBlockType)arg6 failure:(CDUnknownBlockType)arg7;
- (id)fetchSearchTrendingsSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)fetchSuggestionsWithQuery:(id)arg1 limit:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchFriendsListForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchTopTracksForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchLastTracksForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFavoritePodcastsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFavoritePlaylistsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchPlaylistsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFavoriteMixesForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFollowersForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFollowingsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFavoriteAudiobooksForFriend:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)fetchFavoriteArtistsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFavoriteAlbumsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)parseRecentlyPlayedCollections:(id)arg1;
- (id)fetchRecentlyPlayedCollectionsForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchDataForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchInformationForFriend:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchGenreForLang:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchMixesForGenre:(id)arg1 withLimit:(unsigned long long)arg2 startIndex:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchTracksForListeningOrigin:(unsigned long long)arg1 contextID:(id)arg2 startingTrackID:(id)arg3 numberOfTracks:(unsigned long long)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)fetchAllMixesSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)sendUserFeedback:(id)arg1 satisfaction:(id)arg2 type:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchTopFavoritePlaylistsForUserWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchTopFavoriteMixesForUserWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchTopFavoriteArtistsForUserWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchTopFavoriteAlbumsForUserWithId:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchUploadedTracksForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)dislikeTrack:(id)arg1 inContext:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)moveTracksOrder:(id)arg1 inPlaylist:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)removeTracks:(id)arg1 fromPlaylist:(id)arg2 inContext:(id)arg3 forUser:(id)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)addTracks:(id)arg1 toPlaylist:(id)arg2 forUser:(id)arg3 inContext:(id)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)deletePlaylist:(id)arg1 forUser:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)updateImage:(id)arg1 ofPlaylistWithId:(id)arg2 name:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)editPlaylist:(id)arg1 withInfos:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)createPlaylistWithInfos:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFavoriteAudiobookForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)removeArtistFromFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)addArtistToFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchFavoriteArtistsForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)removeAlbumFromFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)addAlbumToFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)removePlaylistFromFavorites:(id)arg1 inContext:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)addPlaylistToFavorites:(id)arg1 inContext:(id)arg2 fromFriend:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)addTalkShowToFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)removeTalkShowFromFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchFavoriteTalkShowsForUser:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchFriendPlaylistsChecksumsForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchPlaylistsChecksumsForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)fetchFriendPlaylistsForUser:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)removeMixFromFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)addMixToFavorites:(id)arg1 inContext:(id)arg2 forUser:(id)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchFavoriteMixesForUser:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (id)removeAudiobookFromFavorites:(id)arg1 inContext:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)addAudiobookToFavorites:(id)arg1 inContext:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)fetchFavoriteAlbumsForUser:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)tracksForAlbum:(id)arg1 forUser:(id)arg2 cacheOptions:(unsigned long long)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)fetchFavoriteWebApplicationsForUser:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)playlistsForUser:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)tracksForPlaylist:(id)arg1 cacheOptions:(unsigned long long)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

