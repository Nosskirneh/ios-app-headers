//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AudioDecoderDelegate-Protocol.h"
#import "DZRChannelSourceProtocol-Protocol.h"
#import "DZRMixableTrackPlayback-Protocol.h"

@class AudioDecoder, AudioOutputChannel, DZRAudioManager, DZRDownloadableObject, NSMutableDictionary, NSString, NSTimer;
@protocol DZRAudioMixing, DZRMixableTrackPlaybackDelegate, DZRQueueableCollection, DZRTrackPlaybackDelegate, OS_dispatch_queue;

@interface DZRAudioTrackController : NSObject <AudioDecoderDelegate, DZRChannelSourceProtocol, DZRMixableTrackPlayback>
{
    _Bool _current;
    _Bool _shouldTrimSilence;
    _Bool _hasNotifiedBufferingSpeedTooWeak;
    float _playbackRate;
    float _sampleRateInverse;
    float _sampleRate;
    float _fastSeekPosition;
    long long _state;
    id <DZRTrackPlaybackDelegate> _playbackDelegate;
    id <DZRMixableTrackPlaybackDelegate> _mixablePlaybackDelegate;
    DZRDownloadableObject *_track;
    double _startingTimePosition;
    double _playbackEndingTime;
    AudioOutputChannel *_channel;
    DZRAudioManager *_audioManager;
    unsigned long long _index;
    AudioDecoder *_decoder;
    id <DZRQueueableCollection> _trackCollection;
    NSObject<OS_dispatch_queue> *_stateQueue;
    double _availableTimeDuration;
    double _totalTimeDuration;
    double _elapsedTimeDuration;
    double _accumulatedPlaybackTime;
    double _elaspedSecondsWithSlowBuffering;
    double _lastTimePausedForBuffering;
    unsigned long long _lastNotifiedAvailableTime;
    unsigned long long _bufferingProgressIntervalBetweenNotifications;
    unsigned long long _lastNotifiedElapsedTime;
    NSTimer *_fastSeekTimer;
    id <DZRAudioMixing> _envelope;
    id <DZRAudioMixing> _duckingEnvelope;
    NSMutableDictionary *_seekUserInfo;
    NSTimer *_waitingForPlaybackTimer;
}

@property(retain, nonatomic) NSTimer *waitingForPlaybackTimer; // @synthesize waitingForPlaybackTimer=_waitingForPlaybackTimer;
@property(retain, nonatomic) NSMutableDictionary *seekUserInfo; // @synthesize seekUserInfo=_seekUserInfo;
@property(retain, nonatomic) id <DZRAudioMixing> duckingEnvelope; // @synthesize duckingEnvelope=_duckingEnvelope;
@property(retain, nonatomic) id <DZRAudioMixing> envelope; // @synthesize envelope=_envelope;
@property(nonatomic) float fastSeekPosition; // @synthesize fastSeekPosition=_fastSeekPosition;
@property(retain, nonatomic) NSTimer *fastSeekTimer; // @synthesize fastSeekTimer=_fastSeekTimer;
@property(nonatomic) unsigned long long lastNotifiedElapsedTime; // @synthesize lastNotifiedElapsedTime=_lastNotifiedElapsedTime;
@property(nonatomic) unsigned long long bufferingProgressIntervalBetweenNotifications; // @synthesize bufferingProgressIntervalBetweenNotifications=_bufferingProgressIntervalBetweenNotifications;
@property(nonatomic) unsigned long long lastNotifiedAvailableTime; // @synthesize lastNotifiedAvailableTime=_lastNotifiedAvailableTime;
@property(nonatomic) _Bool hasNotifiedBufferingSpeedTooWeak; // @synthesize hasNotifiedBufferingSpeedTooWeak=_hasNotifiedBufferingSpeedTooWeak;
@property(nonatomic) double lastTimePausedForBuffering; // @synthesize lastTimePausedForBuffering=_lastTimePausedForBuffering;
@property(nonatomic) double elaspedSecondsWithSlowBuffering; // @synthesize elaspedSecondsWithSlowBuffering=_elaspedSecondsWithSlowBuffering;
@property(nonatomic) double accumulatedPlaybackTime; // @synthesize accumulatedPlaybackTime=_accumulatedPlaybackTime;
@property(nonatomic) double elapsedTimeDuration; // @synthesize elapsedTimeDuration=_elapsedTimeDuration;
@property(nonatomic) double totalTimeDuration; // @synthesize totalTimeDuration=_totalTimeDuration;
@property(nonatomic) double availableTimeDuration; // @synthesize availableTimeDuration=_availableTimeDuration;
@property(nonatomic) float sampleRate; // @synthesize sampleRate=_sampleRate;
@property(nonatomic) float sampleRateInverse; // @synthesize sampleRateInverse=_sampleRateInverse;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *stateQueue; // @synthesize stateQueue=_stateQueue;
@property(nonatomic) _Bool shouldTrimSilence; // @synthesize shouldTrimSilence=_shouldTrimSilence;
@property(retain, nonatomic) id <DZRQueueableCollection> trackCollection; // @synthesize trackCollection=_trackCollection;
@property(retain) AudioDecoder *decoder; // @synthesize decoder=_decoder;
@property(nonatomic) unsigned long long index; // @synthesize index=_index;
@property(nonatomic) __weak DZRAudioManager *audioManager; // @synthesize audioManager=_audioManager;
@property(retain, nonatomic) AudioOutputChannel *channel; // @synthesize channel=_channel;
@property(nonatomic) float playbackRate; // @synthesize playbackRate=_playbackRate;
@property(nonatomic) double playbackEndingTime; // @synthesize playbackEndingTime=_playbackEndingTime;
@property(nonatomic) double startingTimePosition; // @synthesize startingTimePosition=_startingTimePosition;
@property(retain, nonatomic) DZRDownloadableObject *track; // @synthesize track=_track;
@property(nonatomic, getter=isCurrent) _Bool current; // @synthesize current=_current;
@property(nonatomic) id <DZRMixableTrackPlaybackDelegate> mixablePlaybackDelegate; // @synthesize mixablePlaybackDelegate=_mixablePlaybackDelegate;
@property(nonatomic) id <DZRTrackPlaybackDelegate> playbackDelegate; // @synthesize playbackDelegate=_playbackDelegate;
- (void).cxx_destruct;
- (void)audioDecoderDidDecode:(id)arg1 moreFrames:(unsigned long long)arg2 toFramePosition:(unsigned long long)arg3;
- (void)audioDecoderDidSeek:(id)arg1 fromFrame:(unsigned long long)arg2 toFrame:(unsigned long long)arg3 sampleRate:(float)arg4;
- (void)audioDecoderDidPause:(id)arg1;
- (void)audioDecoderCanDecodeToTheEnd:(id)arg1 totalFrames:(unsigned long long)arg2 sampleRate:(float)arg3;
- (void)audioDecoderCanDecodeFurther:(id)arg1 state:(int)arg2 availableFrames:(unsigned long long)arg3 totalFrames:(unsigned long long)arg4 sampleRate:(float)arg5;
- (void)audioDecoderDidFinishToDecode:(id)arg1;
- (void)audioDecoderWillStartBuffering:(id)arg1;
- (void)audioDecoderFailedToDecode:(id)arg1 state:(int)arg2 error:(id)arg3;
- (void)notifyWillStartPlaybackReleaseWithDuration:(double)arg1;
- (void)notifyDidFinishPlaybackAttack;
- (void)notifyDidFinishPlayback;
- (void)notifyDidFinishBuffering;
- (void)notifyStreamQualityDidChangeFromQualityLevel:(long long)arg1 toQualityLevel:(long long)arg2;
- (void)notifyWillStartBuffering;
- (void)notifyDidSeekFromTime:(double)arg1;
- (void)notifyAvailableTimeDidChange;
- (void)notifyTotalTimeDidChange;
- (void)notifyElapsedTimeDidChange;
- (void)notifyControllerDidFailWithError:(id)arg1;
- (void)notifyStateDidChange;
- (void)monitorBufferingProgress;
- (double)timeDurationBeforeSlowBufferingWarning;
- (void)stopDucking;
- (void)startDuckingWithTransitionDuration:(double)arg1;
- (void)releasePlaybackWithAdjustedDuration:(double)arg1;
- (void)releasePlayback;
- (void)setPlaybackReleaseDuration:(double)arg1;
- (void)setPlaybackAttackDuration:(double)arg1;
- (void)applyEnvelopeToBuffer:(struct AudioBufferList *)arg1 withFrames:(unsigned int)arg2;
- (void)stopSeekingForward;
- (void)fastForward;
- (void)startSeekingForward;
- (void)stopSeekingBackward;
- (void)fastBackward;
- (void)startSeekingBackward;
- (void)rewindByRepeating:(_Bool)arg1 userInfo:(id)arg2;
- (void)seekToProgress:(float)arg1 userInfo:(id)arg2;
- (void)seekToProgress:(float)arg1;
- (unsigned int)readAudioIntoBuffer:(struct AudioBufferList *)arg1 frames:(unsigned int)arg2;
- (_Bool)canPausePlaybackInternal;
- (_Bool)canPausePlayback;
- (_Bool)canStartPlayback;
- (void)loadTrack:(id)arg1 ofCollection:(id)arg2 shouldTrimSilence:(_Bool)arg3 startingTimePosition:(double)arg4;
- (void)stop;
- (void)pause:(_Bool)arg1;
- (void)play;
- (void)waitingForPlaybackTimerDidTrigger:(id)arg1;
- (void)updateWaitingForPlayback;
- (_Bool)isStalled;
@property(nonatomic) long long state; // @synthesize state=_state;
- (void)prepareToPlayTrack:(id)arg1 ofCollection:(id)arg2 shouldTrimSilence:(_Bool)arg3 startingTimePosition:(double)arg4 userInfo:(id)arg5;
- (void)prepareToPlayTrack:(id)arg1 ofCollection:(id)arg2 shouldTrimSilence:(_Bool)arg3 startingTimePosition:(double)arg4;
- (void)prepareToPlayTrack:(id)arg1 ofCollection:(id)arg2;
- (double)remainingDuration;
- (double)elapsedDuration;
- (double)availableDuration;
- (double)totalDuration;
- (long long)streamQuality;
- (void)dealloc;
- (id)initWithAudioManager:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

