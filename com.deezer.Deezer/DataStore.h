//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class DataStoreInfos, NSMutableDictionary;
@protocol OS_dispatch_queue;

@interface DataStore : NSObject
{
    DataStoreInfos *dataStoreInfos;
    NSMutableDictionary *memoryCache;
    NSMutableDictionary *oldMemoryCache;
    NSObject<OS_dispatch_queue> *_workingQueue;
    NSObject<OS_dispatch_queue> *_playListsQueue;
    NSObject<OS_dispatch_queue> *_tracksQueue;
    NSObject<OS_dispatch_queue> *_itemsQueue;
    NSObject<OS_dispatch_queue> *_persistenceQueue;
    NSObject<OS_dispatch_queue> *_isrcQueue;
}

+ (id)defaultDataStore;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *isrcQueue; // @synthesize isrcQueue=_isrcQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *persistenceQueue; // @synthesize persistenceQueue=_persistenceQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *itemsQueue; // @synthesize itemsQueue=_itemsQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *tracksQueue; // @synthesize tracksQueue=_tracksQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *playListsQueue; // @synthesize playListsQueue=_playListsQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *workingQueue; // @synthesize workingQueue=_workingQueue;
@property(readonly, nonatomic) DataStoreInfos *dataStoreInfos; // @synthesize dataStoreInfos;
- (void).cxx_destruct;
- (id)databasePath;
- (void)closeDatabase;
- (void)openDatabase;
- (id)init;
- (_Bool)insertIsrcs:(id)arg1 forUserId:(id)arg2;
- (_Bool)createDBIsrcWithIsrc:(id)arg1 andUserId:(id)arg2;
- (void)removeAllPurchasedTracksISRC;
- (id)getAllPurchasedTracksISRCForUserId:(id)arg1;
- (int)nbPurchasedTracksForUserId:(id)arg1;
- (void)createTableISRC:(struct sqlite3 *)arg1;
- (void)removeAllDBPurchasedISRCSForAllUsers;
- (void)removeAllDBTracksAndDBPlaylistsForAllUsers;
- (void)removeAllDBTracksAndDBPlaylistsForUser:(id)arg1;
- (void)fillMemoryCache;
- (id)memoryCacheForUserId:(id)arg1;
- (void)clean;
- (id)createOrUpdateItemForRelativePath:(id)arg1 size:(unsigned long long)arg2 type:(unsigned long long)arg3 temporary:(_Bool)arg4 groupId:(id)arg5 user:(id)arg6;
- (id)itemForRelativePath:(id)arg1 userId:(id)arg2;
- (id)itemsForRelativePath:(id)arg1 userId:(id)arg2;
- (id)itemForRelativePathWithoutUserId:(id)arg1;
- (id)allTemporaryItemsWithType:(int)arg1;
- (void)removeAllTemporaryItemsWithType:(int)arg1;
- (void)removeItems:(id)arg1;
- (void)saveItem:(id)arg1;
- (void)item:(id)arg1 changedSizeFrom:(unsigned long long)arg2 to:(unsigned long long)arg3;
- (id)createDBPlaylistWithIdentifier:(id)arg1 user:(id)arg2;
- (id)createDBTrackWithIdentifier:(id)arg1 playlist:(id)arg2 user:(id)arg3;
- (void)removeDbTrack:(id)arg1;
- (void)removeDbPlaylist:(id)arg1;
- (void)removePersistentObject:(id)arg1;
- (void)savePresistentObject:(id)arg1;
- (void)savePersistentObjects:(id)arg1;
- (id)itemsWithGroupId:(id)arg1 userId:(id)arg2;
- (void)updateItemsWithGroupId:(id)arg1 userId:(id)arg2 setTemporary:(_Bool)arg3;
- (void)updateItemsWithIdentifier:(id)arg1 userId:(id)arg2 setTemporary:(_Bool)arg3;
- (id)findItemsWithType:(int)arg1 user:(id)arg2;
- (void)removeAllItemsWithTypeForAllUsers:(int)arg1;
- (void)removeAllItemsWithType:(int)arg1 user:(id)arg2;
- (int)nbTracksWithImageId:(id)arg1 userId:(id)arg2;
- (id)findTracksForPlaylist:(id)arg1;
- (id)findTracksWithIdentifier:(id)arg1 userId:(id)arg2;
- (id)findTrackWithIdentifier:(id)arg1 forPlaylist:(id)arg2;
- (id)findPlaylistWithIdentifier:(id)arg1 user:(id)arg2;
- (id)findPlaylistWithIdentifier:(id)arg1 userId:(id)arg2;
- (id)allDBPlaylistsForUser:(id)arg1;
- (id)allDBTracksForUserId:(id)arg1;
- (unsigned long long)sizeForDownloadedTrack:(id)arg1 user:(id)arg2;
- (unsigned long long)totalItemsSize;
- (id)allDBPlaylists;

@end

