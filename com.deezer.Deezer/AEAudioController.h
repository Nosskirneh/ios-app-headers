//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class ABFilterPort, ABReceiverPort, ABSenderPort, AEAudioControllerMessagePollThread, AEBlockChannel, NSArray, NSError, NSString, NSTimer;

@interface AEAudioController : NSObject
{
    struct OpaqueAUGraph *_audioGraph;
    int _ioNode;
    struct OpaqueAudioComponentInstance *_ioAudioUnit;
    _Bool _started;
    _Bool _interrupted;
    _Bool _inputEnabled;
    _Bool _hardwareInputAvailable;
    _Bool _hasSystemError;
    struct _channel_group_t *_topGroup;
    struct __channel_t *_topChannel;
    struct __callback_table_t _timingCallbacks;
    struct __input_callback_table_t {
        struct __callback_table_t _field1;
        void *_field2;
        struct AudioStreamBasicDescription _field3;
        struct AudioBufferList *_field4;
        struct OpaqueAudioConverter *_field5;
    } *_inputCallbacks;
    int _inputCallbackCount;
    struct AudioStreamBasicDescription _rawInputAudioDescription;
    struct AudioBufferList *_inputAudioBufferList;
    CDStruct_326dc85f _realtimeThreadMessageBuffer;
    CDStruct_326dc85f _mainThreadMessageBuffer;
    AEAudioControllerMessagePollThread *_pollThread;
    int _pendingResponses;
    struct __audio_level_monitor_t _inputLevelMonitorData;
    _Bool _usingAudiobusInput;
    struct AudioBufferList *_audiobusMonitorBuffer;
    _Bool _allowMixingWithOtherApps;
    _Bool _useMeasurementMode;
    _Bool _avoidMeasurementModeForBuiltInMic;
    _Bool _muteOutput;
    _Bool _enableBluetoothInput;
    _Bool _voiceProcessingEnabled;
    _Bool _voiceProcessingOnlyForSpeakerAndMicrophone;
    _Bool _playingThroughDeviceSpeaker;
    _Bool _recordingThroughDeviceMicrophone;
    _Bool _audioInputAvailable;
    _Bool _shouldPreventFromTogglingAudioSessionActivation;
    float _masterOutputVolume;
    int _inputMode;
    int _numberOfInputChannels;
    NSString *_audioSessionCategory;
    double _preferredBufferDuration;
    double _currentBufferDuration;
    NSError *_lastError;
    NSTimer *_housekeepingTimer;
    ABReceiverPort *_audiobusReceiverPort;
    ABFilterPort *_audiobusFilterPort;
    AEBlockChannel *_audiobusMonitorChannel;
    struct AudioStreamBasicDescription _audioDescription;
}

+ (_Bool)voiceProcessingAvailable;
+ (struct AudioStreamBasicDescription)nonInterleavedFloatStereoAudioDescription;
+ (struct AudioStreamBasicDescription)nonInterleaved16BitStereoAudioDescription;
+ (struct AudioStreamBasicDescription)interleaved16BitStereoAudioDescription;
+ (void)initialize;
@property(retain, nonatomic) AEBlockChannel *audiobusMonitorChannel; // @synthesize audiobusMonitorChannel=_audiobusMonitorChannel;
@property(retain, nonatomic) ABFilterPort *audiobusFilterPort; // @synthesize audiobusFilterPort=_audiobusFilterPort;
@property(retain, nonatomic) ABReceiverPort *audiobusReceiverPort; // @synthesize audiobusReceiverPort=_audiobusReceiverPort;
@property(retain, nonatomic) NSTimer *housekeepingTimer; // @synthesize housekeepingTimer=_housekeepingTimer;
@property(retain, nonatomic) NSError *lastError; // @synthesize lastError=_lastError;
@property(nonatomic) _Bool shouldPreventFromTogglingAudioSessionActivation; // @synthesize shouldPreventFromTogglingAudioSessionActivation=_shouldPreventFromTogglingAudioSessionActivation;
@property(readonly, nonatomic) struct OpaqueAUGraph *audioGraph; // @synthesize audioGraph=_audioGraph;
@property(readonly, nonatomic) struct AudioStreamBasicDescription audioDescription; // @synthesize audioDescription=_audioDescription;
@property(readonly, nonatomic) int numberOfInputChannels; // @synthesize numberOfInputChannels=_numberOfInputChannels;
@property(readonly, nonatomic) _Bool audioInputAvailable; // @synthesize audioInputAvailable=_audioInputAvailable;
@property(readonly, nonatomic) _Bool recordingThroughDeviceMicrophone; // @synthesize recordingThroughDeviceMicrophone=_recordingThroughDeviceMicrophone;
@property(readonly, nonatomic) _Bool playingThroughDeviceSpeaker; // @synthesize playingThroughDeviceSpeaker=_playingThroughDeviceSpeaker;
@property(nonatomic) double currentBufferDuration; // @synthesize currentBufferDuration=_currentBufferDuration;
@property(nonatomic) double preferredBufferDuration; // @synthesize preferredBufferDuration=_preferredBufferDuration;
@property(nonatomic) int inputMode; // @synthesize inputMode=_inputMode;
@property(nonatomic) _Bool voiceProcessingOnlyForSpeakerAndMicrophone; // @synthesize voiceProcessingOnlyForSpeakerAndMicrophone=_voiceProcessingOnlyForSpeakerAndMicrophone;
@property(nonatomic) _Bool voiceProcessingEnabled; // @synthesize voiceProcessingEnabled=_voiceProcessingEnabled;
@property(nonatomic) _Bool enableBluetoothInput; // @synthesize enableBluetoothInput=_enableBluetoothInput;
@property(nonatomic) float masterOutputVolume; // @synthesize masterOutputVolume=_masterOutputVolume;
@property(nonatomic) _Bool muteOutput; // @synthesize muteOutput=_muteOutput;
@property(nonatomic) _Bool avoidMeasurementModeForBuiltInMic; // @synthesize avoidMeasurementModeForBuiltInMic=_avoidMeasurementModeForBuiltInMic;
@property(nonatomic) _Bool useMeasurementMode; // @synthesize useMeasurementMode=_useMeasurementMode;
@property(nonatomic) _Bool allowMixingWithOtherApps; // @synthesize allowMixingWithOtherApps=_allowMixingWithOtherApps;
@property(readonly, nonatomic) struct OpaqueAudioComponentInstance *audioUnit; // @synthesize audioUnit=_ioAudioUnit;
- (void).cxx_destruct;
- (id)stringFromRouteDescription:(id)arg1;
- (void)housekeeping;
- (_Bool)hasAudiobusSenderForUpstreamChannels:(struct __channel_t *)arg1;
- (id)associatedObjectsWithFlags:(unsigned char)arg1 forChannelGroup:(struct _channel_group_t *)arg2;
- (id)associatedObjectsWithFlags:(unsigned char)arg1 forChannel:(id)arg2;
- (id)associatedObjectsWithFlags:(unsigned char)arg1;
- (_Bool)removeCallback:(void *)arg1 userInfo:(void *)arg2 fromChannelGroup:(struct _channel_group_t *)arg3;
- (_Bool)removeCallback:(void *)arg1 userInfo:(void *)arg2 fromChannel:(id)arg3;
- (_Bool)addCallback:(void *)arg1 userInfo:(void *)arg2 flags:(unsigned char)arg3 forInputChannels:(id)arg4;
- (_Bool)addCallback:(void *)arg1 userInfo:(void *)arg2 flags:(unsigned char)arg3 forChannelGroup:(struct _channel_group_t *)arg4;
- (_Bool)addCallback:(void *)arg1 userInfo:(void *)arg2 flags:(unsigned char)arg3 forChannel:(id)arg4;
- (id)associatedObjectsFromTable:(struct __callback_table_t *)arg1 matchingFlag:(unsigned char)arg2;
- (_Bool)attemptRecoveryFromSystemError:(id *)arg1;
- (_Bool)usingVPIO;
- (void)markGroupTorndown:(struct _channel_group_t *)arg1;
- (void)releaseResourcesForGroup:(struct _channel_group_t *)arg1;
- (void)releaseResourcesForChannel:(struct __channel_t *)arg1;
- (struct _channel_group_t *)searchForGroupContainingChannelMatchingPtr:(void *)arg1 userInfo:(void *)arg2 index:(int *)arg3;
- (struct _channel_group_t *)searchForGroupContainingChannelMatchingPtr:(void *)arg1 userInfo:(void *)arg2 withinGroup:(struct _channel_group_t *)arg3 index:(int *)arg4;
- (void)gatherChannelsFromGroup:(struct _channel_group_t *)arg1 intoArray:(id)arg2;
- (void)configureChannelsInRange:(struct _NSRange)arg1 forGroup:(struct _channel_group_t *)arg2;
- (_Bool)updateInputDeviceStatus;
- (_Bool)mustUpdateVoiceProcessingSettings;
- (int)updateGraph;
- (void)teardown;
- (void)configureAudioUnit;
- (void)replaceIONode;
- (_Bool)setup;
- (_Bool)initAudioSession;
- (void)audioRouteChangeNotification:(id)arg1;
- (void)interruptionNotification:(id)arg1;
- (void)audiobusConnectionsChanged:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setAudiobusSenderPort:(id)arg1 forChannelGroup:(struct _channel_group_t *)arg2;
- (void)setAudiobusSenderPort:(id)arg1 forChannel:(id)arg2;
- (void)setAudiobusSenderPort:(id)arg1 forChannelElement:(struct __channel_t *)arg2;
@property(retain, nonatomic) ABSenderPort *audiobusSenderPort; // @dynamic audiobusSenderPort;
@property(readonly, nonatomic) double outputLatency;
@property(readonly, nonatomic) double inputLatency;
@property(retain, nonatomic) NSArray *inputChannelSelection; // @dynamic inputChannelSelection;
@property(nonatomic) float inputGain; // @dynamic inputGain;
@property(readonly, nonatomic) struct AudioStreamBasicDescription inputAudioDescription; // @dynamic inputAudioDescription;
@property(readonly, nonatomic) _Bool inputGainAvailable; // @dynamic inputGainAvailable;
@property(readonly, nonatomic) _Bool running; // @dynamic running;
@property(nonatomic) NSString *audioSessionCategory; // @synthesize audioSessionCategory=_audioSessionCategory;
- (void)inputAveragePowerLevel:(float *)arg1 peakHoldLevel:(float *)arg2;
- (void)averagePowerLevel:(float *)arg1 peakHoldLevel:(float *)arg2 forGroup:(struct _channel_group_t *)arg3;
- (void)outputAveragePowerLevel:(float *)arg1 peakHoldLevel:(float *)arg2;
- (void)performSynchronousMessageExchangeWithBlock:(CDUnknownBlockType)arg1;
- (void)performAsynchronousMessageExchangeWithBlock:(CDUnknownBlockType)arg1 responseBlock:(CDUnknownBlockType)arg2;
- (void)performAsynchronousMessageExchangeWithBlock:(CDUnknownBlockType)arg1 responseBlock:(CDUnknownBlockType)arg2 sourceThread:(struct _opaque_pthread_t *)arg3;
- (void)pollForMessageResponses;
- (id)timingReceivers;
- (void)removeTimingReceiver:(id)arg1;
- (void)addTimingReceiver:(id)arg1;
- (id)inputReceivers;
- (void)removeInputReceiver:(id)arg1;
- (void)addInputReceiver:(id)arg1 forChannels:(id)arg2;
- (void)addInputReceiver:(id)arg1;
- (id)outputReceiversForChannelGroup:(struct _channel_group_t *)arg1;
- (id)outputReceiversForChannel:(id)arg1;
- (id)outputReceivers;
- (void)removeOutputReceiver:(id)arg1 fromChannelGroup:(struct _channel_group_t *)arg2;
- (void)removeOutputReceiver:(id)arg1 fromChannel:(id)arg2;
- (void)removeOutputReceiver:(id)arg1;
- (void)addOutputReceiver:(id)arg1 forChannelGroup:(struct _channel_group_t *)arg2;
- (void)addOutputReceiver:(id)arg1 forChannel:(id)arg2;
- (void)addOutputReceiver:(id)arg1;
- (id)inputFilters;
- (id)filtersForChannelGroup:(struct _channel_group_t *)arg1;
- (id)filtersForChannel:(id)arg1;
- (id)filters;
- (void)removeInputFilter:(id)arg1;
- (void)removeFilter:(id)arg1 fromChannelGroup:(struct _channel_group_t *)arg2;
- (void)removeFilter:(id)arg1 fromChannel:(id)arg2;
- (void)removeFilter:(id)arg1;
- (void)addInputFilter:(id)arg1 forChannels:(id)arg2;
- (void)addInputFilter:(id)arg1;
- (void)addFilter:(id)arg1 toChannelGroup:(struct _channel_group_t *)arg2;
- (void)addFilter:(id)arg1 toChannel:(id)arg2;
- (void)addFilter:(id)arg1;
- (_Bool)channelGroupIsMuted:(struct _channel_group_t *)arg1;
- (void)setMuted:(_Bool)arg1 forChannelGroup:(struct _channel_group_t *)arg2;
- (float)panForChannelGroup:(struct _channel_group_t *)arg1;
- (void)setPan:(float)arg1 forChannelGroup:(struct _channel_group_t *)arg2;
- (float)volumeForChannelGroup:(struct _channel_group_t *)arg1;
- (void)setVolume:(float)arg1 forChannelGroup:(struct _channel_group_t *)arg2;
- (id)channelGroupsInChannelGroup:(struct _channel_group_t *)arg1;
- (id)topLevelChannelGroups;
- (struct _channel_group_t *)createChannelGroupWithinChannelGroup:(struct _channel_group_t *)arg1;
- (struct _channel_group_t *)createChannelGroup;
- (id)channelsInChannelGroup:(struct _channel_group_t *)arg1;
- (id)channels;
- (void)removeChannelGroup:(struct _channel_group_t *)arg1;
- (void)removeChannels:(id)arg1 fromChannelGroup:(struct _channel_group_t *)arg2;
- (void)removeChannels:(id)arg1;
- (void)addChannels:(id)arg1 toChannelGroup:(struct _channel_group_t *)arg2;
- (void)addChannels:(id)arg1;
- (void)stopInternal;
- (void)stop;
- (_Bool)start:(id *)arg1 recoveringFromErrors:(_Bool)arg2;
- (_Bool)start:(id *)arg1;
- (void)dealloc;
- (id)initWithAudioDescription:(struct AudioStreamBasicDescription)arg1 inputEnabled:(_Bool)arg2 useVoiceProcessing:(_Bool)arg3;
- (id)initWithAudioDescription:(struct AudioStreamBasicDescription)arg1 inputEnabled:(_Bool)arg2;
- (id)initWithAudioDescription:(struct AudioStreamBasicDescription)arg1;

@end

