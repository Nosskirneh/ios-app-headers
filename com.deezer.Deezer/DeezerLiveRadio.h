//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "DZRDeeplinkableObject-Protocol.h"
#import "DZRIllustrable-Protocol.h"
#import "DZRItemCellAdditions-Protocol.h"
#import "DZRLibraryItemTableViewDisplayDelegate-Protocol.h"
#import "DZRLoggableMedia-Protocol.h"
#import "DZRPlayableExternalObject-Protocol.h"
#import "DZRProfileDynamicItem-Protocol.h"
#import "NSCoding-Protocol.h"

@class DZRLiveRadioAudioFormat, ImageDownloader, MPMediaItemArtwork, NSDictionary, NSString, NSURL;

@interface DeezerLiveRadio : NSObject <DZRItemCellAdditions, DZRProfileDynamicItem, DZRLibraryItemTableViewDisplayDelegate, NSCoding, DZRPlayableExternalObject, DZRLoggableMedia, DZRDeeplinkableObject, DZRIllustrable>
{
    NSURL *_externalDownloadURL;
    long long _preferredQualityOfCachedBestAudioFormat;
    NSURL *_coverURL30_30;
    NSURL *_coverURL50_50;
    NSURL *_coverURL80_80;
    NSURL *_coverURL220_220;
    NSURL *_coverURL340_340;
    NSURL *_coverURL750_750;
    NSURL *_coverURL800_800;
    NSString *_uniqueID;
    unsigned long long _uniqueIDHash;
    NSDictionary *_data;
    MPMediaItemArtwork *_nowPlayingArtwork;
    ImageDownloader *_nowPlayingArtworkDownloader;
    DZRLiveRadioAudioFormat *_bestAudioFormat;
}

+ (id)findBestAudioFormat:(id)arg1 forQuality:(long long)arg2;
+ (id)mediaType;
+ (id)deezerLiveRadioWithID:(id)arg1;
+ (id)deezerLiveRadioFromDictionary:(id)arg1;
+ (void)registerToTableView:(id)arg1;
@property(retain, nonatomic) DZRLiveRadioAudioFormat *bestAudioFormat; // @synthesize bestAudioFormat=_bestAudioFormat;
@property(retain, nonatomic) ImageDownloader *nowPlayingArtworkDownloader; // @synthesize nowPlayingArtworkDownloader=_nowPlayingArtworkDownloader;
@property(retain, nonatomic) MPMediaItemArtwork *nowPlayingArtwork; // @synthesize nowPlayingArtwork=_nowPlayingArtwork;
@property(retain, nonatomic) NSDictionary *data; // @synthesize data=_data;
@property(nonatomic) unsigned long long uniqueIDHash; // @synthesize uniqueIDHash=_uniqueIDHash;
@property(retain, nonatomic) NSString *uniqueID; // @synthesize uniqueID=_uniqueID;
@property(readonly, nonatomic) NSURL *coverURL800_800; // @synthesize coverURL800_800=_coverURL800_800;
@property(readonly, nonatomic) NSURL *coverURL750_750; // @synthesize coverURL750_750=_coverURL750_750;
@property(readonly, nonatomic) NSURL *coverURL340_340; // @synthesize coverURL340_340=_coverURL340_340;
@property(readonly, nonatomic) NSURL *coverURL220_220; // @synthesize coverURL220_220=_coverURL220_220;
@property(readonly, nonatomic) NSURL *coverURL80_80; // @synthesize coverURL80_80=_coverURL80_80;
@property(readonly, nonatomic) NSURL *coverURL50_50; // @synthesize coverURL50_50=_coverURL50_50;
@property(readonly, nonatomic) NSURL *coverURL30_30; // @synthesize coverURL30_30=_coverURL30_30;
- (void).cxx_destruct;
- (_Bool)isMp3Perso;
- (id)illustrations;
@property(readonly, nonatomic) NSURL *coverUrl;
- (_Bool)hasLyrics;
- (id)albumName;
- (id)album;
- (id)name;
- (id)deezerId;
- (id)deeplink;
- (id)currentTrackUpdater;
- (_Bool)isFingerprinted;
- (long long)fileFormat;
- (id)externalDownloadURL;
- (id)sources;
- (long long)playableType;
- (id)domain;
- (id)globalID;
- (id)objectID;
- (id)nowPlayingPlaceholder;
- (void)fetchNowPlayingArtwork;
- (void)cancelFetchingNowPlayingArtwork;
- (void)cancelDownloadOfCoverImageForOffline;
- (void)downloadCoverImageForOffline;
- (unsigned long long)artworkCoverType;
@property(readonly, nonatomic) NSString *coverSeed;
- (unsigned long long)expectedContentSizeForQuality:(long long)arg1;
- (id)contentMIMETypeForQuality:(long long)arg1;
- (long long)fileFormatForQuality:(long long)arg1;
- (long long)availableQualityForRequestedQuality:(long long)arg1;
- (id)downloadableForPreview;
- (id)downloadableWithQualityLevel:(long long)arg1 canBeUsedOffline:(_Bool)arg2;
- (id)target;
- (_Bool)allowsAds;
- (double)resumePosition;
- (void)overrideObjectIDForOriginalPlayable:(id)arg1;
- (id)objectIDForOriginalPlayable;
- (id)baseURLFormat;
- (_Bool)hasValidPlaybackProvisioning;
- (_Bool)isQueueListEditable;
- (_Bool)canBeQueued;
- (_Bool)canPlayPreview;
- (unsigned long long)persistentID;
- (id)lastDeliveryRevision;
- (id)sourceContentHash;
- (id)collectionID;
- (id)artistID;
- (double)previewDuration;
- (double)announcedFullDuration;
- (id)artistName;
- (id)liveRadioDescription;
- (id)title;
- (id)logPayload;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1;
- (long long)listeningState;
- (unsigned long long)dzrSearchResultsDirectPlayListeningOrigin;
- (id)recentlyPlayedItemInSection:(id)arg1 atIndex:(long long)arg2;
- (id)itemIDForBrowsableWithId:(id)arg1 type:(id)arg2 inSection:(id)arg3 atIndex:(long long)arg4;
- (long long)dzrDynamicPageInformationContextMenuItemType;
- (unsigned long long)dzrDynamicPageInformationlisteningContextOrigin;
- (id)cellForTableView:(id)arg1 forIndexPath:(id)arg2 withStyle:(unsigned long long)arg3 delegate:(id)arg4;
- (id)dzrSuggestLogID;
- (unsigned long long)dzrSuggestDirectPlayListeningOrigin;
- (long long)dzrSuggestGetSearchResultType;
- (long long)dzrSuggestGetContextMenuType;
- (void)checkIfPossibleAndPlayLiveStream:(id)arg1;
- (void)dzrSuggestCellTouchedAtIndexPath:(id)arg1 forController:(id)arg2;
- (id)dzrSuggestCellForController:(id)arg1 forIndexPath:(id)arg2 withStyle:(unsigned long long)arg3;
- (void)playLiveStream;
- (_Bool)canLikeOrAddToPlaylist;
- (_Bool)isPlayingUnknownExternalObject;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;

@end

