//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AVAudioPlayerDelegate-Protocol.h"
#import "EqualizerDelegate-Protocol.h"
#import "STKAudioPlayerDelegate-Protocol.h"
#import "SaavnAudioEngineDelegate-Protocol.h"

@class AppDelegate, ChromecastManager, EqualizerManager, NSDictionary, NSMutableArray, NSString, NSThread, NSTimer, STKAudioPlayer, STKAutoRecoveringHTTPDataSource, SaavnAdsSTKdelegate, SaavnAudioEngine, SaavnStreamerSecond;
@protocol OS_dispatch_queue;

@interface SaavnStreamer : NSObject <AVAudioPlayerDelegate, STKAudioPlayerDelegate, SaavnAudioEngineDelegate, EqualizerDelegate>
{
    long long audioQualityBitrate;
    NSString *currentlyPlayingSongUrl;
    NSString *currentlyPlayingAdsUrl;
    NSTimer *progressTimer;
    NSTimer *reportPlaybackProgressTimer;
    NSTimer *adsProgressTimer;
    NSThread *timerThread;
    _Bool timerStopPending;
    NSThread *adsTimerThread;
    AppDelegate *appDelegate;
    _Bool playerSeeked;
    NSString *currentPlayingSongPid;
    _Bool isFinishing;
    _Bool songStored;
    STKAudioPlayer *stkStreamer;
    STKAudioPlayer *stkAdsStreamer;
    STKAudioPlayer *stkStreamerSecond;
    unsigned long long bgTaskId;
    NSDictionary *songData;
    id delegate;
    _Bool fbUpdatePosted;
    long long retryCount;
    NSString *audioAdUrl;
    _Bool audioAdPlaying;
    _Bool showingMidrollAd;
    _Bool paintMidrollAds;
    int globalAudioAdState;
    _Bool videoAdPlaying;
    NSString *videoAdUrl;
    int crossfadeDuration;
    int crossfadeGainChange;
    double gainStep;
    _Bool crossFadeEnabled;
    NSDictionary *nextFetchedSong;
    _Bool shouldFetchNextSong;
    SaavnAudioEngine *audioEngine;
    _Bool avAudioPlayerLoading;
    _Bool avAudioPlayerLoadedOnce;
    _Bool currentlyPlayingCachedSongDeleted;
    _Bool skipNextAdsCheck;
    NSObject<OS_dispatch_queue> *avAudioBackgroundQueue;
    _Bool lastMediaMusicPlus;
    _Bool avFakeBuffeWhileDecrypting;
    _Bool partialEnc;
    _Bool reloadFromConnectionLost;
    int previousPlayerState;
    long long interruptionType;
    EqualizerManager *eqManager;
    ChromecastManager *castManager;
    SaavnAdsSTKdelegate *adsDelegate;
    SaavnStreamerSecond *secondStreamerDelegate;
    _Bool mediaObjectUpdating;
    NSString *mediaObjectID;
    _Bool listening;
    _Bool playedFirstAdbreak;
    _Bool crossFadeInProgress;
    long long currentCrossFadeType;
    double lastAdBreakTimestamp;
    float gainDelta;
    NSMutableArray *adBreaks;
    NSMutableArray *skippedAdBreaks;
    NSMutableArray *stkStreamerSecondGainValues;
    STKAutoRecoveringHTTPDataSource *currentdatasource;
    STKAutoRecoveringHTTPDataSource *pendingdatasource;
    _Bool jioTunePreviewPlaying;
}

+ (id)getInstance;
@property(nonatomic) _Bool jioTunePreviewPlaying; // @synthesize jioTunePreviewPlaying;
@property(nonatomic) _Bool videoAdPlaying; // @synthesize videoAdPlaying;
@property(retain, nonatomic) NSString *videoAdUrl; // @synthesize videoAdUrl;
@property(nonatomic) _Bool mediaObjectUpdating; // @synthesize mediaObjectUpdating;
@property(retain, nonatomic) NSString *mediaObjectID; // @synthesize mediaObjectID;
@property int globalAudioAdState; // @synthesize globalAudioAdState;
@property(nonatomic) _Bool showingMidrollAd; // @synthesize showingMidrollAd;
@property(nonatomic) long long audioQualityBitrate; // @synthesize audioQualityBitrate;
@property(nonatomic) _Bool audioAdPlaying; // @synthesize audioAdPlaying;
@property(retain, nonatomic) NSString *audioAdUrl; // @synthesize audioAdUrl;
- (void).cxx_destruct;
- (void)clearPrefetchedSongIfAny;
- (void)fetchNextSong:(id)arg1 currentSong:(id)arg2;
- (void)decryptAndCreateNextSongURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)removeLastPlayedCachedSong:(id)arg1;
- (void)handleIMAAdsError:(id)arg1;
- (void)handleIMAAdsFinished:(id)arg1;
- (void)handleIMAAdsPlay:(id)arg1 withType:(id)arg2;
- (void)doNothing:(id)arg1;
- (void)unsubscribeFromRemoteControlEvents;
- (void)previousCommand:(id)arg1;
- (void)nextCommand:(id)arg1;
- (void)playPauseCommand:(id)arg1;
- (void)stopCommand:(id)arg1;
- (void)pauseCommand:(id)arg1;
- (void)playCommand:(id)arg1;
- (long long)changedThumbSliderOnLockScreen:(id)arg1;
- (void)setupRemoteControlEvents;
- (void)handleInterruption:(id)arg1;
- (void)routeChanged:(id)arg1;
- (void)crossfadeStateChanged:(id)arg1;
- (void)listenersOff;
- (void)listenersOn;
- (void)setupAudioSession;
- (void)dealloc;
- (void)setOpenSlotMediaTypeMPlus;
- (void)adsAudioPlayer:(id)arg1 didCancelQueuedItems:(id)arg2;
- (void)adsAudioPlayer:(id)arg1 logInfo:(id)arg2;
- (void)adsAudioPlayer:(id)arg1 unexpectedError:(int)arg2;
- (void)adsAudioPlayer:(id)arg1 didFinishPlayingQueueItemId:(id)arg2 withReason:(int)arg3 andProgress:(double)arg4 andDuration:(double)arg5;
- (void)adsAudioPlayer:(id)arg1 stateChanged:(int)arg2 previousState:(int)arg3;
- (void)adsAudioPlayer:(id)arg1 didFinishBufferingSourceWithQueueItemId:(id)arg2;
- (void)adsAudioPlayer:(id)arg1 didStartPlayingQueueItemId:(id)arg2;
- (void)SaavnStreamerSecond:(id)arg1 didCancelQueuedItems:(id)arg2;
- (void)SaavnStreamerSecond:(id)arg1 logInfo:(id)arg2;
- (void)SaavnStreamerSecond:(id)arg1 unexpectedError:(int)arg2;
- (void)SaavnStreamerSecond:(id)arg1 didFinishPlayingQueueItemId:(id)arg2 withReason:(int)arg3 andProgress:(double)arg4 andDuration:(double)arg5;
- (void)SaavnStreamerSecond:(id)arg1 stateChanged:(int)arg2 previousState:(int)arg3;
- (void)SaavnStreamerSecond:(id)arg1 didFinishBufferingSourceWithQueueItemId:(id)arg2;
- (void)SaavnStreamerSecond:(id)arg1 didStartPlayingQueueItemId:(id)arg2;
- (void)audioPlayer:(id)arg1 didCancelQueuedItems:(id)arg2;
- (void)audioPlayer:(id)arg1 logInfo:(id)arg2;
- (void)audioPlayer:(id)arg1 unexpectedError:(int)arg2;
- (void)audioPlayer:(id)arg1 didFinishPlayingQueueItemId:(id)arg2 withReason:(int)arg3 andProgress:(double)arg4 andDuration:(double)arg5;
- (void)audioPlayer:(id)arg1 stateChanged:(int)arg2 previousState:(int)arg3;
- (void)printState:(int)arg1;
- (void)initializeSecondStreamer;
- (void)audioPlayer:(id)arg1 didFinishBufferingSourceWithQueueItemId:(id)arg2;
- (void)audioPlayer:(id)arg1 didStartPlayingQueueItemId:(id)arg2;
- (void)audioPlayerDidFinishPlaying;
- (void)changeGainValuesForDelegate:(id)arg1;
- (void)enableEqualizerForDelegate:(_Bool)arg1;
- (void)audioPlayerEndInterruption:(id)arg1 withFlags:(unsigned long long)arg2;
- (void)audioPlayerBeginInterruption:(id)arg1;
- (void)audioPlayerDecodeErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (_Bool)seekWasRequested;
- (double)getBitRate;
- (double)getCurrentRadioProgress;
- (double)getProgress;
- (double)getStreamerProgress;
- (double)getLastStreamerProgress;
- (double)getDuration;
- (double)getLastStreamerDuration;
- (void)seekToTime:(float)arg1;
- (void)resetStreamerGain;
- (void)resetEqualizerForStreamer:(id)arg1;
- (void)setPause;
- (void)setStreamerStop;
- (_Bool)isSeeking;
- (_Bool)isValid;
- (_Bool)isIdle;
- (_Bool)isPaused;
- (_Bool)isStopping;
- (_Bool)isWaiting;
- (_Bool)isPlayingOnlineSong;
- (_Bool)isChromeCasting;
- (_Bool)isPlaying;
- (_Bool)isStreamerPlaying;
- (void)pauseSaavnStreamer;
- (void)startCachedPlayback:(id)arg1;
- (id)decryptPublicKey:(id)arg1 usingPrivateKeyFromPath:(id)arg2;
- (void)deleteIfSongNotExist:(id)arg1;
- (_Bool)isAVPlayerLoading;
- (void)loadCachedSong:(id)arg1;
- (void)reportPlayerProgress:(id)arg1;
- (void)updateAdBreaksSeekingBackward:(double)arg1;
- (void)consumeAdbreak;
- (_Bool)checkAndUpdateIfAdbreakPassedAtTime:(double)arg1 playMidrollAd:(_Bool)arg2;
- (double)getNextAdBreakTimestamp;
- (void)setAdBreaks:(id)arg1;
- (void)updateCrossFadeProgressWithType:(long long)arg1 progress:(double)arg2 duration:(double)arg3;
- (_Bool)adInterruptionTakingPlace;
- (void)resetCrossFadeProgress;
- (void)updateProgress:(id)arg1;
- (void)adsUpdateProgress:(id)arg1;
- (void)resetConnLostTime;
- (void)setConnLostTime;
- (void)resetSongAfterConnLost;
- (void)restartSongAfterConnLost;
- (void)displayConnectionAlert;
- (void)playIntroAd:(id)arg1;
- (void)setPlayerSeeked:(_Bool)arg1;
- (id)getCurrentMediaURL;
- (id)getCurrentlyAudioFormat;
- (long long)getCurrentAudioQuality;
- (id)getPendingAdbreaks;
- (void)switchAudioQuality:(long long)arg1;
- (id)getBitrateUrlFromSong:(long long)arg1 withSong:(id)arg2;
- (id)getBitrateUrl:(long long)arg1;
- (void)getCurrentNetworkType;
- (void)stopPlaybackOfCasting;
- (void)stopPlayback;
- (void)songDeleted;
- (void)startBackgroundTask;
- (void)startPlayback:(id)arg1;
- (void)togglePlayPause;
- (void)resumePlayback;
- (void)pausePlayback;
- (void)setMPDetails:(id)arg1 withArt:(_Bool)arg2;
- (void)discardSecondStreamer;
- (void)swapStreamers;
- (void)updatePlayerRoles;
- (void)loadSong:(id)arg1;
- (void)setVolume:(float)arg1;
- (_Bool)checkandUpdateMediaObjectVersion:(id)arg1 isCached:(_Bool)arg2;
- (void)setMuted:(_Bool)arg1;
- (_Bool)checkSlotStatus:(id)arg1;
- (void)skipNextAdsCheck:(_Bool)arg1;
- (int)shouldBreakSlot:(id)arg1;
- (void)loadAudioAd:(id)arg1;
- (void)reloadSong;
- (void)clearStreamer;
- (void)stopStreamer;
- (void)stopReportPlaybackProgressTimer;
- (void)stopAdsProgressTimer;
- (void)stopProgressTimer;
- (void)startAdsTimerThread;
- (void)startTimerThread;
- (_Bool)isTimerRunning;
- (void)logAudioInfo:(id)arg1;
- (void)initAdsTimer;
- (void)initTimers;
- (id)getSongData;
- (id)getCurrentPid;
- (int)getStreamerState;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

