//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface Util : NSObject
{
    float navTitleW;
}

+ (_Bool)shouldTriggerShare:(int)arg1 withTrigger:(int)arg2;
+ (void)triggerModalWithStreamCount:(id)arg1;
+ (void)shareEntityType:(int)arg1 withDict:(id)arg2;
+ (void)showHardUpgrade:(id)arg1 isHardUpgrade:(_Bool)arg2;
+ (void)dismissNotification;
+ (void)checkDuplicateCookies;
+ (void)clearCacheData;
+ (id)searchForclassType:(Class)arg1 inViewHierarchy:(id)arg2 isSubclass:(_Bool)arg3;
+ (void)displayHierarchyForView:(id)arg1;
+ (void)dumpView:(id)arg1 atIndent:(int)arg2 into:(id)arg3;
+ (int)getCellType:(id)arg1;
+ (void)checkForPersistentServer;
+ (int)fetchLastSelectedTAB;
+ (void)storeLastSelectedTAB:(long long)arg1;
+ (id)decryptPhoneNumber:(id)arg1;
+ (id)decryptMediaUrl:(id)arg1;
+ (_Bool)isValidSongObject:(id)arg1;
+ (_Bool)isValidMediaUrl:(id)arg1;
+ (id)loadAllDataFromDisk:(id)arg1;
+ (id)loadDataFromDisk:(id)arg1 key:(id)arg2;
+ (void)removeLRUObject:(id)arg1;
+ (void)saveDataToDiskLRU:(id)arg1 key:(id)arg2 data:(id)arg3;
+ (void)saveDataToDisk:(id)arg1 key:(id)arg2 data:(id)arg3;
+ (id)pathForDataFile:(id)arg1;
+ (void)setApplicationShortcutItems;
+ (_Bool)is3DTouchAvailable;
+ (_Bool)isiOSEqualTo:(float)arg1;
+ (_Bool)isiOSLTE:(float)arg1;
+ (_Bool)isiOSLT:(float)arg1;
+ (_Bool)isiOSGTE:(float)arg1;
+ (_Bool)isiOSGT:(float)arg1;
+ (void)pushiPadSearchWithQuery:(id)arg1 inScope:(id)arg2;
+ (void)pushiPadSearch;
+ (id)iPadNavSearchButton;
+ (float)getRotationDegrees;
+ (struct CGRect)detailFrame;
+ (_Bool)isLandscape;
+ (_Bool)isiPad;
+ (id)getDateString:(double)arg1;
+ (id)getCurrentViewController;
+ (void)logStat:(id)arg1 songId:(id)arg2 loginmode:(id)arg3 promode:(id)arg4 connection_state:(id)arg5;
+ (void)trackPageView:(id)arg1 songId:(id)arg2;
+ (void)reportAppOpenToAdMob;
+ (id)hashedISU;
+ (id)md5HexDigest:(id)arg1;
+ (void)fadeIn:(id)arg1;
+ (void)fadeOut:(id)arg1;
+ (_Bool)managePromptCount:(int)arg1;
+ (id)getSongLangFromPermaURL:(id)arg1;
+ (void)showRadioLanguageAlert:(id)arg1;
+ (void)showRadioAlert;
+ (void)showUnavailableModalIn:(id)arg1 withURL:(id)arg2;
+ (id)getPlayableTracksInfo:(id)arg1 startingIndex:(unsigned long long)arg2;
+ (id)getPlayableSongs:(id)arg1;
+ (_Bool)isFollowing:(id)arg1;
+ (id)getPlaylistStringFromString:(id)arg1;
+ (id)getPlaylistString:(id)arg1;
+ (id)getContentsStringFromSongArray:(id)arg1;
+ (id)arrayFromSongList:(id)arg1;
+ (_Bool)isOfflineSongsInPlaylist:(id)arg1;
+ (_Bool)isOfflineSongsAvailableInPlaylist:(id)arg1;
+ (int)getNumOfflineSongsIn:(id)arg1;
+ (int)numOfflineSongsIn:(id)arg1;
+ (int)numSongsIn:(id)arg1;
+ (id)getTableViewHeader:(id)arg1 inTable:(id)arg2 withAlignment:(long long)arg3;
+ (struct CGSize)scrollContentSize:(id)arg1 withPadRight:(float)arg2 withPadBottom:(float)arg3;
+ (struct CGSize)scrollContentSize:(id)arg1 withPadBottom:(float)arg2;
+ (struct CGSize)scrollContentSize:(id)arg1 withPadRight:(float)arg2;
+ (struct CGSize)scrollContentSize:(id)arg1;
+ (id)knockoutAttributedTitle:(id)arg1;
+ (id)knockoutTitle:(id)arg1;
+ (id)settingsNavButton;
+ (id)modalMoreButton;
+ (id)modalBackButton:(id)arg1 withTint:(id)arg2;
+ (id)modalBackButton:(id)arg1;
+ (id)newOutlineButton:(id)arg1 withFrame:(struct CGRect)arg2 borderColor:(id)arg3 tapColor:(id)arg4 textColor:(id)arg5 tapTextColor:(id)arg6 font:(id)arg7;
+ (id)newFlatButton:(id)arg1 withFrame:(struct CGRect)arg2 bgColor:(id)arg3 tapColor:(id)arg4 textColor:(id)arg5 tapTextColor:(id)arg6 font:(id)arg7;
+ (id)styleInput:(id)arg1 inFrame:(struct CGRect)arg2 withPadding:(struct CGSize)arg3;
+ (void)showExplicitLabel:(id)arg1 withFullLabel:(_Bool)arg2;
+ (void)showExplicitLabel:(id)arg1;
+ (long long)numberOfHoursSince:(id)arg1;
+ (long long)numberOfDaysSince:(id)arg1;
+ (id)formatReleaseDate:(id)arg1 withFormat:(id)arg2 dateStyle:(unsigned long long)arg3 andTimeStyle:(unsigned long long)arg4;
+ (id)formatReleaseDate:(id)arg1;
+ (id)getDictFromJsonString:(id)arg1;
+ (id)getJsonStringFromDict:(id)arg1;
+ (_Bool)isPhoneNumber:(id)arg1;
+ (id)getUsernameFrom:(id)arg1 withLastName:(_Bool)arg2 showEmail:(_Bool)arg3;
+ (id)getUsernameFrom:(id)arg1 withLastName:(_Bool)arg2;
+ (_Bool)isUserLoggedInViaEmail:(id)arg1;
+ (_Bool)isValidEmail:(id)arg1;
+ (id)getEncryptedUidFrom:(id)arg1;
+ (id)trimWhitespace:(id)arg1;
+ (id)pluralize:(id)arg1 with:(unsigned long long)arg2;
+ (id)addCommas:(int)arg1;
+ (id)getSHA1Hash:(id)arg1;
+ (id)getUniqueHistoryIdFromSongs:(id)arg1;
+ (id)newFooterAttributedString:(id)arg1;
+ (float)multilineAttributedStringHeight:(id)arg1 withWidth:(float)arg2;
+ (float)attributedStringWidth:(id)arg1;
+ (float)multilineStringHeight:(id)arg1 font:(id)arg2 inWidth:(float)arg3;
+ (float)stringHeight:(id)arg1 font:(id)arg2;
+ (float)stringWidth:(id)arg1 font:(id)arg2;
+ (id)convertHTMLEntities:(id)arg1;
+ (id)checkAndReturnString:(id)arg1;
+ (_Bool)isNonEmptyNumber:(id)arg1;
+ (_Bool)isNonEmptyDictionary:(id)arg1;
+ (_Bool)isNonEmptyArray:(id)arg1;
+ (_Bool)isNonEmptyString:(id)arg1;
+ (id)newLabel:(id)arg1 color:(id)arg2 font:(id)arg3;
+ (id)defaultImageForOrientation:(long long)arg1;
+ (id)defaultImage;
+ (_Bool)needsHiRes;
+ (id)getImageSize:(unsigned long long)arg1 from:(id)arg2;
+ (id)getColorFromImage:(id)arg1 avoidColor:(id)arg2;
+ (id)getColorFromImage:(id)arg1;
+ (id)createQuadArtFrom:(id)arg1;
+ (id)getOfflineImage:(id)arg1 atSize:(struct CGSize)arg2;
+ (id)blur:(id)arg1 toRadius:(float)arg2;
+ (id)blur:(id)arg1;
+ (id)imageWithImage:(id)arg1 scaledToSize:(struct CGSize)arg2;
+ (id)resizeImage:(id)arg1 toSize:(struct CGSize)arg2;
+ (id)downsizeImage:(id)arg1 qualityType:(int)arg2;
+ (id)imageFromColor:(id)arg1;
+ (int)randFrom:(int)arg1 to:(int)arg2;
+ (double)degreesToRadians:(double)arg1;
+ (float)greaterOf:(float)arg1 and:(float)arg2;
+ (void)setAnchorPoint:(struct CGPoint)arg1 forView:(id)arg2;
+ (struct CGSize)gridSizeFor:(float)arg1 atRatio:(float)arg2 inCols:(int)arg3 withTitle:(_Bool)arg4 withMetaLines:(unsigned long long)arg5 andExtraLines:(unsigned long long)arg6;
+ (struct CGSize)gridSizeForTableGrid:(float)arg1 atRatio:(float)arg2 withTitle:(_Bool)arg3 withMetaLines:(unsigned long long)arg4 andExtraLines:(unsigned long long)arg5;
+ (struct CGSize)gridSizeFor:(float)arg1 atRatio:(float)arg2 withTitle:(_Bool)arg3 withMetaLines:(unsigned long long)arg4 andExtraLines:(unsigned long long)arg5;
+ (float)bannerHeight;
+ (void)addShadowToView:(id)arg1 withColor:(id)arg2 andOffset:(struct CGSize)arg3 andRadius:(int)arg4;
+ (void)showProReminder:(id)arg1 withDormancy:(_Bool)arg2;
+ (void)showGoProIn:(id)arg1 asModal:(_Bool)arg2 withTitle:(id)arg3 context:(id)arg4 dismissHandler:(CDUnknownBlockType)arg5;
+ (void)showGoProIn:(id)arg1 asModal:(_Bool)arg2 withTitle:(id)arg3 dismissHandler:(CDUnknownBlockType)arg4;
+ (void)showLoginIn:(id)arg1 fromSource:(id)arg2 viaProAction:(_Bool)arg3 context:(id)arg4 dismissHandler:(CDUnknownBlockType)arg5;
+ (void)showLoginIn:(id)arg1 fromSource:(id)arg2 viaProAction:(_Bool)arg3 dismissHandler:(CDUnknownBlockType)arg4;
+ (void)accessContentFromVC:(id)arg1 showLoginUI:(_Bool)arg2 asModal:(_Bool)arg3 viaProAction:(_Bool)arg4 withContext:(id)arg5 dismissHandler:(CDUnknownBlockType)arg6;
+ (_Bool)accessProActionModalFromVC:(id)arg1 proActionType:(int)arg2;
+ (id)createOverlay:(struct CGRect)arg1 withRadius:(float)arg2;
+ (id)createCard;
+ (id)newShadowTitleView:(id)arg1 withSubtitle:(id)arg2;
+ (id)newTitleView:(id)arg1 titleColor:(id)arg2 withSubtitle:(id)arg3 subtitleColor:(id)arg4 atSize:(struct CGSize)arg5;
+ (id)newTitleView:(id)arg1 withSubtitle:(id)arg2 atSize:(struct CGSize)arg3;
+ (id)newTitleView:(id)arg1 withSubtitle:(id)arg2;
+ (float)setValue:(float)arg1 iPhone5:(float)arg2 iPhone4:(float)arg3;
+ (int)getScreenHeight;
+ (int)getAppHeight;
+ (int)getScreenWidth;
+ (int)getAppWidth;
+ (id)convertDictToString:(id)arg1;
+ (void)registerFBDeferredDeeplinkToSaavnCloud:(id)arg1;
+ (id)constructApiWebSocketRequest:(id)arg1 withParams:(id)arg2;
+ (id)constructApiRequest:(id)arg1 withParams:(id)arg2;
+ (id)createMiniSongObjArray:(id)arg1;
+ (id)getStationType:(int)arg1;
+ (id)stationTypeInfo;
+ (int)getStationTypeNumber:(id)arg1;
+ (long long)hexIntFromColor:(id)arg1;
+ (id)colorFromHex:(id)arg1 withAlpha:(float)arg2;
+ (id)colorFromHex:(id)arg1;
+ (id)getFeedbackDiagnostics;
+ (id)getSubStateString;
+ (id)getHardware:(_Bool)arg1;
+ (id)appDel;
+ (id)backgroundQueue;
+ (id)dataCache;
+ (id)fileLock;
+ (id)getTabBarController;
+ (_Bool)tabOkayForOffline:(int)arg1;

@end

