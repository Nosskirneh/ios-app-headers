//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "VXBassSourceDelegate-Protocol.h"
#import "VXBassSourceLoaderDelegate-Protocol.h"
#import "VXDeviceManagerIOSDelegate-Protocol.h"
#import "VXOutputMixerDelegate-Protocol.h"

@class GCDTimer, NSArray, NSDictionary, NSString, NSTimer, VXBassAudioDevice, VXBassHistogramBuilder, VXBassSource, VXBassSourceLoader, VXDSPBs2b, VXDeviceManagerIOS, VXGraphicEqualizer, VXOutputMixer, VXParametricEQ, VXSpectrumProvider, VXTrackDescriptor;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, VXBassPlayDelegate;

@interface VXBass : NSObject <VXBassSourceDelegate, VXOutputMixerDelegate, VXDeviceManagerIOSDelegate, VXBassSourceLoaderDelegate>
{
    NSArray *_eqGains;
    float _eqPreamp;
    _Bool _enabledEQ;
    VXGraphicEqualizer *_graphicEqualizer;
    VXBassHistogramBuilder *_histogramBuilder;
    VXSpectrumProvider *_analyser;
    long long _analyserSpectraSize;
    float _analyserMagnitude;
    VXDSPBs2b *_bs2bDsp;
    NSObject<OS_dispatch_queue> *_worker_queue_serial;
    NSObject<OS_dispatch_semaphore> *_pendingDeviceSemaphore;
    id lastRequestedTrackUserInfo;
    GCDTimer *_stallTimer;
    GCDTimer *_unstallTimer;
    GCDTimer *_playNextTimer;
    NSTimer *_positionTimer;
    long long _networkActivityCount;
    id _sptStreamingController;
    _Bool _isSeeking;
    _Bool _extendedLog;
    _Bool _bassIsInit;
    _Bool _networkIsReachable;
    _Bool _wantsToPlay;
    unsigned int _fftDataFlag;
    id _lastForceStartedUserInfo;
    float _fadeDuration;
    _Bool _manualEQGain;
    _Bool _shouldBuildHistograms;
    _Bool _pending;
    _Bool _tempoEnable;
    _Bool _tempoIsTurntableStyle;
    _Bool _shouldAutopauseOnAdvance;
    _Bool _shouldLoadLocalToMemory;
    _Bool _gapOverlapEnabled;
    _Bool _audioUseSurroundSoundUpmix;
    _Bool _audioFadeOnStateChangex;
    _Bool _audioSynchronizeSampleRate;
    _Bool _audioDeviceAutoHogingEnabled;
    _Bool _mute;
    _Bool _BS2BLastPriority;
    _Bool _replayGainFromTagsEnabled;
    float _volume;
    float _histogramInterval;
    int _bassState;
    float _tempo;
    float _channelsPan;
    double _currentPosition;
    long long _fftSize;
    unsigned long long _histogramLength;
    VXBassSource *_currentSource;
    double _crossFadingTime;
    long long _audioChannelsMode;
    unsigned long long _BS2BPreset;
    VXDeviceManagerIOS *_deviceManager;
    id <VXBassPlayDelegate> _delegate;
    VXOutputMixer *_outputMixer;
    VXBassSource *_nextSource;
    VXBassSource *_currentSourceInternal;
    VXTrackDescriptor *_nextTrackDescriptor;
    VXBassSourceLoader *_loader;
    VXBassAudioDevice *_currentAudioDevice;
    NSDictionary *_peqParameters;
    VXParametricEQ *_parametric;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
@property(retain, nonatomic) VXParametricEQ *parametric; // @synthesize parametric=_parametric;
@property(retain, nonatomic) NSDictionary *peqParameters; // @synthesize peqParameters=_peqParameters;
@property(retain, nonatomic) VXBassAudioDevice *currentAudioDevice; // @synthesize currentAudioDevice=_currentAudioDevice;
@property(retain, nonatomic) VXBassSourceLoader *loader; // @synthesize loader=_loader;
@property(retain) VXTrackDescriptor *nextTrackDescriptor; // @synthesize nextTrackDescriptor=_nextTrackDescriptor;
@property(readonly, nonatomic) VXBassSource *currentSourceInternal; // @synthesize currentSourceInternal=_currentSourceInternal;
@property(retain, nonatomic) VXBassSource *nextSource; // @synthesize nextSource=_nextSource;
@property(retain, nonatomic) VXOutputMixer *outputMixer; // @synthesize outputMixer=_outputMixer;
@property(nonatomic) __weak id <VXBassPlayDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) VXDeviceManagerIOS *deviceManager; // @synthesize deviceManager=_deviceManager;
@property(nonatomic) _Bool replayGainFromTagsEnabled; // @synthesize replayGainFromTagsEnabled=_replayGainFromTagsEnabled;
@property(nonatomic) _Bool BS2BLastPriority; // @synthesize BS2BLastPriority=_BS2BLastPriority;
@property(nonatomic) unsigned long long BS2BPreset; // @synthesize BS2BPreset=_BS2BPreset;
@property(nonatomic) float channelsPan; // @synthesize channelsPan=_channelsPan;
@property(nonatomic) _Bool mute; // @synthesize mute=_mute;
@property(nonatomic) _Bool audioDeviceAutoHogingEnabled; // @synthesize audioDeviceAutoHogingEnabled=_audioDeviceAutoHogingEnabled;
@property(nonatomic) _Bool audioSynchronizeSampleRate; // @synthesize audioSynchronizeSampleRate=_audioSynchronizeSampleRate;
@property(nonatomic) _Bool audioFadeOnStateChangex; // @synthesize audioFadeOnStateChangex=_audioFadeOnStateChangex;
@property(nonatomic) _Bool audioUseSurroundSoundUpmix; // @synthesize audioUseSurroundSoundUpmix=_audioUseSurroundSoundUpmix;
@property(nonatomic) long long audioChannelsMode; // @synthesize audioChannelsMode=_audioChannelsMode;
@property(nonatomic) double crossFadingTime; // @synthesize crossFadingTime=_crossFadingTime;
@property(nonatomic) _Bool gapOverlapEnabled; // @synthesize gapOverlapEnabled=_gapOverlapEnabled;
@property(nonatomic) _Bool shouldLoadLocalToMemory; // @synthesize shouldLoadLocalToMemory=_shouldLoadLocalToMemory;
@property(nonatomic) _Bool shouldAutopauseOnAdvance; // @synthesize shouldAutopauseOnAdvance=_shouldAutopauseOnAdvance;
@property(nonatomic) _Bool tempoIsTurntableStyle; // @synthesize tempoIsTurntableStyle=_tempoIsTurntableStyle;
@property(nonatomic) _Bool tempoEnable; // @synthesize tempoEnable=_tempoEnable;
@property(nonatomic) float tempo; // @synthesize tempo=_tempo;
@property(readonly, nonatomic) int bassState; // @synthesize bassState=_bassState;
@property(readonly, nonatomic, getter=isPending) _Bool pending; // @synthesize pending=_pending;
@property(retain, nonatomic) VXBassSource *currentSource; // @synthesize currentSource=_currentSource;
@property(nonatomic) float histogramInterval; // @synthesize histogramInterval=_histogramInterval;
@property(nonatomic) unsigned long long histogramLength; // @synthesize histogramLength=_histogramLength;
@property(nonatomic) _Bool shouldBuildHistograms; // @synthesize shouldBuildHistograms=_shouldBuildHistograms;
@property(nonatomic) long long fftSize; // @synthesize fftSize=_fftSize;
@property(nonatomic) _Bool manualEQGain; // @synthesize manualEQGain=_manualEQGain;
- (void).cxx_destruct;
- (id)loader:(id)arg1 delegateForSourceWithUserInfo:(id)arg2;
- (void)loader:(id)arg1 finishedLoadingSource:(id)arg2;
- (_Bool)loader:(id)arg1 shouldLoadLocalToMemory:(id)arg2;
- (_Bool)loader:(id)arg1 shouldCacheSourceWithUserInfo:(id)arg2;
- (_Bool)loader:(id)arg1 failedLoadingSourceWithURL:(id)arg2 userInfo:(id)arg3;
- (void)deviceManager:(id)arg1 deviceRequestsPreviousTrack:(id)arg2;
- (void)deviceManager:(id)arg1 deviceRequestsNextTrack:(id)arg2;
- (void)deviceManager:(id)arg1 devicePausedPlayback:(id)arg2;
- (void)deviceManager:(id)arg1 deviceResumedPlayback:(id)arg2;
- (void)deviceManagerVolumeChanged:(id)arg1;
- (void)deviceManagerAvailableOutputsChange:(id)arg1;
- (void)deviceManagerRouteChange:(id)arg1;
- (void)outputMixerDidFadeOut:(id)arg1;
- (void)outputMixerDidUnstall:(unsigned int)arg1;
- (void)outputMixerDidStall:(unsigned int)arg1;
- (_Bool)sourceShouldUseReplaygain:(id)arg1;
- (void)source:(id)arg1 didBuildHistogram:(id)arg2 toPosition:(float)arg3 complete:(_Bool)arg4;
- (unsigned long long)histogramLengthForSource:(id)arg1;
- (void)source:(id)arg1 didPauseWithReason:(id)arg2;
- (void)source:(id)arg1 reportsInsufficientNetworkSpeedWithTimeout:(double)arg2;
- (void)source:(id)arg1 streamMetaInfoRecieved:(id)arg2;
- (void)source:(id)arg1 streamNameRecieved:(id)arg2;
- (void)source:(id)arg1 didEndDownloading:(_Bool)arg2;
- (unsigned long long)source:(id)arg1 didDownloadData:(id)arg2 atOffset:(unsigned long long)arg3;
- (_Bool)source:(id)arg1 willDownloadTotalLength:(unsigned long long)arg2;
- (void)source:(id)arg1 downloadProgress:(float)arg2;
- (void)sourceStoppedNetworkActivity:(id)arg1;
- (void)sourceStartedNetworkActivity:(id)arg1;
- (void)sourceTimedOutNeedsRecreate:(id)arg1 needsAuth:(_Bool)arg2;
- (void)sourceFinishedGaplessPlaying:(id)arg1;
- (void)sourceIsAboutToFinish:(id)arg1;
- (void)sourceReachedFadingPosition:(id)arg1;
- (void)sourceStartedPlaying:(id)arg1;
- (void)sourceFinishedPlaying:(id)arg1;
- (void)sourceReachedPartialTransition:(id)arg1;
- (void)sourceFinishedFadingOut:(id)arg1;
- (void)reportNewSource:(id)arg1 forURL:(id)arg2 withErrorCode:(int)arg3 userInfo:(id)arg4;
- (void)reportKVOTotalLength;
- (void)reportKVOCurrentPosition:(id)arg1;
- (void)reportStall:(_Bool)arg1;
- (void)notifySourceFinish:(id)arg1 percentPlayed:(float)arg2;
- (void)notifySourceFinishInMainThread:(id)arg1;
- (void)updateBS2B;
- (id)eqPresetNames;
- (void)updatePEQ;
- (void)enableEQWithPresetIndex:(unsigned long long)arg1;
- (void)enablePeqWithParameters:(id)arg1;
- (_Bool)isEqEnabled;
- (void)disableEQ;
- (void)enableEQWithPreamp:(float)arg1 gains:(id)arg2;
- (void)updateEQ;
- (void)getFFT:(float *)arg1 ofSize:(long long *)arg2;
@property(readonly, nonatomic) float *analyserData;
@property(readonly, nonatomic) long long analyserDataSize;
- (void)_setAnalyserRunning:(_Bool)arg1;
- (void)stopAnalyser;
- (void)runAnalyserWithSpectraSize:(long long)arg1;
- (_Bool)buildHistogramForURL:(id)arg1 barCount:(long long)arg2 startPosition:(float)arg3 partialLength:(float)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)buildHistogramForURL:(id)arg1 barCount:(long long)arg2 checkIsCurrent:(_Bool)arg3 completionBlock:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) float currentLevelLog;
@property(readonly, nonatomic) float currentLevel;
- (void)updateAudioUpmix;
- (id)nameOfMixerState:(long long)arg1;
- (id)mixerMatrixForSource:(id)arg1 audioDevice:(id)arg2;
- (void)recycleMixerWithFadeout:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)recycleMixer:(CDUnknownBlockType)arg1;
- (void)fadeInEnvelopeOnSource:(id)arg1;
- (_Bool)attachSourceToMixer:(id)arg1;
- (void)_updateMixerProcessing;
- (id)createOutputMixer;
@property(readonly, nonatomic) float bitrate;
@property(readonly, nonatomic) NSString *metaInfo;
@property(readonly, nonatomic) NSString *streamTitle;
@property(readonly, nonatomic) NSString *streamName;
@property(readonly, nonatomic) _Bool isCurrentEndlessStream;
@property(readonly, nonatomic) _Bool isCurrentNetworkSource;
@property(readonly, nonatomic) double downloadProgress;
@property(readonly, nonatomic) double downloadStart;
@property(readonly, nonatomic) double totalLength;
@property(readonly, nonatomic) double timeLeft;
- (void)_seekMixerToPosition;
- (void)_willStartSeekingFromPosition:(double)arg1;
@property(nonatomic) double currentPosition; // @synthesize currentPosition=_currentPosition;
- (id)metadataForFileURL:(id)arg1;
- (float)totalDurationForFileURL:(id)arg1;
- (id)currentSourceAdvancedDescription;
- (id)currentSourceDescription;
- (_Bool)resetPositionIfEndless;
- (void)restartTotalTimeCalculation;
- (float)currentSourceTotalLength;
- (float)currentSourcePositionRatio;
- (void)setCurrentSourceInternal:(id)arg1;
@property(nonatomic) float volume; // @synthesize volume=_volume;
- (void)_updateVolumeInternal;
@property(nonatomic) long long audioResampleAntiAliasing;
@property(readonly, nonatomic) long long audioOutputSampleRate;
@property(readonly, nonatomic) long long outputMixerSampleRate;
- (void)setSampleRate:(long long)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)updateToBestSampleRateForSource:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (long long)needsSampleRateChangeForSource:(id)arg1;
- (void)updateSampleRatePolicy;
@property(readonly, nonatomic, getter=isStalled) _Bool stalled;
- (void)stop;
- (void)resume;
- (void)pause;
- (void)play;
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
- (void)killPositionTimer;
- (void)resetPositionTimer;
- (_Bool)setBassDeviceContext:(id)arg1;
- (void)setBassState:(int)arg1;
- (void)killPlayNextTimer;
- (void)playNextWithGap;
- (void)playNext;
- (_Bool)isPartialTransitionWithPartialLength:(float)arg1 nextURL:(id)arg2 nextUserInfo:(id)arg3;
- (_Bool)isSpotifyInternalTransition:(id)arg1;
- (id)trackRemoteIdForUserInfo:(id)arg1;
- (void)setNextURL:(id)arg1 startPos:(float)arg2 length:(float)arg3 userInfo:(id)arg4 resolverBlock:(CDUnknownBlockType)arg5;
- (void)setNextURL:(id)arg1 userInfo:(id)arg2 resolverBlock:(CDUnknownBlockType)arg3;
- (void)sptStopAudioStreamingController;
- (id)sptAudioStreamingControllerForClientId:(id)arg1;
- (void)dsdSampleRatePrep;
- (_Bool)prepareNextWithCompletion:(CDUnknownBlockType)arg1;
- (void)forceApplySource:(id)arg1 withErrorCode:(unsigned int)arg2;
- (void)setURL:(id)arg1 startPos:(float)arg2 length:(float)arg3 initPosition:(float)arg4 userInfo:(id)arg5 resolverBlock:(CDUnknownBlockType)arg6;
- (void)setURL:(id)arg1 userInfo:(id)arg2 resolverBlock:(CDUnknownBlockType)arg3;
- (void)setCurrentAudioDeviceInternal:(id)arg1;
- (void)setNetworkReachabilityStatus:(_Bool)arg1;
- (void)setAudioSessionConfig:(unsigned long long)arg1;
@property(nonatomic) int audioBufferSize;
- (_Bool)setConfigForOption:(unsigned int)arg1 value:(unsigned int)arg2;
@property(readonly, copy) NSString *description;
- (id)advancedDescription;
- (id)infoAboutPlugin:(unsigned int)arg1;
- (void)loadAllPlugins;
- (void)basicConfiguration;
- (id)dispatchWorkerQueueSerial;
- (void)onEndlessSourceNetworkBreak:(id)arg1;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;
- (void)logHardwareDecodeAvail;
- (void)logBuffers;
- (void)logTags:(id)arg1;
- (void)testHLS;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

